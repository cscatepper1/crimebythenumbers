[["index.html", "Crime by the Numbers: A Criminologists Guide to R 1 Preface 1.1 Why learn to program? 1.2 What you will learn 1.3 What you wont learn 1.4 Simple vs Easy 1.5 How to read this book 1.6 Citing this book 1.7 How to contribute to this book 1.8 Where to find data included in this book 1.9 Where to find code included in this book", " Crime by the Numbers: A Criminologists Guide to R Jacob Kaplan 2021-11-28 1 Preface This book introduces the programming language R and is meant for undergrads or graduate students studying criminology. R is a programming language that is well-suited to the type of work frequently done in criminology - taking messy data and turning it into useful information. While R is a useful tool for many fields of study, this book focuses on the skills criminologists should know and uses crime data for the example data sets. For this book you should have the latest version of R installed and be running it through RStudio Desktop (The free version). Well get into what R and RStudio are soon but please have them installed to be able to follow along with each chapter. I highly recommend following along with the code for each lesson and then try to use the lessons learned on a data set you are interested in. 1.1 Why learn to program? With the exception of some more advanced techniques like scraping data from websites or from PDFs, nearly everything we do here can be done through Excel, a software youre probably more familiar with. The basic steps for research projects are generally: Open up a data set - which frequently comes as an Excel file! Change some values - misspellings or too specific categories for our purposes are very common in crime data Delete some values - such as states you wont be studying Make some graphs Calculate some values - such as number of crimes per year Sometimes do a statistical analysis depending on the type of project Write up what you find R can do all of this but why should you want (or have) to learn an entirely new skill just to do something you can already do? R is useful for two main reasons: scale and reproducibility. 1.1.1 Scale If you do a one-off project in your career such as downloading some data and making a graph out of it, it makes sense to stick with software like Excel. The cost (in time and effort) of learning R is certainly not worth it for a single (or even several) project - even one perfectly suited for using R. R (and many programming languages more generally, such as Python) has its strength in doing something fairly simple many times. For example, it may be quicker to download one file yourself than it is to write the code in R to download that file. But when it comes to downloading hundreds of files, writing the R code becomes very quickly the better option than doing it by hand. For most tasks you do in criminology when dealing with data you will end up them doing many times (including doing the same task in future projects). So R offers the trade-off of spending time upfront by learning the code with the benefit of that code being able to do work at a large scale with little extra work from you. Please keep in mind this trade-off - you need to front-load the costs of learning R for the rewards of making your life easier when dealing with data - when feeling discouraged about the small returns you get early in learning R. 1.1.2 Reproducibility The second major benefit of using R over something like Excel is that R is reproducible. Every action you take is written down. This is useful when collaborating with others (including your future self) as they can look at your code and follow along what you did without you having to show them every click you made as you frequently would on Excel. Your collaborator can look at your code to help you figure out a bug in the code or to add their own code to yours. In the research context specifically, you want to have code to give to people to ensure that your research was done correctly and there arent bugs in the code. Additionally, if you build a tool to, for example, interpret raw crime data from an agency and turn it into a map, being able to share the code so others can modify it for their own city saves these people a lot of time and effort. 1.2 What you will learn For many of the lessons we will be working through real research questions and working from start to finish as you would on your own project. This involves thinking about what you want to accomplish from the data you have and what steps you need to take to reach that goal. This involves more than just knowing what code to write - it includes figuring out what your data has, whether it can answer the question youre asking, and planning out (without writing any code yet) what you need to do when you start coding. 1.2.1 Skills There is a large range of skills in criminological research - far too large to cover in a single book. Here we will attempt to teach fundamental skills to build a solid foundation for future work. Well be focusing on the following skills and trying to reinforce our skills with each lesson. Subsetting - Taking only certain rows or columns from a data set Graphing Regular expressions - Essentially Rs Find and Replace function for text Getting data from websites (webscraping) Getting data from PDFs Mapping Writing documents through R 1.2.2 Data Criminology has a large - and growing - number of data sets publicly available for us to use. In this book we will focus on a few prominent ones including the following: Uniform Crime Report (UCR) - A FBI data set with agency-level crime data for nearly every agency in the United States Well also cover a number of other data sets such as local police data and government data on alcohol consumption in the United States. 1.3 What you wont learn This book is not a statistics book so we will not be covering any statistical techniques. Though some data sets we handle are fairly large, this book does not discuss how to deal with Big Data. While the lessons you learn in this book can apply to larger data sets, Big Data (which I tend to define loosely as data that are too large for my computer to handle) requires special skills that are outside the realm of this book. If you do intend to deal with huge data sets I recommend you look at the R package data.table which is an excellent resource for it. While we briefly cover mapping, this book will not cover working with geographic data in detail. For a comprehensive look at geographic data please see this book. This book also will not cover any qualitative data or analysis. While qualitative research is an important part of criminology, this book only focuses on working with qualitative data. Some parts of this book may apply to dealing with qualitative data, such as PDF scraping and regular expressions, but the examples I use in those chapters still deal with quantitative data. 1.4 Simple vs Easy In the course of this book we will cover things that are very simple. For example, well take a data set (think of it like an Excel file) with crime for nearly every agency in the United States and keep only data from Colorado for a small number of years. Well then find out how many murders happened in Colorado each year. This is a fairly simple task - it can be expressed in two sentences. Youll find that most of what you do is simple like this - it is quick to talk about what you are doing and the concepts are not complicated. What it isnt is easy. To actually write the R code to do this takes knowing a number of interrelated concepts in R and several lines of code to implement each step. While this distinction may seem minor, I think it is important for newer programmers to understand that what they are doing may be simple to talk about but hard to implement. It is easy to feel like a bad programmer because something that can be articulated in 10 seconds may take hours to do. So during times when you are working with R try to keep in mind that even though a project may be simple to articulate, it may be hard to code and that there is often very little correlation between the two. 1.5 How to read this book This book is written so a person who has no programming experience can start with this chapter and by the end of the book be able to do a data project from start to finish. Each chapter introduces a new skill and builds on the skills introduced in previous chapters. So if you skip ahead you may miss important skills taught in the chapters you didnt read. For someone who has no - or minimal - programming experience, I recommend reading each chapter in order. If you have more programming experience and just want to learn how to do a specific thing, feel free to skip directly to that chapter. 1.6 Citing this book If this book was useful in your research, please cite it. To cite this book, please use the below citation: Kaplan J (2021). Crime by the Numbers: A Criminologists Guide to R. https://crimebythenumbers.com/. BibTeX format: @Manual{crimebythenumbers, title = {Crime by the Numbers: A Criminologist&#39;s Guide to R}, author = {Jacob Kaplan}, year = {2021}, url = {https://crimebythenumbers.com/}, } 1.7 How to contribute to this book If you have any questions, suggestions (such as a topic to cover), or find any issues, please make a post on the Issues page for this book on GitHub. On this page you can create a new issue (which is basically just a post on this forum) with a title and a longer description of your issue. Youll need a GitHub account to make a post. Posting here lets me track issues and respond to your message or alert you when the issue is closed (i.e.Â Ive finished or denied the request). Issues are also public so you can see if someone has already posted something similar. For more minor issues like typos or grammar mistakes, you can edit the book directly through its GitHub page. Thatll make an update for me to accept, which will change the book to include your edit. To do that, click the edit button at the top of the site - the button is highlighted in the below figure. You will need to make a GitHub account to make edits. When you click on that button youll be taken to a page that looks like a Word Doc where you can make edits. Make any edits you want and then scroll to the bottom of the page. There you can write a short (please, no more than a sentence or two) description of what youve done and then submit the changes for me to review. Figure 1.1: The edit button for how to make edits of this book. Please only use the above two methods to contribute or make suggestions about the book. Dont email me. While its a bit more work for you to do it this way, since youll need to make a GitHub account if you dont already have one, it helps me. I wrote this book, in part, to help my career so having evidence that people read it and are contributing to it is important to me. Its a way to publicly measure the books impact. 1.8 Where to find data included in this book To download the data used in this book please see here. Each of the files that are used in this book are available to download here. At the top of every chapter that uses one of these files Ill say exactly which file you need to download. The best way to use this book is to follow along by downloading the data and running the code that I include in each chapter. 1.9 Where to find code included in this book If youre reading this book through its website you can easily copy the code by clicking on the Copy to clipboard option on the top right of every chunk of code. This button, shown in the image below, will copy all of the code in the chunk and you can then paste (through Control/Command+V) into R. Ive also made each chapter available to download as an R file that has every line of code used in each chapter available to you to run. To download the files, please go to the books GitHub page here. Ive saved each chapter twice - once where it only includes the code used (in the just_code folder) and once where it includes the code and all of the text in the chapter (in the code_and_text folder). So download whichever one you want to use - the code is identical in each. "],["about-the-author.html", "About the author", " About the author Jacob Kaplan is the Chief Data Scientist of the Research on Policiing Reform and Accountability (RoPRA), a multi-institution team of researchers studying policing. His current appointment is at the Princeton School of Public and International Affairs. He holds a PhD and a masters degree in criminology from the University of Pennsylvania and a bachelors degree in criminal justice from California State University, Sacramento. His research focuses on Crime Prevention Through Environmental Design (CPTED), specifically on the effect of outdoor lighting on crime. He is the author of several R packages that make it easier to work with data, including fastDummies and asciiSetupReader. His website allows easy analysis of crime-related data and he has released over a dozen crime data sets (primarily FBI UCR data) on openICPSR that he has compiled, cleaned, and made available to the public. He is also the author of books on the two primary criminal justice datasets, the FBIs Uniform Crime Reporting (UCR) Program Data, and the FBIs National Incident Based Reporting System (NIBRS) data. For a list of papers he has written (including working papers), please see here. For a list of data sets he has cleaned, aggregated, and made public, please see here. For a list of R packages he has created, please see here. "],["a-soup-to-nuts-project-example.html", "2 A soup to nuts project example 2.1 Big picture data example 2.2 Little picture data example 2.3 Reusing and modifying code", " 2 A soup to nuts project example Well finish the Introduction part of the book by going over a brief example of a kind of data project that youd do in the real world. For this chapter well look at FBI homicide data that you can download here. The file is called shr_1976_2020.rds. 2.1 Big picture data example Below is a large chunk of R code along with some comments about what the code does. The purpose of this example is to show that with relative little code (excluding blank lines and comments, there are only 35 lines of R code here) you can go from opening a dataset to making a graph that answers you research question. I dont expect you to understand any of this code as it is fairly complex and involves many different concepts in programming. So if the code is scary - and for many early programmers seeing a bunch of code that you dont understand is scary and overwhelming - feel free to ignore the code itself. Well cover each of these skills in turn throughout the book so by the end of the book you should be able to come back and understand the code (and modify it to meet your own needs). The important thing is that you can see exactly what R can do (and this is only a tiny example of Rs flexibility) and think about the process to get there (which well talk about below). At the time of this writing, the FBI had just released 2020 crime data which showed about a 30% increase in murders relative to 2019. This had led to an explosion of (in my opinion highly premature) explanations of why exactly murder went up so much in 2020. A common explanation is that it is largely driven by gun violence among gang members who are killing each other in a cyclical pattern of murders followed by retaliatory murders. For our coding example, well examine that claim by seeing if gang violence did indeed increase, and whether they increased more than other types of murders. The end result is the graph below. It is, in my opinion, a fairly strong answer to our question. It shows the percent change in murders by the victim-offender relationship from 2019 to 2020. This is using FBI murder data which technically does have a variable that says if the murder is gang related, but its a very flawed variable (i.e.Â vast undercount of gang-related murders) so I prefer to use stranger and acquaintance murders as a proxy. And we now have an easy to read graph that shows that while indeed stranger and acquaintance murders did go up a lot, nearly all relationship groups experienced far more murders in 2020 than in 2019. This suggests that there was a broad increase in murder in 2020, and was not driven merely by an increase in one or a few groups. These graphs (though modified to a table instead of a graph) were included in a article I contributed to on the site FiveThirtyEight in discussing the murder increase in 2020. So this is an actual work product that is used in major media publications - and is something that youll be able to do by the end of this book. For nearly all research you do youll follow the same process as in this example: load data into R, clean it somehow, and create a graph or a table or do a regression on it. While this can range from very simple to very complex depending on your exact situation (and how clean the data is that you start with), all research projects are essentially the same. Please look below at the large chunk of code. It is a lot of code and includes mostly things that we havent covered yet. Well next go through each of the different pieces of this code to start understanding how they work. Through the course of this book well cover these steps in more detail - as most research programming work follows the same process - so here well talk more abstractly about what each does. The goal is for you to understand the basic steps necessary for using R to do research, and understand how R can do it - but not having to understand what each line of code does just yet. library(dplyr) # Used to aggregate data #&gt; #&gt; Attaching package: &#39;dplyr&#39; #&gt; The following objects are masked from &#39;package:stats&#39;: #&gt; #&gt; filter, lag #&gt; The following objects are masked from &#39;package:base&#39;: #&gt; #&gt; intersect, setdiff, setequal, union library(ggplot2) # Used to make the graph library(crimeutils) # Used to capitalize words in a column library(tidyr) # Used to reshape the data # Load in the data shr &lt;- readRDS(&quot;data/shr_1976_2020.rds&quot;) # See which agencies reported in 2019 and 2020 # An &quot;ori&quot; is a unique identified for agencies in FBI data agencies_2019 &lt;- shr$ori[shr$year == 2019] agencies_2020 &lt;- shr$ori[shr$year == 2020] # Get which agencies reported in both years so we have an apples-to-apples comparison agencies_in_both &lt;- agencies_2019[agencies_2019 %in% agencies_2020] # Keep just data from 2019 and 2020 and where the agencies is one of the # agencies chosen above. Also keep only murder and nonnegligent manslaughter (so excluding # negligent manslaughter). shr_2019_and_2020 &lt;- shr[shr$year %in% 2019:2020,] shr_2019_and_2020 &lt;- shr_2019_and_2020[shr_2019_and_2020$ori %in% agencies_in_both,] shr_2019_and_2020 &lt;- shr_2019_and_2020[shr_2019_and_2020$homicide_type %in% &quot;murder and nonnegligent manslaughter&quot;,] # Get the number of murders by victim-offender relationship in 2019 and 2020 # Then find the percent change in murders by this group from 2019 to 2020 # Sort data by largest to smallest percent change shr_difference &lt;- shr_2019_and_2020 %&gt;% group_by(year) %&gt;% count(victim_1_relation_to_offender_1) %&gt;% spread(year, n) %&gt;% mutate(difference = `2020` - `2019`, percent_change = difference / `2019` * 100, victim_1_relation_to_offender_1 = capitalize_words(victim_1_relation_to_offender_1)) %&gt;% filter(`2019` &gt;= 50) %&gt;% arrange(percent_change) # This is only for the graph. By default graphs order alphabetically but this makes # sure it orders it based on the ordering we made above (largest to smallest percent # change) shr_difference$victim_1_relation_to_offender_1 &lt;- factor(shr_difference$victim_1_relation_to_offender_1, levels = shr_difference$victim_1_relation_to_offender_1) # Makes a barplot showing the percent change from 2019 to 2020 in number of murders # by victim group. Labels the x-axis and the y-axis, shifts the graph # so that relationship labels are on the y-axis for easy reading. And finally # uses the &quot;crim&quot; theme that changes the colors in the graph to make it a little # easier to see. ggplot(shr_difference, aes(x = victim_1_relation_to_offender_1, y = percent_change)) + geom_bar(stat = &quot;identity&quot;) + ylab(&quot;Percent Change, 2020 Vs. 2019&quot;) + xlab(&quot;Who Victim Is Relative to Murderer&quot;) + coord_flip() + theme_crim() 2.2 Little picture data example Well now look at each piece of the larger chunk of code above and Ill explain what it does. There are five different steps that I take to create the graph from the data we use: Load the packages we use Load the data Clean the data Aggregate the data Make the graph 2.2.1 Loading packages In R well often use functions written by other people that have tools that we want to use in our code. To use these functions we need to tell R that we want to use that particular package - and packages are just a collection of functions. For this example were using packages that help us clean and aggregate data or to graph it, so we load it here. The general convention is to start your R file with each of the packages you want to use at the top of the file. library(dplyr) library(ggplot2) library(crimeutils) library(tidyr) 2.2.2 Loading data Next we need to load in our data. The data were using is a .Rds file so we load it using the function readRDS() which is one of the ones built-into R so we dont actually need to use any package for it. We assign the data to the object called shr since that describes what the data is. For this example were using data from the FBIs Supplementary Homicide Reports which are an annual dataset that has relatively detailed information on most (but not all, as not all agencies report data) murders in the United States. This includes the relationship between the victim and the offender (technically the suspected offender) in the murder, which is what well look at. Each row of data is actually a murder incident, and there can be up to 11 victims per murder incident. So well be undercounting murders as in this example were only looking at the first victim in an incident. But, as its an example this is fine as I dont want it to be too complicated and including more than just the first victim would greatly complicate our code. shr &lt;- readRDS(&quot;data/shr_1976_2020.rds&quot;) 2.2.3 Cleaning One of the annoying quirks of dealing with FBI data is that different agencies report each year. So comparing different years has an issue because youll be doing an apples-to-oranges competition as an agency may report one year but not another. So for this data the first thing we need to do is to make sure were only looking at agencies that reported data in both years. The first few lines checks which agencies reported in 2019 and which agencies reported in 2020. We do this by looking at which ORIs (in the ori column) are present in each year (as agencies that did not report wont be in the data). An ORI is the an FBI term for a unique ID for that agency. Then we make a vector which has only the ORIs that are present in both years. We then subset the data to only data from 2019 and 2029 and where the agency reported in both years. Subsetting essentially means that we only keep the rows of data that meet those conditions. Another quirk of this data is that it includes homicides that are not murder - namely, negligent manslaughter. So the final subsetting condition we want it to only include murder and nonnegligent manslaughter. agencies_2019 &lt;- shr$ori[shr$year == 2019] agencies_2020 &lt;- shr$ori[shr$year == 2020] agencies_in_both &lt;- agencies_2019[agencies_2019 %in% agencies_2020] shr_2019_and_2020 &lt;- shr[shr$year %in% 2019:2020,] shr_2019_and_2020 &lt;- shr_2019_and_2020[shr_2019_and_2020$ori %in% agencies_in_both,] shr_2019_and_2020 &lt;- shr_2019_and_2020[shr_2019_and_2020$homicide_type %in% &quot;murder and nonnegligent manslaughter&quot;,] 2.2.4 Aggregating Now we have only the rows of data which we want. Each row of data is a single murder incident, so we want to aggregate that data to the year-level and see how many murders there were for each victim-offender relationship group. The following chunk of code does that and then finds the percent different. Since we can have large percent changes due to low base rates, we then remove any rows where there were fewer than 50 murders of that victim-offender relationship type in 2019. Finally, we arrange the data.frame from smallest to largest difference. Well print out the data.frame just to show you what it looks like. shr_difference &lt;- shr_2019_and_2020 %&gt;% group_by(year) %&gt;% count(victim_1_relation_to_offender_1) %&gt;% spread(year, n) %&gt;% mutate(difference = `2020` - `2019`, percent_change = difference / `2019` * 100, victim_1_relation_to_offender_1 = capitalize_words(victim_1_relation_to_offender_1)) %&gt;% filter(`2019` &gt;= 50) %&gt;% arrange(percent_change) shr_difference #&gt; # A tibble: 16 x 5 #&gt; victim_1_relation_to_offender_1 `2019` `2020` difference #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 Wife 330 294 -36 #&gt; 2 Brother 93 86 -7 #&gt; 3 Daughter 89 86 -3 #&gt; 4 Son 157 160 3 #&gt; 5 Father 95 101 6 #&gt; 6 Boyfriend 164 180 16 #&gt; 7 Girlfriend 390 431 41 #&gt; 8 Mother 118 134 16 #&gt; 9 Acquaintance 1494 1729 235 #&gt; 10 Stranger 1549 1886 337 #&gt; 11 Neighbor 85 105 20 #&gt; 12 Other Family 209 260 51 #&gt; 13 Other - Known To Victim 757 955 198 #&gt; 14 Friend 272 358 86 #&gt; 15 Husband 58 79 21 #&gt; 16 Unknown 6216 8504 2288 #&gt; # ... with 1 more variable: percent_change &lt;dbl&gt; 2.2.5 Graphing Once we have our data cleaned and organized in the way we want, we are ready to graph it. By default when R graphs data it will organize it - if it is a character type - alphabetically. In our case we want it ordered by largest to smallest change in the number of murders between 2019 and 2020 by relationship type. So we first tell R to order it by the relationship type variable. Then we use the ggplot() function (which is covered extensively in Chapters @ref(#graphing-intro) and @ref(#ois_graphs)) to make our graph. In our code we include the dataset were using, which is the shr_difference data.frame and the columns we want to graph. Then we tell it we want to create a bar chart and what we want the x-axis and y-axis labels to be. Finally, we have two lines that just affect how the graph looks. All of this is covered in the two graphing chapters, but is only several lines of code to go from cleaned data to a beautiful - and informative - graphic. shr_difference$victim_1_relation_to_offender_1 &lt;- factor(shr_difference$victim_1_relation_to_offender_1, levels = shr_difference$victim_1_relation_to_offender_1) ggplot(shr_difference, aes(x = victim_1_relation_to_offender_1, y = percent_change)) + geom_bar(stat = &quot;identity&quot;) + ylab(&quot;Percent Change, 2020 Vs. 2019&quot;) + xlab(&quot;Who Victim Is Relative to Murderer&quot;) + coord_flip() + theme_crim() 2.3 Reusing and modifying code One of the main benefits of programming is that once you write code to do one thing, its usually very easy to adapt it to do a similar thing. Below Ive copied some of the code we used above and changed only one thing: instead of looking at the column victim_1_relation_to_offender_1 were now looking at the column offender_1_weapon. Thats all I did, everything else is identical. Now after about 30 seconds of copying and changing the column name, we have a graph that shows weapon usage changes from 2019 to 2020 instead of victim-offender relationship. This is one of the key benefits of programming over something more click intensive like using Excel or SPSS.1 Theres certainly more upfront work than just clicking buttons, but once we have working code we can very quickly reuse it or modify it slightly. shr_difference &lt;- shr_2019_and_2020 %&gt;% group_by(year) %&gt;% count(offender_1_weapon) %&gt;% spread(year, n) %&gt;% mutate(difference = `2020` - `2019`, percent_change = difference / `2019` * 100, offender_1_weapon = capitalize_words(offender_1_weapon)) %&gt;% filter(`2019` &gt;= 50) %&gt;% arrange(percent_change) shr_difference$offender_1_weapon &lt;- factor(shr_difference$offender_1_weapon, levels = shr_difference$offender_1_weapon) ggplot(shr_difference, aes(x = offender_1_weapon, y = percent_change)) + geom_bar(stat = &quot;identity&quot;) + ylab(&quot;Percent Change, 2020 Vs. 2019&quot;) + xlab(&quot;Offender Weapon&quot;) + coord_flip() + theme_crim() While all this code may seem overwhelming, by the end of this book youll be able to recreate these steps - and modify the steps to look at different parts of the data or make a different graph. Im aware that technically you can write SPSS code. However, every single person I know who has ever used SPSS does so by clicking buttons and is afraid of writing code. "],["intro-to-r.html", "3 Introduction to R and RStudio 3.1 Using RStudio 3.2 Assigning variables 3.3 What are functions (and packages)? 3.4 Reading data into R 3.5 First steps to exploring data", " 3 Introduction to R and RStudio In this chapter youll learn to open a data file in R. That file is ucr2017.rda which youll need to download from the data repository available here. 3.1 Using RStudio In this lesson well start by looking at RStudio then write some brief code to load in some crime data and start exploring it. This lesson will cover code that you wont understand completely yet. That is fine, well cover everything in more detail as the lessons progress. RStudio is the interface we use to work with R. It has a number of features to make it easier for us to work with R - while not strictly necessary to use, most people who use R do so through RStudio. Well spend some time right now looking at RStudio and the options you can change to make it easier to use (and to suit your personal preferences with appearance) as this will make all of the work that we do in this book easier. When you open up RStudio youll see four panels, each of which plays an important role in RStudio. Your RStudio may not look like the setup I have in the image below - that is fine, well learn how to change the appearance of RStudio soon. At the top right is the Console panel. Here you can write code, hit enter/return, and R will run that code. If you write 2+2 it will return (in this case that just mean it will print an answer) 4. This is useful for doing something simple like using R as a calculator or quickly looking at data. In most cases during research this is where youd do something that you dont care to keep. This is because when you restart R it wont save anything written in the Console. To do reproducible research or to be able to collaborate with others you need a way to keep the code youve written. The way to keep the code youve written in a file that you can open later or share with someone else is by writing code in an R Script (if youre familiar with Stata, an R Script is just like a .do file). An R Script is essentially a text file (similar to a Word document) where you write code. To run code in an R Script just click on a line of code or highlight several lines and hit enter/return or click the Run button on the top right of the Source panel. Youll see the lines of code run in the Console and any output (if your code has an output) will be shown there too (making a plot will be shown in a different panel as well see soon). For code that you dont want to run, called comments, start the line with a pound sign # and that line will not be run (it will still print in the console if you run it but it wont do anything). These comments should explain the code you wrote (if not otherwise obvious). The Source panel is where the R Scripts will be and is located at the top left on the image below. It is good practice to do all of your code writing in an R Script - even if you delete some lines of code later - as it eliminates the possibility of losing code or forgetting what you wrote. Having all the code in front of you in a text file also makes it easier to understand the flow of code from start to finish to a task - an issue well discuss more in later lessons. While the Source and Console panels are the ones that are of most use, there are two other panels worth discussing. As these two panels let you interchange which tabs are available in them, well return to them shortly in the discussion of the options RStudio has to customize it. 3.1.1 Opening an R Script When you want to open up a new R Script you can click File on the very top left, then R Script. It will open up the script in a new tab inside of the Source panel. There are also a number of other file options available: R Presentation which can make PowerPoints, R Markdown which can make Word Documents or PDFs that incorporate R code used to make tables or graphs (and which well cover in Chapter 7), and Shiny Web App to make websites using R. There is too much to cover for an introductory book such as this but keep in mind the wide capabilities of R if you have another task to do. 3.1.2 Setting the working directory Many research projects incorporate data that someone else (such as the FBI or a local police agency) has put together. In these cases, we need to load the data into R to be able to use it. In a little bit well load a data set into R and start working on it but lets take a step back now and think about how to even load data. First, well need to get the data onto our computer somehow, probably by downloading it from an agencys website. Lets be specific - we dont download it to our computer, we download it to a specific folder on our computer (usually defaulted to the Downloads folder on a Windows machine). So lets say you wanted to load a file called data into R. If you have a file called data in both your Desktop and your Downloads folder, R wouldnt know which one you wanted. And unless your data was in the folder R searches by default (which may not be where the file is downloaded by default), R wont know which file to load. We need to tell R explicitly which folder has the data to load. We do this by setting the Working Directory (or the Folders where I want you, R, to look for my data in more simple terms). To set a working directory in R click the Session tab on the top menu, scroll to Set Working Directory, then click Choose Directory. This will open a window where you can navigate to the folder you want. After clicking Open in that window youll see a new line of code in the Console starting with setwd() and inside of the parentheses is the route your computer takes to get to the folder you selected. And now R knows which folder to look in for the data you want. It is good form to start your R Script with setwd() to make sure you can load the data. Copy the line of code that says setwd() (which stands for set working directory), including everything in the parentheses, to your R Script when you start working. 3.1.3 Changing RStudio Your RStudio looks different than my RStudio because I changed a number of settings to suit my preferences. To do so yourself click the Tools tab on the top menu and then click Global Options. This opens up a window with a number of different tabs to change how R behaves and how it looks. 3.1.3.1 General Under Workspace in the General tab make sure to uncheck the Restore .RData into workspace at startup and to set Save workspace to .RData on exit: to Never. What this does is make sure that every time you open R it starts fresh with no objects (essentially data loaded into R or made in R) from previous sessions. This may be annoying at times, especially when it comes to loading large files, but the benefits far outweigh the costs. You want your code to run from start to finish without any errors. Something Ive seen many students do is write some code in the Console (or in their R Script but out of order of how it should be run) to fix an issue with the data. This means their data is how it should be but when the R session restarts (such as if the computer restarts) they wont be able to get back to that point. Making sure your code handles everything from start to finish is well-worth the avoided headache of trying to remember what code you did to fix the issue previously. 3.1.3.2 Code The Code tab lets you specify how you want the code to be displayed. The important section for us is to make sure to check the Soft-wrap R source files check-box. If you write a very long line of code it gets too big to view all at once and you must scroll to the right to read it all. That can be annoying as you wont be able to see all the code at once. Setting Soft-wrap makes it so if a line is too long it will just be shown on multiple lines which solves that issue. In practice it is best to avoid long lines of codes as it makes it hard to read but that isnt always possible. 3.1.3.3 Appearance The Appearance tab lets you change the background, color, and size of text. Change it to your preferences. 3.1.3.4 Pane Layout The final tab well look at is Pane Layout. This lets you move around the Source, Console, and the other two panels. There are a number of different tabs to select for the panels (unchecking one just moves it to the other panel, it doesnt remove it from RStudio) and well talk about three of them. The Environment tab shows every object you load into R or make in R. So if you load a file called data you can check the Environment tab. If it is there, you have loaded the file correctly. As well discuss more in Section @ref(#functions-intro), the Help tab will open up to show you a help page for a function you want more information on (well also discuss exactly what a function is below. But for now just think of a function as a shortcut to using code that someone else wrote). The Plots tab will display any plot you make. It also keeps all plots youve made (until restarting R) so you can scroll through the plots. 3.1.4 Helpful Cheat Sheets RStudio also includes a number of links to helpful cheat sheets for a few important topics. To get to it click Help, then Cheatsheets and click on whichever one you need. 3.2 Assigning variables When were using R for research the general process is to load data, change it somehow (such as deleting rows we dont want, aggregating from some small unit such as monthly crime to a higher unit such as yearly crime), and then analyze it. To do all this we need to be able to make sure each step we do actually changes the data. This seems simple but is actually a very common issue Ive noticed when working with new R programmers - they run code on the data (e.g.Â deleting certain rows) but forget to save the change on that data. Lets look at an example of this. First, we need to know how to create objects in R. I use object in a very vague sense to mean anything that is loaded into R and can be manipulated. To create something in R we assign something to an object name. This is a very technical sentence so lets look at an example and then step back and try to understand that sentence. a &lt;- 1 Above I am creating the object a by assigning it the value of 1. In R term, a is assigned 1 or a gets 1. In non-technical terms: a equals 1. We can print out a to see if this is true. a #&gt; [1] 1 When we print out a, it returns 1 since that was what a was assigned to. We can assign a another value and it will overwrite 1 with whatever value we choose. a &lt;- 33 a #&gt; [1] 33 Now a is 33. Or a equals 33. Or a was assigned 33. Or a gets 33. Or we assigned 33 to a. There are a lot of ways to explain what we did here, which is quite frustrating and confusing to new R programmers. I use the term assignment and gets only because that is the convention in R, but if its easier for you to talk about something equaling something else (instead of being assigned to that value), please do so! The &lt;- is what does the assignment, or what makes the thing on the left equal to the thing on the right. You might be thinking that itd be easier to simple use the equal sign instead of the &lt;- - we are making things equal after all. And youd be right. Using = does the exact same thing as &lt;-. a = 13 a #&gt; [1] 13 We can use = instead of &lt;- and get the same results (with very few exceptions and none that are relevant in this book). The reason that people use &lt;- instead of = is largely a matter of convention. Its just the thing that R programmers do so new programmers adopt that. If its easier for you to use = instead of &lt;-, feel free to do that. In this book Ill use &lt;- and talking about assigning values because that is the convention in R. And while thats not really a good reason to do anything, I think that its important that new R programmers at least know what the proper conventions are and be able to speak the language (so to speak) of R programmers. So far weve just been assigning a a value, or overwriting that value with a new value. We can also assign something new to have the same value as a. Lets make the object example_123_value.demonstration get the value that a has - or in other words make example_123_value.demonstration be equal to a. example_123_value.demonstration &lt;- a example_123_value.demonstration #&gt; [1] 13 I use name example_123_value.demonstration just an example of what you can include in an object name - any character (lower or uppercase), an number (just cant start with a number) and some punctuation (e.g.Â underscores and periods). Spaces are not allowed. In practice youll want to call each object something specific so you know what it is, and ideally as short as possible. For example, if you are using crime data from Houston youll want to call it something like houston_crime. The R convention is to only use lowercase characters and include only underscores as the punctuation, but you can name it whatever is most useful to you. As noted at the start of the section, a lot of new programmers will make a change to an object but forget to assign the result back into the object (or into a new object). This means that that object wont actually change. For example, lets say we want to multiply example_123_value.demonstration by 10. If we do example_123_value.demonstration * 10 then itll print out the result in the console, but not actually change example_123_value.demonstration. What we need to do is assign that result of the multiplication back into example_123_value.demonstration. Lots of new programmers forget to assign the results back into the object, which understandably leads to lots of confusing since the object is now not what they expect it to be. example_123_value.demonstration &lt;- example_123_value.demonstration * 10 example_123_value.demonstration #&gt; [1] 130 Ive been saying object a lot, without defining it. An object is a bit tricky to define, especially at this stage in the book. Throughout this book Ill be using object to describe something that has been assigned value, such as a and example_123_value.demonstration. This also includes outside datasets read into R, such as loading an Excel file into R and even a set of R code that has been assigned to an object (which is called a function). Each object that you have created yourself can be found in the Environment tab. 3.3 What are functions (and packages)? When programming to do research youll often have to do the same thing multiple times. For example, many crime datasets are available as one file for each year of data. So if you are analyzing multiple years of data youll need to clean each file separately - and in most cases that involves using the exact same code for every file. This also includes doing things that other people have done. For example, most research leads to at least one graph made. Since making graphs is so common, many people have spent a long time writing code to make it easy to make publication-ready graphs. Instead of doing all that work ourselves we can just use code that other people have written and made available to us. While we could do this by copying code, the easiest way to reuse code it to use functions. As noted in the previous section, a function is a bunch of code (it could range from a single line of code to hundreds of lines) that has been assigned to an object.Well dive into this topic in detail in Chapter 21 - including how to make your own functions - but using functions is such an important concept that well briefly introduce them here. Almost everything that you will do in R is through functions. For the most part thatll be using functions that other people have written that are available to use - and this includes functions that are built into R already and ones we have to download from other R programmers. Lets look at the function head() as an example. This is a function that is already built into R which means we dont need to do anything to use it. For functions that are written by other R programmers well need to download those functions and tell R we want to use it - and well show how in a bit. The way to identify a function is through the parentheses after the function name (the naming convention is the same as for objects as discussed in the previous section. We want a short, descriptive name that explains what the function does.). If we see a word followed by parentheses, we can be confident that were looking at a function. The head() function prints out the first 6 rows of every column of a data.frame (which is essentially an Excel sheet, and something well cover in more detail on the chapter on different R objects in Chapter @ref(#data_types)). head() is an extremely useful and common function in R, but just the name alone doesnt make it clear what it does or that we need to put a data object inside the parentheses. If you are having trouble understanding what a function does or how to use it, you can ask R for help and it will open up a page explaining what the function does, what options it has, and examples of how to use it. To do so we write help(function) or ?function in the console and it will open up that functions help page. If we wrote help(head) to figure out what the head() function does, it will open up this page. For finding the help page of a function the parentheses (e.g.Â head()) are optional. Unfortunately, many help pages are not that useful. The image below shows the help page for head() and it is not very friendly to a new R programmer. In cases where the help page is not useful, and youre looking at functions not covered in this book, I recommend looking online for help pages dedicated to that function or broader programming sites such as Stack Overflow where people can ask questions about programming. For head() all we need to do is tell the function what data were looking at. In programming terms, the input to the function (what we have to include in the parentheses) is the name of our data object. Well look at the very commonly used data called mtcars. mtcars is one in a small number of data files that are already in R when you open it. These are included in R just as examples of data to use when testing our code or teaching people to use R. Just type mtcars into the console and it will print out the file info; theres nothing you need to do to load the data into R. mtcars has info about a number of cars with each row being a type of car and each column being data about the car such as the miles per gallon it gets and how many gears it has. Well use the head() function to print out just the first 6 rows of the mtcars data. head(mtcars) #&gt; mpg cyl disp hp drat wt qsec vs #&gt; Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 #&gt; Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 #&gt; Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 #&gt; Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 #&gt; Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 #&gt; Valiant 18.1 6 225 105 2.76 3.460 20.22 1 #&gt; am gear carb #&gt; Mazda RX4 1 4 4 #&gt; Mazda RX4 Wag 1 4 4 #&gt; Datsun 710 1 4 1 #&gt; Hornet 4 Drive 0 3 1 #&gt; Hornet Sportabout 0 3 2 #&gt; Valiant 0 3 1 Now we have the first 6 rows of every column from the mtcars data. This is a fairly simple function and is useful for quickly looking at our data. Many functions are more complicated that head() and involve multiple inputs rather than just the single input we had here. Some functions, for example, let you choose how you want the function to operate, as it can do so in multiple ways. Even in head() theres an optional input to choose how many rows you want it to return, with the default being 6. Since we didnt choose anything, the function stuck to the default and returned only 6 rows. Throughout this book well spend a lot of time introducing functions that other people have made and learning how to combine the functions together to be able to get our raw data (e.g.Â a CSV file downloaded from a police site) into a usable format for research (e.g.Â cleaned to include only the rows and columns we need to analyze). For functions that other people wrote (i.e.Â functions built into R) we need to tell R that we want to use these functions. We do so by having R download that persons package. A package is just the name for a collection of functions in an easily downloadable format. We can do all of the downloading through R, so we dont have to go searching for them. There are two ways to download a package in R: through writing R code or through a shortcut in RStudio. Downloading a package through R code uses - like pretty much everything else in R - a function. This function is install.packages() where we put the name of the package we want in the (). This name also has to be in quotes since it is an object that is not currently in R. Lets install the package meditations which is a simple package I made that gives a random quote from the book Meditations by Marcus Aurelius. We need to run the code install.packages(\"meditations\") and be sure to spell meditations right and put it in quotes. install.packages(&quot;meditations&quot;) #&gt; Warning: package &#39;meditations&#39; is in use and will not be #&gt; installed The RStudio shortcut way is to go to the Packages tab and then click Install on the top left of this tab. This will open up a window as shown below where you can enter the name of the package you want. Then click Install and RStudio will install it for you. Also in this tab is the Update button which allows you to update packages that you have already installed. Since R programmers generally provide updates to their packages (usually bug fixes but occasionally new features and new functions), its important to update your packages every several months or so. Once we have downloaded the package we need to tell R that we want to use that package. There are thousands of R packages and youll likely have hundreds downloaded before long (if a package relies on other packages to work itll download those too. So even if you install a single package it may also install other packages necessary for the package you want). Some packages have functions with the same name (but they do different things) so using all packages at once will cause issues since we wont know which functions were actually using. So we only want to use the packages we need for that task. So we need a way to tell R that we want to use a package. We only need to do this once per session - that is, once before restarting R. The way to do this in R is to use the function library() where we put the package name in the parentheses. Since the package is something that has been install to R, we dont need to quotes around the name. library(meditations) Now we can run the meditations() function and get a random Marcus Aurelius quote (its just a coincident that the function name is the same as the package name). meditations() #&gt; [1] &quot;If any man has done wrong, the harm is his own. But perhaps he has not done wrong.&quot; 3.4 Reading data into R For many research projects youll have data produced by some outside group (e.g.Â FBI, local police agencies) and you want to take that data and put it inside R to work on it. We call that reading data into R. R is capable of reading a number of different formats of data which we will discuss in more detail in Chapter 10. Here, we will talk about the standard R data file only. 3.4.1 Loading data As we learned above in Section 3.1.2, we need to set our working directory to the folder where the data is. For my own setup, R is already defaulted to the folder with this data so I do not need to set a working directory. For those following along on your own computer, make sure to set your working directory now. The load() function lets us load data already in the R format. These files will end in the extension .rda or sometimes .Rda or .RData. Since we are telling R to load a specific file, we need to have that file name in quotes and include the file extension .rda. With R data, the object inside the data already has a name so we dont need to assign (something we will discuss in detail in Section 3.2) a name to the data. With other forms of data such as .csv files we will need to do that as well see in Chapter 10. load(&quot;data/ucr2017.rda&quot;) 3.5 First steps to exploring data The object we loaded is called ucr2017. Well explore this data more thoroughly in the Chapter 12 but for now lets use four simple (and important) functions to get a sense of what the data holds. For each of these functions write the name of the data set (without quotes since we dont need quotes for an object already made in R) inside the (). head() summary() plot() View() Note that the first three functions are lowercase while View() is capitalized. That is simply because older functions in R were often capitalized while newer ones use all lowercase letters. R is case sensitive so using view() will not work. The head() function prints the first 6 rows of each column of the data to the console. This is useful to get a quick glance at the data but has some important drawbacks. When using data with a large number of columns it can be quickly overwhelming by printing too much. There may also be differences in the first 6 rows with other rows. For example, if the rows are ordered chronologically (as is the case with most crime data) the first 6 rows will be the most recent. If data collection methods or the quality of collection changed over time, these 6 rows wont be representative of the data. head(ucr2017) #&gt; ori year agency_name state population #&gt; 1 AK00101 2017 anchorage alaska 296188 #&gt; 2 AK00102 2017 fairbanks alaska 32937 #&gt; 3 AK00103 2017 juneau alaska 32344 #&gt; 4 AK00104 2017 ketchikan alaska 8230 #&gt; 5 AK00105 2017 kodiak alaska 6198 #&gt; 6 AK00106 2017 nome alaska 3829 #&gt; actual_murder actual_rape_total actual_robbery_total #&gt; 1 27 391 778 #&gt; 2 10 24 40 #&gt; 3 1 50 46 #&gt; 4 1 19 0 #&gt; 5 0 15 4 #&gt; 6 0 7 0 #&gt; actual_assault_aggravated #&gt; 1 2368 #&gt; 2 131 #&gt; 3 206 #&gt; 4 14 #&gt; 5 41 #&gt; 6 52 The summary() function gives a six number summary of each numeric or Date column in the data. For other types of data, such as character types (which are just columns with words rather than numbers or dates), itll say what type of data it is. The six values it returns for numeric and Date columns are The minimum value The value at the 1st quartile The median value The mean value The value at the 3rd quartile The max value In cases where there are NAs, it will say how many NAs there are. An NA value is a missing value. Think of it like an empty cell in an Excel file. NA values will cause issues when doing math such as finding the mean of a column as R doesnt know how to handle a NA value in these situations. Well learn how to deal with this later. summary(ucr2017) #&gt; ori year agency_name #&gt; Length:15764 Min. :2017 Length:15764 #&gt; Class :character 1st Qu.:2017 Class :character #&gt; Mode :character Median :2017 Mode :character #&gt; Mean :2017 #&gt; 3rd Qu.:2017 #&gt; Max. :2017 #&gt; state population actual_murder #&gt; Length:15764 Min. : 0 Min. : 0.000 #&gt; Class :character 1st Qu.: 914 1st Qu.: 0.000 #&gt; Mode :character Median : 4460 Median : 0.000 #&gt; Mean : 19872 Mean : 1.069 #&gt; 3rd Qu.: 15390 3rd Qu.: 0.000 #&gt; Max. :8616333 Max. :653.000 #&gt; actual_rape_total actual_robbery_total #&gt; Min. : -2.000 Min. : -1.00 #&gt; 1st Qu.: 0.000 1st Qu.: 0.00 #&gt; Median : 1.000 Median : 0.00 #&gt; Mean : 8.262 Mean : 19.85 #&gt; 3rd Qu.: 5.000 3rd Qu.: 4.00 #&gt; Max. :2455.000 Max. :13995.00 #&gt; actual_assault_aggravated #&gt; Min. : -1.00 #&gt; 1st Qu.: 1.00 #&gt; Median : 5.00 #&gt; Mean : 49.98 #&gt; 3rd Qu.: 21.00 #&gt; Max. :29771.00 The plot() function allows us to graph our data. For criminology research we generally want to make scatterplots to show the relationship between two numeric variables, time-series graphs to see how a variable (or variables) change over time, or barplots comparing categorical variables. Here well make a scatterplot seeing the relationship between a citys number of murders and their number of aggravated assaults (assault with a weapon or that causes serious bodily injury). To do so we must specify which column is displayed on the x-axis and which one is displayed on the y-axis. In Section 11.3.1 well talk explicitly about how to select specific columns from our data. For now, all you need to know is to select a column you write the data set name followed by dollar sign $ followed by the column name. Do not include any quotations or spaces (technically spaces can be included but make it a bit harder to read and are against conventional style when writing R code so well exclude them). Inside of plot() we say that x = ucr2017$actual_murder so that column goes on the x-axis and y = ucr2017$actual_assault_aggravated so aggravated assault goes on the y-axis. And thats all it takes to make a simple graph. plot(x = ucr2017$actual_murder, y = ucr2017$actual_assault_aggravated) Finally, View() opens essentially an Excel file of the data set you put inside the (). This allows you to look at the data as if it were in Excel and is a good way to start to understand the data. View(ucr2017) "],["data_types.html", "4 Data types and structures 4.1 Data types 4.2 Data structures", " 4 Data types and structures 4.1 Data types When you read a sentence like two plus two you know the answer is four. R doesnt know that. This is because R takes things very literally. It will read two as a word, not as a number. For R to understand numbers you need to specify that youre talking about numbers, and not just words. Lets look at an example, making two variables which each have the value of 2. a &lt;- &quot;2&quot; b &lt;- &quot;2&quot; We now have a and b that are equal to 2 (in quotes!). Lets try to add them. a + b #&gt; Error in a + b: non-numeric argument to binary operator We get an error that is a technical way of saying that we did math on something that isnt a number. Thats because we made a and b get 2 with quotes around it, which R interpreted as a word, not as a number. If we change a and b to 2 (without quotes), then R will know that the 2 is a number, and will do math on it. a &lt;- 2 b &lt;- 2 a + b #&gt; [1] 4 This may seem like a pretty simple concept but is fundamental to how R works, and can trip up new and experienced programmers alike. R trusts you. It only knows what you tell it. If you tell it that something is a word (by including quotes), it will treat it as a word, even if it looks to you like a number. So we must be very precise about what code we write, as R wont (for the most part) fix our mistakes - though it will give us an error if we try to do something it doesnt like, like add two words. There are three main data types that are important to know for using R to do research: numeric, character, and logical. A numeric type is a number, and this includes both integers like 2 and decimals like 2.5. You can tell something is numeric if it is a number are there are no quotes around it. 2 is a number, 2 is a character. For real data this will likely be something like the age of an individual or the number of crimes in a city. We want it as numeric type because we can do math on numbers. For example, we can find the average age of victims of crimes, or the median number of crimes in a city each week. This wont work unless R knows that these values are numbers. A character is just a word or a set of words. If it is in quotes its a character. Other programming languages generally call this a string instead of a character, but they mean the same thing. Pretty much anything that youd write in English class fits in here. Finally, a logical data type is just a true or false value, though in R it must be written all in capital letters: TRUE or FALSE. This is also referred to as a Boolean value. Booleans or logical data are useful when comparing two things. For example, we can see if 2 is equal to 3. 2 == 3 #&gt; [1] FALSE Its not, so R returned FALSE (the == just compares the thing on the left to the thing on the right). This is very useful when we want to keep only certain rows in our data. For example, if we had data on multiple years of crime and we only wanted to keep a single year, we could tell R to keep only rows where the year equals that year - where it is TRUE that that rows year column is equal to what year we want. Well cover this is great detail in Chapter @ref(#subsetting-intro). While you could try to figure out what type of data something is just by looking at it, R has a number of functions to check for you. Well look at a few general functions that tell you the type of data something is, and then ones that check if the data is a specific type. First, the is() function tells you all of the types of data something is - and a value can actually have multiple types. While it cant be both, for example, numeric and character, it can have other data types that well look at in the next section. First, lets look at what is() returns (prints out to the console) for a few simple examples. is(2) #&gt; [1] &quot;numeric&quot; &quot;vector&quot; Checking what 2 is tells us that it is both a numeric type and a vector type. is(&quot;2&quot;) #&gt; [1] &quot;character&quot; &quot;vector&quot; #&gt; [3] &quot;data.frameRowLabels&quot; &quot;SuperClassMethod&quot; Checking 2 (in quotes), gives us four different types of data for this value: character, vector, data.frameRowLabels, and SuperClassMethod. You can ignore the last two types, we just are interested in that it is a character type and, like the type of 2, is a vector. is(TRUE) #&gt; [1] &quot;logical&quot; &quot;vector&quot; Finally, checking what TRUE is returns both logical and vector. We expected logical since TRUE is a logical type. Again, we see that it is also a vector type. TRUE has to be both in capital letters and not be in quotes. If we write it in quotes then R will think it is a character and if we dont have quotes R will think that it is an object (such as something we make using &lt;- and not a Boolean). is(&quot;TRUE&quot;) #&gt; [1] &quot;character&quot; &quot;vector&quot; #&gt; [3] &quot;data.frameRowLabels&quot; &quot;SuperClassMethod&quot; is(true) #&gt; Error in is(true): object &#39;true&#39; not found All three of the values we checked say that they are a vector type. Well cover vectors in the next section, but for now lets see one other function that tell us the type of data something is. If we use class() instead of is() well get just the first value returned in the types of data that we input. class(2) #&gt; [1] &quot;numeric&quot; class(&quot;2&quot;) #&gt; [1] &quot;character&quot; class(TRUE) #&gt; [1] &quot;logical&quot; In a lot of cases well want to check if some data is a specific type. For example, we might want to check that the year column of a dataset is numeric, rather than say character. We do this with three functions, each of which checks that the data input (the data put in the parentheses of the function) is that type of data or not. These functions are is.numeric(), is.character(), and is.logical(). Running any of these functions will actually return a logical value, either TRUE or FALSE telling us if that value inputted is that type. is.numeric(2) #&gt; [1] TRUE is.character(&quot;2&quot;) #&gt; [1] TRUE is.character(2) #&gt; [1] FALSE is.logical(TRUE) #&gt; [1] TRUE So far weve just been checking the value of a single thing: a single number, a single character/string, or a single Boolean value. In practice almost everything we do will be on a column of a data set. These functions still work in the exact same way. We input the column (using the data$column syntax discussed in Chapter @ref(#intro-to-r) to specify which data set we want and which column in that data set) and the function will behave just like it did above. Thats because each column can only be a single type of data; if the column is numeric, all values will be numeric; if the column is character, all values in that column are character; if the column is logical, every value in that column is also logical. Theres no confusion on columns have some values be, for example, numeric and others be character or logical. Lets use the UCR data from 2017 that was introduced in Chapter @ref(#intro-to-r). Remember that the data must be in your working directory to load it. And here I have data/ before the data name because the data is in a folder called data in my working directory. For more on working directories, please see Section 3.1.2. load(&quot;data/ucr2017.rda&quot;) We need to know the column names before using them, so we can use the names() function to get a list of all of the column names (the colnames() function does the same thing). names(ucr2017) #&gt; [1] &quot;ori&quot; #&gt; [2] &quot;year&quot; #&gt; [3] &quot;agency_name&quot; #&gt; [4] &quot;state&quot; #&gt; [5] &quot;population&quot; #&gt; [6] &quot;actual_murder&quot; #&gt; [7] &quot;actual_rape_total&quot; #&gt; [8] &quot;actual_robbery_total&quot; #&gt; [9] &quot;actual_assault_aggravated&quot; Now we can check the types of some of the columns. Lets check the year column as an example. A year is a number so we may expect it to be numeric but theres technically nothing stopping that data from being character type. It cant be logical type because then instead of a year value itd just be TRUE or FALSE, which is certainly not what a year is. is(ucr2017$year) #&gt; [1] &quot;numeric&quot; &quot;vector&quot; And we can use is.numeric() as another way to see if this column is numeric. is.numeric(ucr2017$year) #&gt; [1] TRUE 4.2 Data structures Well look in detail about two important data structures - vectors and data.frames - and then talk briefly about two other structures that are not that important in this book, but are nonetheless good to know that they exist. So far weve just been looking at either a single value, such as a &lt;- 1 or more complicated structures such as the ucr2017 which is called a data.frame - Rs version of an Excel file. Data structures each operate a little differently from each other so its good understand what they are and how they work. Well cover much more of how they work in Chapter @ref(#subsetting-intro) which covers how to subset data - which is just how to keep only certain values (such as specific rows or columns) in the data. 4.2.1 Vectors (collections of things) The first data structure well discuss is a vector. A vector is a collection of same type (numeric, character, logical) values in a single object. When we made a in Chapter @ref(#intro-to-r), we assigned it only a single value, such as a &lt;- 1. Usually well want to have a group of values - such as a set of years or a group of crime types - rather than just a single value. We can do this by using the same assignment method as a &lt;- 1 but put all of the values we want to assign to a into the function c() and separate each value by a comma. The c() function combines each value together into a single vector. Now, technically a single value, such as a which now equals 1, is still a vector. In this case itd be a vector of length 1, since there is only one value in it. But when we generally talk about vectors there are multiple elements in it. Heres an example of making the object a be a vector with three values: 1, 2, and 3 (in that order). a &lt;- c(1, 2, 3) It is absolutely crucial to have the c() function, otherwise wed get an error from R. a &lt;- (1, 2, 3) #&gt; Error: &lt;text&gt;:1:8: unexpected &#39;,&#39; #&gt; 1: a &lt;- (1, #&gt; ^ It is likewise crucial to have a comma separating every single separate value. a &lt;- c(1 2 3) #&gt; Error: &lt;text&gt;:1:10: unexpected numeric constant #&gt; 1: a &lt;- c(1 2 #&gt; ^ The terminology for talking about values in a vector is that each value is called an element and we identify them by the number they are, in order from start to finish. So here we have 1, 2, and 3, and we can say that the first element is 1, the second element is 2, the third element is 3. If we assigned a to b (b &lt;- a) we dont need to use the c() again. a is already a vector so if we assign its value to something, that carries over the vector. The c() is only necessary when first creating the vector. Note that vectors take values that are the same type, so all values included must be the same type such as a number or a string (a character type such as words or values with letters. In R they are put in quotes.). If they arent the same type R will automatically convert it. c(&quot;cat&quot;, &quot;dog&quot;, 2) #&gt; [1] &quot;cat&quot; &quot;dog&quot; &quot;2&quot; Above we made a vector with the values cat, dog and 2 (without quotes) and it added quotes to the 2. Since everything must be the same type, R automatically converted the 2 to a string of 2. 4.2.2 Data.frames Nearly everything you do in this book and in research will be through data.frames. A data.frame is basically Rs version of an Excel file. More precisely, a data.frame is a collection of equal-length vectors. Each column in a data.frame is actually a vector. They must all be equal length so every column has the same number of values. You cant have, for example, a data.frame with 10 rows of data for the city and only 8 for the year. It must be 10 for each. Since vectors can only be a single type, each column in a data.frame must be the same type, though different columns can be different types. This is how we can have, for example, our ucr2017 data.frame which has both numeric and character type columns. In this book Ill refer data.frames by keeping it all lower case and with a dot between the words. This is just because the function to make one is data.frame() and writing it this way is the normal convention. But writing it as a data frame is also fine. In nearly all cases well be using data that is loaded into R and is already in the structure of a data.frame (usually these will be Excel files or R data files like an .Rda or .Rds file). If we wanted to create out own data.frame we would use the data.frame() function and the input would be vectors which will become our columns. Lets make a simple one. If the vector is already created then R would automatically take the name of that object as the column name, otherwise we could name it ourselves example &lt;- data.frame(column_1 = c(1, 3, 5, 7, 9), column2 = c(&quot;hello&quot;, &quot;darkness&quot;, &quot;my&quot;, &quot;old&quot;, &quot;friend&quot;)) example #&gt; column_1 column2 #&gt; 1 1 hello #&gt; 2 3 darkness #&gt; 3 5 my #&gt; 4 7 old #&gt; 5 9 friend Now we have a new data.frame called example which has two columns and five rows. I named the column myself and in this case we dont need to put the column name in quotes, though doing so would give the same result. Here were saying that the column column_1 is equal to the vector c(1, 3, 5, 7, 9) and column_2 is equal to the vector c(\"hello\", \"darkness\", \"my\", \"old\", \"friend\"). Were essentially creating an object inside of the data.frame() function but in this case we need to use the equal sign and not the &lt;- because R doesnt allow the use of &lt;- inside of a function. If we forget to name the columns, and our vectors arent already created with their own name, R will create a name based on the values in that vector. As shown below, this looks really bad so make sure to always name your columns. example &lt;- data.frame(c(1, 3, 5, 7, 9), c(&quot;hello&quot;, &quot;darkness&quot;, &quot;my&quot;, &quot;old&quot;, &quot;friend&quot;)) example #&gt; c.1..3..5..7..9. #&gt; 1 1 #&gt; 2 3 #&gt; 3 5 #&gt; 4 7 #&gt; 5 9 #&gt; c..hello....darkness....my....old....friend.. #&gt; 1 hello #&gt; 2 darkness #&gt; 3 my #&gt; 4 old #&gt; 5 friend If the vectors are already made then we wont have an issue. R will default to the vector name but we can override that if we want. column_1 = c(1, 3, 5, 7, 9) column2 = c(&quot;hello&quot;, &quot;darkness&quot;, &quot;my&quot;, &quot;old&quot;, &quot;friend&quot;) example &lt;- data.frame(column_1, overridden_name = column2) example #&gt; column_1 overridden_name #&gt; 1 1 hello #&gt; 2 3 darkness #&gt; 3 5 my #&gt; 4 7 old #&gt; 5 9 friend As with other objects, we can use the is() function to see what type it is. If we use is() on our example object itll tell us that it is a data.frame. is(example) #&gt; [1] &quot;data.frame&quot; &quot;list&quot; &quot;oldClass&quot; &quot;vector&quot; We also often will want to know how many columns and rows as data.frame has. For finding the number of rows we use the function nrow() and for finding the number of columns well use the ncol() column.2 In each the n part of the function just stands for number. So nrow() is number of rows. For each we put our data.frame object in the parentheses (without quotes since it is something already loaded in R, so R knows it exists as an object) and it will return the number of rows/columns. nrow(example) #&gt; [1] 5 ncol(example) #&gt; [1] 2 Alternatively, we could have looked in the Environment tab which shows us the number of rows and columns of each data.frame that is loaded to R. For example, ucr2017 says it has 15764 obs. of 9 variables. This just means there are 15,764 rows and 9 variables. A variable in this context is just another way to say a column. However, youll occasionally want to have the exact number of rows and columns and as youll often delete certain rows and columns from your data this can change throughout your code so being able to use nrow() and ncol() is easier than repeatedly checking the Environment tab. You may encounter something called a data.table or a tibble. These are two popular variations of data.frames that operate much the same way as data.frames but with some different features. 4.2.3 Other data structures There are a two other data structures that Ill mention only so you have heard of them and can look up more information on them if youd like. However, these are not that important to know about for the purpose of this book, which is specifically on being able to conduct research in criminology using R. Some of these structures may come up in rare cases when youre programming, so its important to know that they exist. The first data structure is a list. A list is essentially a vector but where different values can be different types. Lists are actually very powerful data structures and ones that youll encounter a lot when using R, but are almost entirely on the backed of R so not things youll actually deal with much. For example, all data.frames are actually lists. And more specifically, they are a list of vectors. Lists can come in handy because they can store different types of data structures. A single list can, for example, have a number, a vector, a matrix (discussed below), and an entire data.frame inside. Lists can even have other lists inside of them. Lets look at an example of this. list_example &lt;- list(&quot;hello&quot;, 1:5, 6:10, list(c(33, 66, 99)), head(mtcars)) head(list_example) #&gt; [[1]] #&gt; [1] &quot;hello&quot; #&gt; #&gt; [[2]] #&gt; [1] 1 2 3 4 5 #&gt; #&gt; [[3]] #&gt; [1] 6 7 8 9 10 #&gt; #&gt; [[4]] #&gt; [[4]][[1]] #&gt; [1] 33 66 99 #&gt; #&gt; #&gt; [[5]] #&gt; mpg cyl disp hp drat wt qsec vs #&gt; Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 #&gt; Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 #&gt; Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 #&gt; Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 #&gt; Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 #&gt; Valiant 18.1 6 225 105 2.76 3.460 20.22 1 #&gt; am gear carb #&gt; Mazda RX4 1 4 4 #&gt; Mazda RX4 Wag 1 4 4 #&gt; Datsun 710 1 4 1 #&gt; Hornet 4 Drive 0 3 1 #&gt; Hornet Sportabout 0 3 2 #&gt; Valiant 0 3 1 The list that I called list_example contains six different elements in it: a character, two numeric vectors, a list of a numeric vector, and the first six rows of the mtcars data.frame. Lists can be useful when storing many different objects at once, but as they are not used too often for research-related programming Ill say no more of them. The other type of data structure is a matrix. A matrix is a two-dimensional object where every value is the same type. Think of a data.frame but each column has to be the same type. Below is an example of a matrix, I just made a simple one with values 1 through 50 and made there be five columns and five rows. Every value here is a number. matrix(1:50, nrow = 5, ncol = 5) #&gt; [,1] [,2] [,3] [,4] [,5] #&gt; [1,] 1 6 11 16 21 #&gt; [2,] 2 7 12 17 22 #&gt; [3,] 3 8 13 18 23 #&gt; [4,] 4 9 14 19 24 #&gt; [5,] 5 10 15 20 25 If I change it to have the first value be 1 (in quotes so it is a character) and the others be the numbers 2 through 50, the matrix will automatically convert everything to a character type. So it will remain having everything be the same type, but now nothing is a number. matrix(c(&quot;1&quot;, 2:50), nrow = 5, ncol = 5) #&gt; [,1] [,2] [,3] [,4] [,5] #&gt; [1,] &quot;1&quot; &quot;6&quot; &quot;11&quot; &quot;16&quot; &quot;21&quot; #&gt; [2,] &quot;2&quot; &quot;7&quot; &quot;12&quot; &quot;17&quot; &quot;22&quot; #&gt; [3,] &quot;3&quot; &quot;8&quot; &quot;13&quot; &quot;18&quot; &quot;23&quot; #&gt; [4,] &quot;4&quot; &quot;9&quot; &quot;14&quot; &quot;19&quot; &quot;24&quot; #&gt; [5,] &quot;5&quot; &quot;10&quot; &quot;15&quot; &quot;20&quot; &quot;25&quot; We could also use the dim() function which tells the dimensions of the data.frame - so how many rows and columns it has. This function returns a vector showing first the number of rows and then the number of columns. But I find it easier to simply ask for the number of rows or columns separately, and to not deal with the result which has two values. "],["mise-en-place.html", "5 Mise en place 5.1 Starting with a pencil and paper 5.2 R Projects 5.3 Modular R scripts 5.4 Modular code", " 5 Mise en place If youre familiar with cooking you might have heard the phrase mise en place which is French for everything in its place. In cooking this concept means that you get everything - ingredients, pots, pans, bowls, utensils, etc. - needed to cook that item ready before you begin cooking. This saves time as you have everything you need in front of you and can just cook from start to finish without stopping to find something. This is also a useful idea in programming, especially when youre programming to conduct research. In this chapter, well cover how to get mise en place for your programming projects. First, well discuss how to think about the project and write out each step that we need to take to complete the project, and each output that we want (such as a graph or table). Well write this out by hand and in plain English (or whichever language you are most comfortable in), before writing any code. Finally, well go over what is, in my opinion, the best way to organize your folders, data, and code. This method is particularly suited for research projects, so please feel free to modify my methods to suit your own needs and preferences. 5.1 Starting with a pencil and paper This may seem counter-intuitive, but the best way to start any programming project - and in particular, research project - is to use a pencil and paper. On this paper you should outline every step (broadly speaking, not literally every line of code) that youll take for the project. This is a useful process at the start of a project to step back from the code and think about the overarching goal of the project - and what you need to do to get there. For example, lets think about doing research using data from the US Border Patrol data (Well actually work on this data in Chapter 23. We want to see if a policy change affected apprehensions at the border. On the data side, thatd require scraping and cleaning the PDFs. On the analysis side, wed probably want to do a time-series graph showing apprehensions over time, and run a regression to see if the policy had a significant effect. So here we have four broad categories of work (scraping, cleaning, graphing, running a regression) for a fairly simple policy evaluation. Within each category you can make a number of subcategories. For example, in scraping you might want to add download the PDFs, see how each table relates to each other, figure out which parts of the tables are actually relevant, etc. We can probably break down these subcategories even further if we want. You essentially want to build a roadmap to follow - you can, of course, deviate from this roadmap if necessary - as you work on the project. This is useful for two reasons. First, writing out what you need to do will often clarify exactly what you need to do. Knowing that youll want a time-series graph, for example, will mean that you need to have your data aggregated into a certain time unit. Knowing this before-hand will save you time as youll have a tangible goal to work towards and dont have to keep stopping during your work to figure out what to do next. And second, from my experience helping people at Penn with R, people - especially new programmers (and myself when I was first starting learning R, my first programming language) - can get overwhelmed with programming. One major problem they had is they couldnt articulate what they needed to do since they werent familiar enough with R to know the right words. They knew the end goal, and what they had at the start, but couldnt articulate the path from start to finish. Writing out each step in plain language allowed them to know the path - it is simpler to know what steps you need to do to complete a project in plain language than to actually write the code (though this still requires experience to tell you a lot of the minor intermediate steps). Having a game plan helps people avoid being overwhelmed since they could do one step at a time (and feel accomplished at each step). 5.1.1 Tables and graphs One of the biggest challenges I had early in my PhD was figuring out what data was supposed to look like. I mean that literally. My first research project was analyzing if monthly crime in school buildings changed after a new policy was instituted that increased building security. The data I had available was incident-level so one row for every crime at the school, and I needed to convert it to the building-month level. The code for this is just to run aggregate() on the incident-level data and aggregate the data to building-month units. For some reason I just couldnt think of the proper way for my data to appear in the final data set which prevented me from figuring out what I needed to do. One solution to this - and useful even if you dont have this problem - is to draw out the graphs and tables you want before starting the code. Like writing out the steps for the code, drawing the graph will help you understand exactly how your data needs to look - and thus what code you need to write - for these graphs. Below are two images from a recent project of mine with the tables and graphs that I wanted sketched out. Note that in the image showing my graphs I have crossed out the first graph. These sketches are just preliminary tools to help your work, you arent chained to them. Like any tool, if it is no longer relevant or useful, find something new. For regression result tables especially, sketching these out help you think about what variables you will need to have to run the regression. For example, you may want to have control variables for demographics in your geographic unit (say, for the US Census). If we continue our example of using the US Border Patrol data, this means that youll also need to grab, clean, and merge Census data to your other datasets. Sketching out the resulting tables and graphs is a good tool to figure out steps that youll need to do for the project but may have not thought of. 5.2 R Projects Weve talked about projects in an abstract sense - that they are research papers or specific data exploration jobs. RStudio provides, a bit confusingly, something called an R Project which is merely a helpful way to organize folders for a specific project (paper, data exploration, etc.) that you do. When you do a project, I recommend keeping everything for that project in a single folder on your computer. Below is an image showing all of the folders I use for my various R work. As you can see from the file names, each folder is for a separate project, and there is not overlap between them - each project is independent. Within each folder is a structured way to organize the folders and files that I believe is one of the best ways to organize data for research projects. First, well explain how to set up an R Project through R Studio, and why you would want to do it. There are two main reasons to want to use an R Project. First, throughout this book I had you set your working directory so that R knew where to look for a particular file. In R Projects, by default the working directory is in that projects folder. So if you had a file example.csv in your project folder, you wouldnt need to set a working directory since R would already be looking that. This may be a minor time-saving method if youre working alone since youd only need to set the working directory once when not using an R Project. But consider if youre collaborating with three people and youve shared your code. When using an R Project, it just runs. There is no figuring out what the issue is - and determining what the issue is will take them longer than setting the working directory itself. Second, it provides easy access to using the version control software Git, which well talk about in detail in Chapter 9. To make an R Project, start by clicking the File button on the top left corner of RStudio and then click New Project. This will open up a window that has three options: New Directory, Existing Directory, and Version Control. New Directory says that the project we are making is going to be in a brand new folder that were (R will do this automatically) going to create. This is the one youll click on in the majority of cases. Existing Directory is for making a folder in an existing folder, which doesnt have too many useful cases. The Version Control is taking a project that someone else has created and downloading it to your computer. Well cover this more in Chapter 9. Once youve clicked New Directory, itll change the window to ask you what type of project you want. The below two figures show all the different types of projects R can make (installing some R packages such as bookdown can add more types of projects to this list). R is very versatile and has project types ranging from the standard R Project to books and websites. We just want a standard project so click the New Project button at the top. Now itll have a window that says Create New Project up top. In the Directory name: section you write the name of your R Project. Keep this short and (though not required) follow normal R naming conventions such as all lowercase letters and underscores separating words. This will be the name of your folder so you want it descriptive enough to understand (and for collaborators to understand) what it is for, without being overly long. Once you have a name you can click the Browse button on the right and go to the folder on your computer where you want to put this folder (ideally, youll put it in a folder which is backed up by something like Dropbox). Make sure the Create a git repository checkbox is selected, and well explain why in Chapter 9. Click Create Project and R will make the project folder on your computer and open that project in RStudio. Below are images of a brand new R Project that I made called example that I put in my Desktop folder. The folder is now empty except for two files - .gitignore (which we wont talk about here) and example which is type R Project (and the full name would be example.Rproj). This is a very important file. Note that its name is the same as the R Project name that I made, and the same as the folder name on my computer. This file is essentially a shortcut that you click to open that R Project. It doesnt do anything more than open the R Project but this is the way youll access the project every time you want to use it. Double-click this and the Project will open. This RStudio session looks nearly identical to other sessions that weve used - and it nearly is identical. A few key differences can be found in the top left corner where it says example - RStudio, indicating that were in the example R Project. And then directly below the Console tab it says C:/Users/user/Desktop/example/. This is the working directory of this project. I didnt set it, R just knew where it was. If you move this folder to a new folder (say, the Downloads folder) or if someone else downloads it to their computer, R will automatically change the working directory to the right one. You no longer have to worry about it. 5.2.1 Folders Now that we have the R Project made, we need to start adding some R code and data files to the project so we can get started working. But first, lets talk about proper ways to organize the folder. Ive added a few new folders to the new example R Project as the basic layout of my work process. This is for a research-oriented project so may not apply in your particular case. Organizing your folders (and as well see below, your code) is important so please play around with different ways to organize and find a way that works well for you. Ive added five folders to the R Project folder: analysis, articles, data, drafts, and R (note that I moved it to the Downloads folder, and if I opened the project RStudio would know where the new working directory was). I tend to do my analysis using Stata (primarily because most of my co-authors use Stata instead of R so this is a way we can both work on the analysis) so in this folder Id keep all of the .do (Stata) files to run the regressions. In articles, I put PDFs of every article I read that I use (or planned to use while reading it) for the paper Im working on in this project. Its good to keep this organized to share with co-authors or just for easy reference after youve read it. It certainly takes time to find good sources for a lot of research, so you dont want to have to search again because youve forgotten which article you had a particular reference from or that was important to your study. While I recommend writing your papers in R Markdown (see Chapter 7), you will need to create drafts of the paper to send to others (e.g.Â your collaborators or journals). The drafts folder is a good place to keep these versions - some journals require that you submit a Word Document with track-changes for a revise and resubmit so you will need to leave R Markdown occasionally to comply with these rules. The final two important folders are R and data. In the R folder - as you may have guessed - belong the various R scripts that you write during the project. In Section 5.3, well talk in detail as to how to organize these scripts. Inside the data folder I made two subfolders: raw and clean. The raw folder is where youll store the data exactly as you got it (for cases where the data is acquired through webscraping, this isnt necessary). This folder will have, for example, the PDFs that you intend to scrape, and the .csv files downloaded from a different source. It is important to keep this data always unchanged (change only in your R code and save the output to a new file) so you can replicate your results from the original data. In the clean data is that final data output from your work to clean and manipulate (e.g.Â subset, aggregate) the data. It isnt strictly necessary to even output a final dataset - you could just rerun your code from the original data each time, and this is fine if your code is very quick to run - but I think it is important both for safekeeping and to be able to share with others. If you collaborate with people, youll want to be able to send them the data so they can examine it without having to run all of your code themselves. 5.3 Modular R scripts If you are like many people who start programming, all of your code will be in a single R script. This is fine when youre first getting familiar with R and dont want to go searching for code in places when youre still uncomfortable with the language. As you become more familiar with R - and as your projects get more complex - youll want to start making multiple R scripts in a single project. When youre writing a paper you dont just write one extremely long sentence. You break up ideas into paragraphs and divide groups of paragraphs into larger sections. This is useful in a paper to organize your thoughts and to make it readable for others. Its also useful when working since you know, for example, Section 1 is done but I still need to finish Section 2 and the last of Section 3. This way you dont confront working on the entire paper at once. Youll want to follow these lessons in the code you write, with each section of code being its own R Script and within a script split up code into particular paragraphs. The end goal should be to have modular R scripts, with each script being independent (or relatively so) and the combination of these parts has all the code for your particular project. This is a bit of an abstract concept so lets use a real example from one of my recent projects. Above is a folder for the code used to analyze data for a paper examining perceptions of outdoor lighting. There are five R scripts in the folder - clean.R, census.R, tables.R, graphs.R, and utils.R - and these are the only ones used for this project.3. Each of these files (utils.R is an exception) has a particular role to play in the analysis of the data. The first file, clean.R is just code that cleans up the survey data and makes it ready to be analyzed and graphed. The census.R file has code that cleans Census data that my co-author and I use to compare our survey sample to the general public. As this is a separate dataset than the survey data, I have it in its own R script. tables.R and graphs.R are the code to make descriptive statistics tables and figures for the paper, respectively. While you could combine the code in these files into a single R script - and the code in each is not very long (shorter than the code in almost every chapter in this book) - it makes it harder to handle (much like reading an article with no space between the lines). I chose these files because they are doing fairly separate tasks, all with the goal of turning raw data into a research paper. This is an example of how I approach making R scripts, not necessarily the best way to do so. Even here, other decisions could be made. For example, I could have put the code from census.R into clean.R since theyre both about cleaning data (and maybe rename clean.R to something like clean_survey.R). While you should try to make separate R scripts for broadly different tasks (regardless of how much code that task requires), you should experiment with how you prefer to separate these scripts, and balance between having one (or a few) super scripts that comprise everything with having too many scripts that do too little - this balance requires experience and experimentation so keep at it! 5.4 Modular code In addition to having separate scripts for each major part of your project, you will want to organize each individual script into relatively modular parts. Whereas each script is like a book chapter, the code inside the script should be like paragraphs, separated into distinct chunks (similar to the chunks in an RMarkdown file). For example, lets say you have some raw data and want to subset it, change some values (e.g.Â renaming F to Female, M to Male), and then aggregate to a larger geographic area. This is a three-step process - subset, change, aggregate - so youll want to have three different parts of your R Script dedicated to this. Now, if this is a simple process (and it will always depend on the data and what you want to do with it), you may want to have each step in its own Section (as well discuss next). If its relatively simple and takes only a few lines per step, youll likely just want to have a line break between steps and identify your choices in comments. Its hard to give precise rules on how to do this as it really does depend on personal preference - I think having more comments and line breaks early in your experience is better as its a good foundation, and you can alter it to suit your preferences as you get more experience. The goal of making modular code is to avoid having a large amount of code without breaks or comments - thatd be like reading a run-on sentence. Well talk about comments more in Section 6.2.1, but here you should explain your choices (e.g.Â Subset to only violent crime and property crime) to inform collaborators (other people and yourself in the future who will likely forget what or why you did something), but without writing too much. Generally the rule of thumb is to have comments for why you did something, not explaining what as the what can be deduced from looking at the code. I think a mix of what and why is helpful as its quicker than looking at the code, especially if your code is complex. Like a lot of your work, however, this depends on the project and your audience - if youre working with someone new to R, having more comments explaining what you did is helpful. 5.4.1 Section Labels When you have major parts of a script, you should have something to indicate that this is a distinct section from other parts. RStudio has a handy tool to help make that distinction by creating Sections in your R Script. Press the keys Control+Shift+R (Command+Shift+R in a Mac) and it will open up a window where you can set a section label (note that this will only work in an R Script, not an RMarkdown file). Enter in the name of the section you want and click OK and itll add that to where your cursor was in the R Script. You can also do this by simply adding four dashes (-) on the end of a comment Sections are more than just commented parts of a Script. Note that in the photo below, there is both the Section label in the R Script and that same label in a new section of the Source tab on the right. You can get to this section by clicking on the button on the very top right, the one that looks like a bunch of misaligned lines. In here, it shows all the Sections that exist and clicking the Section name will move to the start of that Section in your R Script. If you have a long script (which is generally unadvised but sometimes cant be helped), this is an easy way to find a particular part of your code. 5.4.2 Helper R Scripts As part of making code organized, I find it helpful to make two R scripts in each (or most) of my projects to hold helper functions or objects - and I call these utils.R and utils_objects.R (utils stands for utility as these are helpful pieces of code for the project). These files should be for code that will be used in multiple R Scripts, so you want them in a single place rather than copying them over in each script where you need them. In utils.R, I keep functions that are either auxiliary (such as code to check data by printing out a set of outputs) or code that is used infrequently (such as loading several files and merging them together at the start of an R Script) where I dont want them in the main file. In utils_objects, I put useful objects such as a vector (c()) of values that I will use to subset. For example, if I wanted to subset all violent crimes from a dataset, I would need to know what crimes in that data are considered violent, put them as strings in a vector, and subset to only rows that match those strings. In utils_objects.R I could make an object with this vector, such as violent_crimes &lt;- c(\"murder\", \"rape\", \"robbery\", \"assault\"). If you want to run utils.R or utils_objects.R (or any .R file) in a different R script, you can use the source() function which makes R run the entire script inputted in the parentheses. Just put the file name (in quotes) in the parentheses and it will run. For example, if we want to run utils.R, wed write source(\"utils.R\"). If that file was in the data folder of our R Project, wed write source(\"data/utils.R\") so R knew to look in the data folder for the file. Analysis was done in Stata so there are separate files for that "],["collaboration.html", "6 Collaboration 6.1 Code review 6.2 Documentation", " 6 Collaboration 6.1 Code review When you collaborate with other people, you will probably each be working on a separate (though related) part of the project and then combine each parts when you are done. Combining your code could be through emailing each other R Scripts - and having one person combine everything - or something more formalized such as using Git, which we discuss in Chapter 9. However you decide to do this, it is important to use a process to review collaborators code to check for mistakes. This is a similar process to having a colleague read a paper draft before submitting it. Code review is a useful technique for reducing the number of mistakes as it is a check on the work before using the code for real. Code review generally involves having one person who writes the code send it to another person who checks the code for any potential mistakes or issues. This check involves ensuring that the code meets the specified style (this is discussed further in Section 6.1.1) and that there are no bugs. For the person having their code reviewed, having comments explaining the what and why of the code (discussed more in Section 6.2.1) will help the reviewer quickly go through the code. The code should also be relatively short, comprising of a specific R Script (or related scripts) and no more than a few hundred lines of code. This is because as code gets more interrelated and complex, it is harder for someone unfamiliar with the code to understand it and see any issues. That means that a reviewer for long code is more likely to miss issues and take longer to review. Reviewing shorter code, even if that means reviewing more often, is often far more efficient for both the reviewer and reviewee and catches more issues. In cases where you have unit tests written for the code, these tests are an automated form of code review as they too check for mistakes. To save peoples time, you should avoid sending the code for review until it passes all unit tests. However, if youre stuck and cant get certain tests to pass, working with someone else to solve the problem is often faster than doing so yourself because then you have an outside perspective who may see something you lost. For code review to be most efficient, I recommend developing some rules with your collaborators to specify how and when code review is done. For example, you should determine who reviews certain peoples code (ideally with senior people reviewing junior peoples code) and how often it is done. I believe that doing code reviews relatively frequently (i.e.Â after a working draft of some code is ready) is useful as you can catch issues early and not waste anyones (especially the personal writing the code) time. However, having hard time limits is probably ill-advised as sometimes writing certain code takes far longer than expected and reviewing an unfinished (and potentially far from finished) bunch of code is not efficient for anyone. When someone is reading a draft of your research paper, they are generally looking for whether it is correct (i.e.Â your methods are right, the lit review is thorough, etc.) and how well it flows. Code review is the same. While the primary goal is finding errors, an important aspect is to ensure that it is readable (i.e.Â proper spacing, how names are written) and consistent across everyones code in that group. More formally, ensuring that everyones code is readable and consistent is having people follow a style guideline. 6.1.1 Style guidelines An important part of reviewing peoples code is ensuring that everyone is following the same style guidelines when it comes to writing code. Style guidelines are the grammar rules of writing code. They dictate (or encourage) certain style choices such as whether object names are lowercase, whether they include punctuation, and even when to put long code on a new line. This is equivalent to making sure that people writing in plain language put punctuation and capitalization in the expected place. While you can read !SomEThiNg WrITen. LiKE thIs, it is easier to understand when you it follows adopted and accepted rules. The important thing here is to be consistent. Consistency makes code much easier to read and helps make code written by multiple people more interchangeable. This book follows the tidyverse style guide which is one that many R programmers follow, but the exact style you chose is relatively unimportant (choosing more common styles helps when your code may be used by people out of your organization). Feel free to adopt an already made style guide, make any modifications to suit your preferences, or to create an entirely new one yourself. As long as people follow the same format, youll be able to spend more time on the code, and less time trying to understand it. 6.2 Documentation An important, though occasionally tedious, part of writing code is documenting your work. Well talk about documentation in two ways, through comments which focus on specific parts of code, and vignettes which document the project more broadly. 6.2.1 Comments In Section 3.1 we introduced comments, which are essentially notes about the code that you include in an R script (by starting a line with the pound key #) that isnt run. They are just comments to yourself or anyone else reading the code to explain what that code does and why it is there. As is often repeated in explaining the benefit of comments, the main collaborator you will have is yourself in the future.4 You dont need to comment every single code - and doing so would just make it hard to read - but should comment on important things or chunks of code (i.e.Â several lines of code that all are for the same purpose). If you write a function, youll want at least a brief code explaining what it does and what the inputs and parameters do. Writing comments is not as fun as writing code. Stopping to write a comment on something that seems obvious at the time (after-all, you figured out how to do something you wanted to do and likely were focusing on) interrupts the flow of writing code and slows down your work. And when you have looming deadlines and multiple projects that youre working on, spending the time writing good comments may seem like a bad use of time as the payoff is only in the future. However, the benefits far outweigh the cost. This is true for two reasons. First, when youre collaborating with others, it is much quicker to have text explaining the code than to walk through the code with them (or to have them try to figure it out themselves).5 As you work with more people, comments become increasingly important. Writing good comments is also time-efficient when considering that in many cases when you do research you will have to return to a project in the future. This is best shown when considering a research project that leads to a journal article. For many papers, even if you are fantastically productive and can work nonstop at it without forgetting any decisions, at a certain point youll need to finish and submit it to a journal. Journal reviews can often take 3-6 months so at that point youll likely have forgotten many of the (seemingly) obvious decisions you made in the course of the project.6 Having comments explaining why you made a certain decision (such as including or excluding certain crime types from your analysis) can be a huge time saver when addressing reviewer concerns - you will know why each decision was made and wont have to try to figure out the why. This is particularly important when you have to defend a decision in which there is no obvious choice and you want to know your thought process at the time you wrote the code and were immersed in the issues of the data. A lot of data decisions are reasonable at the time based on the quirks of the data but can appear to make no sense if you arent familiar with the data - comments can remind you of the quirkiness and how you handled it. 6.2.2 Vignettes Vignettes are essentially a document that explains how to do something with the code you have written. This is common when someone has written an R package and they want to explain in detail important functions from the package. You can think of chapters of this book as vignettes covering particular topics - PDF scraping, webscraping, regular expressions, etc. To make a vignette, you can simply make an R Markdown file (for more information on R Markdown please see Chapter 7) detailing that topic. Since the text you write is included in the document, these files are basically normal R Scripts with extensive comments written in plain language. Often, these comments are more formal than what youd write in an R Script as they are written as complete sentences or paragraphs and walk through comprehensive ideas rather than focus on discrete chunks of code. One increasingly prominent method of using R for research is to do everything in an R Markdown file. This allows you to explain your approach - including context on why you did something - and each step you took in plain language in the text of the R Markdown file while still including the code directly in the file - and you can still include comments on that code in the code chunks. Whether you include the code in the output, or just the result of the code, depends on your audience and how far along you are in the project. If this is for a presentation to update collaborators, for example, it is useful to include the code as they may notice an issue or give advice based on the code. Including code can also teach your audience something new (Ive certainly learned a lot by watching people present using code I wasnt familiar with). If the document is for an audience unfamiliar with R (or programming more generally), or where time to present is limited, you probably wont want to include code. Whether you do work in an R Script or in an R Markdown file is up to you. If you intend to write up a report anyway, having everything written up in the R Markdown file as you write your code can save you time as youre merging the code and the writing process. However, this loses some nice features in R such as unit tests, which we discussed in detail in Chapter 8. It also depends on how complex your project is. If you have code that is hundreds of lines long and spans multiple R Scripts, putting it all into a single R Markdown file is unfeasible. In this case itd be better to run the code in the R Script and use the R Markdown file just to present results. I recently worked on a follow-up paper to one I had done a year ago. For some reason, past me decided to name some functions based on the authors of a paper that created that particular method, and didnt leave comments explaining what the code did or why. Past me caused a lot of problems for current me. Please comment your code! This is one of the main reasons I wrote this book. After a few years of helping Penn students with the same questions, I decided to write out guides to those topics. If youre like me and on your 7th rejection for a particular paper, 3-6 months may be optimistic. "],["r-markdown.html", "7 R Markdown 7.1 Code 7.2 Inline Code 7.3 Tables 7.4 Footnotes 7.5 Citation 7.6 Spell check 7.7 Making the output file", " 7 R Markdown When conducting research your end product is usually a Word Document or a PDF which reports on the research youve done, often including several graphs or tables. In many cases people do the data work in R, producing the graphs or numbers for the table, and then write up the results in Word or LaTeX. While this is a good system, there are significant drawbacks, mainly that if you change the graph or table you need to change it in R and change it in the report. If you only do this rarely it isnt much of a problem. However, doing so many times can increase both the amount of work and the likelihood of an error occurring from forgetting to change something or changing it incorrectly. We can avoid this issue by using R Markdown, Rs way of writing a document and incorporating R code within. This chapter will only briefly introduce R Markdown, for a comprehensive guide please see this excellent book. For a cheat sheet on R Markdown see here. What R Markdown does is let you type exactly as you would in Microsoft Word and insert the code to make the table or graph in the places you want it. If you change the code, the document will have the up-to-date result already, reducing your workload. There is some additional formatting you have to do when using R Markdown but it is minimal and is well-worth the return on the effort. This book, for example, was made entirely using R Markdown. I include this chapter early in the book - and likely before you are really comfortable with using R - since some new R programmers do like to do all of their work using this method. In my experience this is relatively rare, but I still wanted to make the info available for those that do. For new programmers I recommend reading this chapter so you understand R Markdown, but still use normal R scripts when writing code - dont use R Markdown for everything. Focus on learning how to write good code before adding the complexity of writing full documents using R Markdown. To open up a R Markdown file click File from the top menu, then New File, and then R Markdown From here itll open up a window where you select the title, author, and type of output. You can always change all three of these selections right in the R Markdown file after making your selection here. Selecting PDF may require you to download additional software to get it to output - some OS may already have the software installed. For a nice guide to using PDF with R Markdown, see here. When you click OK, it will open a new R Markdown file that is already populated with example text and code. You can delete this entirely or modify it as needed. When you output that file as a PDF it will look like the image below. R converted the file into a PDF, executing the code and using the formatting specified. In an R Script a # means that the line is a comment. In an R Markdown file, the # signifies that the line is a section header. There are 6 possible headers, made by combining the # together - a # is the largest header while ###### is the smallest header. As with comments, they must be at the beginning of a line. The word Knit was surrounded by two asterix * in the R Markdown file and became bold in the PDF because that is how R Markdown sets bolding - to make something italics using a single asterix like this. If youre interested in more advanced formatting please see the book or cheat sheet linked earlier. Other than the section headers, most of what you do in R Markdown is exactly the same as in Word. You can write text as you would normally and it will look exactly as you write it. 7.1 Code The reason R Markdown is so useful is because you can include code output in the file. In R Markdown we write code in what is called a code chunk. These are simply areas in the document which R knows it should evaluate as R code. You can see three of them in the example - at lines 8-9 setting a default for the code, lines 18-20 to run the summary() function on the cars data (a data set built into R), and lines 26-28 (and cut off in the screenshot) to make a plot of the data set pressure (another data set built into R). To make a chunk click Insert near the top right, then R. It will then make an empty code chunk where your cursor is. Notice the three ` at the top and bottom of the chunk. Dont touch these! They tell R that anything in it is a code chunk (i.e.Â that R should run the code). Inside the squiggly brackets {} are instructions about how the code is outputted. Here you can specify, among other things if the code will be outputted or just the output itself, captions for tables or graphs, and formatting for the output. Include all of these options after the r in the squiggly brackets. Multiple options must be separated by a comma (just like options in normal R functions). If you do not have the R Markdown file in the same folder as your data, youll need to set the working directory in a chunk before reading the data (you do so exactly like you would in an R Script). However, once a working directory is set, or the data is read in, it applies for all following chunks. You will also need to run any packages (using library()) to use them in a chunk. It is good form to set your working directory, load any data, and load any packages you need in the first chunk to make it easier to keep track of what youre using. 7.1.1 Hiding code in the output When youre making a report for a general audience you generally only want to keep the output (e.g.Â a graph or table), not the code you used. At early stages in writing the report or when youre collaborating with someone who wants to see you code, it is useful to include the code in the R Markdown output. If you look at the second code chunk in the screenshot (lines 18-20) it includes the function summary(cars) as the code and the options {r cars} (the cars simply names the code chunk cars for if you want to reference the chunk - or its output if a table or graph - later, but does not change the code chunks behavior). In the output it shows both the code it used and the output of the code. This is because by default a code chunk shows both. To set it to only show the output, we need to set the parameter echo to FALSE inside of the {}. In the third code chunk (lines 26-28), that parameter is set to false as it is {r pressure, echo=FALSE}. In the output it only shows the graph, not the code that was used. 7.2 Inline Code You can also include R code directly in the text of your document and it will return the output of that code. To use it, you simple need to setup an inline code chunk using the tick mark followed by the lowercase letter R, the code you want to use, and then end it using another tick mark. This is called using inline code. When you have a table or visualization to output, this isnt the proper method, it is best for small pieces of text to add to your document. This is most useful for when you want to include some descriptive info, such as the number of respondents to a survey or the mean of some variable, in the text of your document. Inline code will only present the output of the code and doesnt show the code itself. Below is an example of inline code - see the image below that for what it looks like with the code. The dataset mtcars has 32 rows and 11 columns. The mean of the mpg column is 20.090625. When rounded, the mean is 20. 7.3 Tables There are a number of packages that make nice tables in R Markdown. We will use the knitr package for this example. The easiest way to make a table in Markdown is to make a data.frame with all the data (and column names) you want and then show that data.frame (there are also packages that can make tables from regression output though that wont be covered in this lesson). For this example we will subset the mtcars data (which is included in R) to just the first 5 rows and columns. The kable function from the knitr package will then make a nice looking table. With kable you can add the caption directly in the kable() function. The option echo in our code chunk is not set to FALSE here so you can see the code. library(knitr) mtcars_small &lt;- mtcars[1:5, 1:5] kable(mtcars_small, caption = &quot;This is an example table caption&quot;) Table 7.1: This is an example table caption mpg cyl disp hp drat Mazda RX4 21.0 6 160 110 3.90 Mazda RX4 Wag 21.0 6 160 110 3.90 Datsun 710 22.8 4 108 93 3.85 Hornet 4 Drive 21.4 6 258 110 3.08 Hornet Sportabout 18.7 8 360 175 3.15 For another package to make very nice looking tables, see this guide to the kableExtra package. 7.4 Footnotes In your writing, youll often have sentences that you want to include but are auxiliary to your main point (or, frequently, to include links to specific resources such as a website where you got data from). In these cases youll want to include that info as a footnote, which is a section at the bottom of the page for this kind of information. To create a footnote in RMarkdown, you use the carrot ^ followed immediately by square brackets []. Put the text inside of the [] and itll print that at the bottom of the page. A footnote will look like this: ^[This sentence will be printed as a footnote]. In cases where you have a very long footnote it may extend to the next page and will be again at the bottom of the page. Look down at the bottom of this page to see the footnote (in a PDF or Word Doc, the footnote will be on the page you create it on, however since websites are just one long page without breaks, this footnote is at the very bottom of this entire page.7 When you use a footnote, youll usually put it immediately after the punctuation of the sentence it should be after. Note that footnotes are numbered so you can identify them. Theres a blue superscript 1 where we made the footnote so people reading know the context - i.e.Â which part of the text they relate to. If we make another footnote, itll be numbered sequentially, such that the next one is 2, the next is 3, etc. If youre familiar with LaTeX you can use LaTeX code such as \\footnote{} where the text goes inside the {}. But note that citations (which well learn in Section 7.5) wont work properly in the footnote if made this way. You can use LaTeX code - and use LaTeX packages - in RMarkdown if youd like and itll operate (in most cases) like normal LaTeX. 7.5 Citation In academic research you will need to cite the papers that you are referencing. RMarkdown has a built-in way to cite papers, though its a bit of a process to get everything setup. Youll need the citation data in BibTeX format and well walk through the steps from finding an article that you want to cite to citing it in your RMarkdown file. First, a brief overview of what kinds of citations you can use. There are two types of citations you can use, in-text and parenthetical. Youll use in-text citations when you want to have the author names be in the text, and parenthetical citations when you want everything to be in parentheses. Note, there may be other ways to get the citations in the right format; Im just showing you one way to do so. For this example, well use the article Using NIBRS data to analyze violent crime by Brian Reaves that was published in 1993. Well walk through the process from finding the article on Google Scholar to citing it in your paper. First, from Google Scholar well search for the article title. This returns all articles that meet your search criteria. Since were searching for a specific article title, we only get one result. The result shows some basic info about the article - title, date, name, abstract. Below the abstract are some important things. First, and circled in blue in the above photo, is a link that looks like quotation marks. This is what well click on to get to the BibTeX citation. While not necessary for citation, the next two links may come in handy during your research. Cited by 31 means that 31 published (in some format that Google can locate, not necessarily peer-reviewed articles) articles have cited this article. If you click the link itll open up a Google Scholar page with all of these articles. This is a good way to find relevant literature. Clicking Related articles does the same thing but with articles that Google Scholar deems similar, not necessarily articles linking to the one youre looking up. But back to the quotes link circled in blue. Click this and itll make a popup, shown below, of ways to cite this article is various formats. Well have RMarkdown automatically generate the citation in the format we want so we dont need to worry about this. Instead, click the BibTeX link at the bottom left. When you click it, itll open up a new page with that articles citation in BibTeX form, as shown below. This basically is just a way to tell a computer how to cite it properly. Each part of the citation - author, year, title, etc. - is its own piece. Take a close look at the section immediately after the first squiggly bracket, reaves1993using. This is how youll identify the article in RMarkdown so R knows which article to cite. Its essentially the citations name. Its created automatically by combining the author name (first author if there are more than one author, publication year, and part of the title). You can change it to whatever you want it to be called. Note at the end of the publisher section are the characters ~. This looks like a mistake made by Google Scholar so well need to delete that so it isnt included in a paper we use this citation in. When using Google Scholar, youll occasionally find issues like this which youll need to fix manually - a bigger issue is apostrophes or other punctuation may copy over from Google Scholar weird (meaning that it copies as a character that your computer, and thus RMarkdown, doesnt understand) and need to be rewritten so RMarkdown will run. You can rewrite it by just deleting the punctuation and typing it using your keyboard. This isnt always an issue so dont worry about it unless you get an error with the citations when outputting your document. Below is the citation included in my .bib file, and the start of another citation also included in the file. A .bib file is basically a text file that programs can read to get citation info. Youll have all of your citations (in the BibTeX format) in this one file. To make a .bib file you can open up a text document, such as through the Notepad app in Windows, and paste the BibTeX that youve copied from Google Scholar. Save this file as a .bib extension (by renaming it filename.bib) and youll have a usable .bib file. Note that I have the word NIBRS surrounded by squiggly brackets {}. That is because by default RMarkdown (and other citation generators such as Overleaf) will only capitalize the first letter of the title or the first letter following a colon. Since NIBRS is an abbreviation and should be capitalized, I put it in the {} to force it to remain capitalized. This is often a problem with abbreviations or country names (such as United States) in the paper title Ive also deleted the weird characters at the end of the publisher section. Since all citations you use for a project (I have a single .bib file that I use for projects since much of my work is on the same topic and the citations overlap across papers) are in one .bib file, you can see the start of another article cited below the Reaves citation. To use citations from your .bib file, add bibliography: references_file_name.bib to the head of your RMarkdown file. If your .bib file isnt in the RMarkdown files working directory, as my example below is not, youll need to include the path in the file name. Now that we have the citation in BibTeX format, put it in our .bib file, and told RMarkdown where to look for that file, we are ready to finally cite that article. To use a citation we simply put the @ sign in front of the citation name (in our case reaves1993using) so we would write @reaves1993using. This will give us an in-text citation, with the author name in the text and the year in parentheses. Adding a - right in front of the @ will cause the citation to show just the year, not the authors name. Youll usually want to use this if youre already named the author earlier in the sentence. Generally we will want parenthetical citations, with both the authors and the year in parentheses. To do this, we put the citation inside of square brackets like this [@reaves1993using]. If were citing multiple articles, we separate each citation using a semicolon [@reaves1993using; @jain2000recruitment]. Heres what the results look like when citing that Reaves article, see the photo below for what this looks like just as code. (Reaves 1993) Reaves (1993) (1993) (1993) (Reaves 1993; Jain, Singh, and Agocs 2000) If you use a citation that isnt in your .bib file, RMarkdown will present three question marks in place of the citation. (wrongCitation?) When you use citations, R will automatically put the reference at the very end of the document. Two LaTeX commands may be useful here. \\clearpage makes a new page so your reference section isnt on the same page as the conclusion. \\singlespace makes the reference section single spaced if you document is set to be double spaced. Put these commands at the very end of your document so they only apply to the reference page. You dont need to do anything other than write them (for easier reading, make them on separate lines) at the end of the RMarkdown file. If you want to make the references go in another part of the paper (e.g.Â after tables and figures), just put this code at the place in the paper where you want to reference section to go: &lt;div id=\"refs\"&gt;&lt;/div&gt;. 7.6 Spell check RMarkdown does have a built-in spell checker (the ABC above a check mark symbol to the left of the Knit button) but it isnt that great. I recommend that you export to Word (or open up the PDF in Word if you prefer using PDFs) and using Words superior spell checker. 7.7 Making the output file To create the Word or PDF output click Knit and it will create the output in the format set in the very top. To change this format click the white down-arrow directly to the right of Knit and it will drop-down a menu with output options. Click the option you want and it will output it in that format and change that to the new default. Sometimes it takes a while for it to output, so be patient. References "],["tests.html", "8 Testing your code 8.1 Why test your code? 8.2 Unit tests 8.3 Test-driven development (TDD)", " 8 Testing your code This chapter covers how to write code that tests other code. Its especially useful when you write complex functions but is also useful for work such as PDF scraping or webscraping where you know the right after (by looking at the PDF or webpage yourself) and want to be sure your scraping code did the scrape correctly. However, in most cases when programming for research you wont formally test you code - though you should be checking if everything makes sense and rereading your code to look out for errors (such as typos or using the wrong data). If youve never programmed before, I recommend that you skip this chapter entirely (or read it but dont feel pressure to understand everything or use the code example) and return to it after youve finished the rest of the book. 8.1 Why test your code? As you write code, you will inevitably make mistakes. There are two main types of mistakes with coding - those that prevent code from working (i.e.Â give you an error message and dont run the code) and those that run the code but give you the wrong result. Of these, the first is probably more frustrating as R tends to give fairly unhelpful error messages and youll feel you hit a roadblock since R just isnt working right. However, the second issue - code is wrong but doesnt tell you its wrong! - is far more dangerous. This is especially true for research projects. Lets use examining whether a policy affected murder as an example. In the example data set below, we have two years of data for both murder and theft, and well say that the policy changed at the start of the second year. If we want to see if murder changed from 2000 to 2001, we could (overly simply) see if the number of murders in 2001 was different from the number in 2000. And since the data also has theft, wed want to subset to murder first. example_data &lt;- data.frame(year = c(2000, 2000, 2001, 2001), crime_type = c(&quot;murder&quot;, &quot;theft&quot;, &quot;murder&quot;, &quot;theft&quot;), crime_count = c(100, 100, 200, 50)) example_data #&gt; year crime_type crime_count #&gt; 1 2000 murder 100 #&gt; 2 2000 theft 100 #&gt; 3 2001 murder 200 #&gt; 4 2001 theft 50 To see if murder changed, we can subset to the rows where the crime is murder, and then print out the year and crime_count columns to see if there is a change. So our code will be example_data[example_data$crime_type == \"murder\", c(\"year\", \"crime_count\")]. Below Ive accidentally only put one = instead of two, this will give us an error and not give any other results. Helpfully, the error message tells us that theres an error with the = sign, though not what that exact error is. example_data[example_data$crime_type = &quot;murder&quot;, c(&quot;year&quot;, &quot;crime_count&quot;)] #&gt; Error: &lt;text&gt;:1:38: unexpected &#39;=&#39; #&gt; 1: example_data[example_data$crime_type = #&gt; ^ Now Ive made a different mistake. Here, instead of ==, Ive written != which is the opposite of what we want - itll return all rows that do not equal murder. Now it looks like the policy cut murder in half when in actuality the policy doubled murders! Since we dont print out the type of crime in the output, we wouldnt catch this from the output alone. example_data[example_data$crime_type != &quot;murder&quot;, c(&quot;year&quot;, &quot;crime_count&quot;)] #&gt; year crime_count #&gt; 2 2000 100 #&gt; 4 2001 50 You may think this is a silly example that is unrealistic. And it is to a degree, its just one line of code that were using to evaluate an entire policy. Now think about how you would actually evaluate a policy using data that youre familiar with. Now the code is going to be much more complex. Your code may be hundreds of lines long, deal with multiple data sets that must be joined together, and involve a number of relative subjective (though must be defensible) decisions as to how to deal with your data (e.g.Â what crimes constitute violent crime, what time unit to analyze), and be written by other people you are collaborating with. The increased complexity with a real analysis increases the likelihood that errors will occur - and even small issues such as an incorrect subset can have large impacts on your results. So, how do we properly test our code? There are two main methods that Ill refer to as informally and formally. The formal method will be using something called unit tests that were discuss in great detail in the next part of this chapter. Informal methods are what youve likely been doing already. Essentially, just looking at your data and trying to see if it looks right. This includes stuff like printing summary statistics (using summary()) of important variables and making simple graphs to look at the data. If something is wrong, exploring the data is a fairly good way to discover it. For example, if you are looking at arson data from the FBI, you may find (as this is actually in the data) some cities with billions of car arsons in a month. This is clearly wrong so you know theres an issue - in this case, an issue with not subsetting out obvious outliers. Knowledge about the topic and the data are also important in this approach. If you are familiar with a given topic and your results are similar to that of past studies, thats a good sign that you did things right.8 You can also take this kind of approach when testing functions - which ideally are the way you write code, so you can use it for more than a single case. For example, if you have a function that takes a number and returns that number + 2, you can test it by checking a few cases. If you input 2, you expect 4. If you input -2, you expect 0. Do this a few times and you can be more confident that the function works properly. Now imagine a function thats more complex - one that calls a different function and uses the result of that function. If you change the underlying function, youll need to check both that function and the function that calls it. As you have more intertwined pieces in your code, this gets more and more complex. It also takes a lot more time as youll have a lot of code that only checks a function and will have to run it line by line to see if theres an issue. At this point, relying on informal methods becomes unfeasible and youll want to use unit tests, a formal way to test your code. Note, however, that this is far better suited for checking functions than for checking data, though it is possible to some degree. Well discuss formally testing data in Section 8.2.3.1. 8.2 Unit tests A unit test is simply a conditional statement where you have some input, usually a function with some parameters set, and state what you expect the result to be. You are saying I expect that if I do X, I will get Y. And if you get a result other than what you expected, R will tell you. In R, you can make a number of unit tests and have R run them all at once and inform you of which ones failed. Each unit test is just a function in R that is specifically for checking whether other functions - or other code or data - are correct. They operate just like a normal function. To use unit tests, well use the R package testthat which has a number of functions that make unit testing easier and use some keyboard shortcuts in RStudio that also improve the ease of testing. Please note that these shortcuts will only work if youre working in an R Package, a normal R Project wont work. If you dont have testthat installed, do so using install.packages(\"testthat). For more information on the package, please see the packages website. library(testthat) #&gt; #&gt; Attaching package: &#39;testthat&#39; #&gt; The following object is masked from &#39;package:devtools&#39;: #&gt; #&gt; test_file In testthat, every function follows the same expect_ format where a type of conditional statement follows the _. For example, expect_equal() checks if two values are equal, expect_named() checks if the name of a data set is correct, and expect_silent() makes sure that the code thats run doesnt return any warnings, messages, or errors. To use this technique for our above example of the function that adds 2 to an inputted number - which well call add_2() - we can use some expect_equal() functions. If we input 2, we expect 4. So wed write expect_that(add_2(2), 4). add_2 &lt;- function(number) { return(number + 2) } expect_equal(add_2(2), 4) Above is the code that makes the add_2() function and one unit test checking it. It doesnt output anything. That is good. When a test passes, there is no information; when it fails, the function will output a message that it failed. Below is another test, this one intentionally wrong to show what happens when a test fails. expect_equal(add_2(2), 5) #&gt; Error: add_2(2) not equal to 5. #&gt; 1/1 mismatches #&gt; [1] 4 - 5 == -1 It gives an error, telling us that the result of the add_2(2) function does not equal 5. Helpfully, it also shows us how much of a difference there is between what we expected and what we got. Note that it says 1/1 mismatches. That says that all of the expected values - we only expect one value - are incorrect. If we expect more than one result, such as if we expect a function to return a vector, it will check each value and say exactly which ones (in the order we have the resulting vector) are incorrect. This is helpful when diagnosing exactly which part failed. There are a few different ways to run the unit tests. First, you can run them like a normal R Script by running each line directly or using source(). This is fairly inefficient and loses some of the benefits built into RStudio for testing. The next way is to use the test_dir() function from the testthat package where you enter the folder directory in the parentheses and it runs every test file in that folder. Its easier to simply use the test_path() function which inserts the correct folder, assuming that you didnt move folders around after use_test() created them. So youd write test_dir(test_path()) and it would run all of your tests. This also prints out a nice summary of the results for all of your tests combined, showing the number of tests that passed, that failed (i.e.Â didnt pass), that returned warnings, and that were skipped (you can force R to skip some tests which is useful when you change one part of the code and know those tests will fail but still want to test other parts). Note that for this method to work you will first have to run library(testthat) so R knows how to run the tests. You will also need to run all the functions or load all of the data that the tests check, otherwise youll get an error since R doesnt implicitly know that the functions/data exist. You can run this the normal way by highlighting and running the function (or the code to load data) in your R Project or use the shortcut Control+Shift+L (Command+Shift+L on a Mac, the L stands for Load) which will run every R file in your project (and every line of each file). The final way is to use the keyboard shortcut Control+Shift+T (Command+Shift+T on a Mac, the T stands for Test) which will load all of the files and then run all of the tests. So a quicker way of doing the above method. However, this shortcut only works when using an R Package, not a normal R Project. 8.2.1 Modular test scripts Before getting into exactly how to write a unit test correctly, well talk about organizing each testing file. As with your normal R Script, you can have separate testing scripts (a testing script is only a normal R Script which people use specifically for testing code) for each major part of the code that youre testing.9 As with the R Scripts for your code, this is simply a way to organize your work, and doesnt affect the testing. Below is an image showing the files I use to test the US Border Patrol scrapers. I have one file per PDF that I scraped. Note where the folder depicted above is located. Its in a folder called testthat in the tests folder in the main project folder that I called borderpatrol. Well use a helpful function from the usethis package to organize our test files and generate them automatically. If you havent installed this package already, do so using install.packages(\"usethis\") and then load it with library(usethis).10 You can use the function use_test() from the usethis package to create a test file inside your R Project. This will automatically create the necessary file and folders (if not created already) so you dont have to do any more work. Run this function by putting the name of the test file you want to create (in quotes) in the parentheses. It will open the test file in the Source panel (shown in the top left). In the example shown below, I wrote use_test(\"test\") to make a new file called test. In the Source panel, the file is called test-test.R which is just because usethis will automatically add test- to the name of any test file name you make. use_test() will also generate an example of tests, which you modify (or delete entirely) to suit your own needs. The first file in the testthat folder is called setup.R which is a file that will automatically run first when you run a test script through R or using RStudios keyboard shortcut. This file is where you run some code that is used during the tests. In my setup.R file I made several vectors which I use during the tests to subset the data. You wont always need to have a setup.R file, but its useful when you want to run the same code beforehand for multiple different test scripts. 8.2.2 How to write unit tests Well start by looking at the default test question example made when using use_test() to understand the organization of a test file before getting into an example of actual tests. In the image below, there are really two pieces. First, we have the actual test on line 2 - expect_equal(2 * 2, 4). This is saying, I expect 2 * 2 to equal 4, and R will check if that is true. All of you tests will be in this format, just for a specific result from a specific input. Now lets look at the code surrounding that line - test_that(\"multiplication works\", {}) where the expect_equal() line goes inside the {}. The test_that code is basically a form of organization within a test file to group similar tests together. In this case it is grouping all of the tests that check if multiplication works, though we only have one test written. Below Ive added three new tests to this multiplication works testing group. To run this code, I can either run each expect_equal() individually (remember to run library(testthat) beforehand or it wont run) or run the entire test_that() group at once (you can do this like running a for loop by either highlighting it all and running or selecting either the top or bottom line [which has the squiggly brackets] and running that line - the entire thing will run. The benefit of this is that when you run all the tests you write (and youll often have many test groups and more individual tests than shown here), if a test in a group fails, it will tell you exactly which group failed (based on the name of the group which you specify - here, multiplication works). Note that the final test in this example is incorrect, and in the Console panel on the right it says that \"Test failed: multiplication works to tell you where the test failed. The test groups arent necessary but they make it easier to organize your tests. As an example of actual tests, well go over the tests that I wrote when I first scraped the US Border Patrol data that we scraped in Chapter 23. This test file is organized almost identically to the example one shown above. At the start I have some code that loads the data that I will test - this isnt in the setup file since the code is for this specific test script (though it could be in the setup.R file and the results would be the same). While most tests check the result of functions, here I am checking the data that is outputted by the function, and not rerunning the function for each test. I do this because the function is relatively slow to run and I have many tests, but putting the function that gets the data in the test directly will give the exact same results. Then there are several test_that() groups with some expect_equal() tests inside each. Since these tests are checking if the code is scraping the PDFs correctly, I determine the expected result by looking at the PDFs and writing down what the values should be (be careful, this must be done by hand but that can mean you mistype - so double-check your work!). Well use the test on lines 21-22 as an example. Here I am asking if the values in the cocaine_pounds column, for rows where the sector is coastal border are equal to the values c(6843, 1701, 3169, 1288, 6884, 20, 709, 5962, 989). If they are, then the scraping was correct (at least for this part of the PDF) and the code worked. In this case I checked every value that meets the two conditions, but thats just because there were relatively few values. If I had many values that meet those conditions (i.e.Â many rows of data in that column), I would just check a small number of them. 8.2.3 What to test Now that weve gone over exactly how to make unit tests, lets talk about exactly what to test. When testing functions, you generally want to test every possible parameter in the function, and a variety of inputs. In particular, try to think of ways that the function could be used incorrectly and write a test to catch that. For example, our add_2() function will fail if a string (e.g.Â 2) was inputted instead of a number, so youll want to add a test for that. Youll also want to make sure that inputting something other than simply a single number, such as a vector of numbers, works correctly. Basically, you want to be thorough and cover all of your bases. Writing unit tests is one of the most time-efficient things you can do since it helps you avoid making costly (in time and in getting wrong results) mistakes. But dont spend too much time writing tests. If youve tested that add_2(2) equals 4, no need to test that add_2(3) equals five since youre essentially testing the exact same thing. And consider your audience (even if that is only you). If you know that add_2() will only be used by people who know better than to input a string, theres no need to test for that (and testing for that will mean that youd also want code that handles a string input in the way you want it, such as outputting a message saying strings arent allowed). In general, I think its always better to have more tests than fewer, but consider whether writing that test is a good use of you time. 8.2.3.1 Tests for research projects When you use R for a research project, youll usually take data that someone else collected, or scrape it yourself, do some work to clean this data (e.g.Â subset or aggregate the data, standardize values) and then run a regression on it. In these cases there are fewer opportunities to use unit tests to check your code. Indeed, the best checks are often content knowledge about the data and examining the results of the regression to see if it makes sense and fits prior literature. While testing is most commonly used for functions, you can use it to test data. Writing tests for research data is best if your code is scraping the data (webscrape or PDF scrape) and you want to verify that it is correct, or if you expect the data to change and want to ensure that it is still correct (while exact values will change, you can check broad categories such as whether certain groups are included). For example, if you know that you only want to look at a certain state, you can write a test that expects the only state in the data to be the one youre analyzing. This way, if you add more data, such as a new release of that data set, the test will catch if theres any other state that you may have forgotten to remove after adding the new data. If youre sure that you will only use a particular data set that never changes, youre better off just writing code in your main R Script (or a specific script for checking the data) to do these checks rather than dedicated tests. 8.2.3.2 Tests for data collection Our example in this chapter was tests for a data collection process - in our case, PDF scraping - so weve already seen how to test code for gathering data. Well still talk briefly here about what kind of tests - and how many tests - you will want for this type of code. In normal tests, you dont want to test the exact same thing multiple times (for example, if you test that 2 + 2 = 4, you dont need to test that 2 + 3 = 5). This is different when it comes to testing code that collects data from a source, such as through PDF scraping or webscraping (which is different from when you download a machine-readable file like a .csv file). When testing data collection code, you want to be far more thorough, retesting something in multiple ways. This is because small differences in the data you are scraping may affect the code at different parts of the scrape. For example, imagine a PDF with 10 pages. On nine of those pages each row is a single line, but on a single page there are rows that are multiple lines. Writing tests to check results from a single page will miss the issue 9 out of 10 times. Ive often experienced PDF or webscraping where some parts of the data are just weird and cause the code to scrape it incorrectly - but often not tell me that theres an issue. So to catch this youll need far more tests than normal. I prefer to choose a few random pages (more if the PDF/website is longer) and test random rows and columns since thatll give a good coverage of the results. In addition, I look at the PDF or website and try to see if theres anything atypical about a certain part; if there is, I test that specifically. Its easy to over-test (and thats better than under-testing) this kind of work, but there are rapidly diminishing returns. So test comprehensively but not at the cost of having too little time to work on code - again, this is something that requires experience and doesnt have a hard rule on what constitutes too much (or too little) testing. 8.3 Test-driven development (TDD) Well finish this chapter by talking about test-driven development (TDD), a philosophy in programming where you write the tests first and then write the code that meets these tests after. This is really an extension (and personally, an inspiration) to the discussion in Chapter 5 of planning out your project before you start. In Chapter 5 we talked about writing out every step of the project by hand sketching all the figures or tables that you intended to have. With TDD, you write tests for all of the functions you intend to write (and any variations of parameters or inputs for these functions) or data you intend to gather/clean. Test-driven development is a useful tool to make you really think about the functions that you need to write, and how they interact with each other. This is an excellent way to identify potential issues (Ive often realized while writing tests that the approach I was going to do wouldnt work) before you start on the code. However, for this same reason, it is a fairly advanced topic since you need to know exactly (or, mostly) what you need to do, and the likely problems that each approach will face. For that reason, I recommend holding off on using TDD until youre fairly experienced with R or programming in general. However, make sure that you dont look less closely just because the results are the way you expect. Past results may be wrong, or you can have a new finding, so make sure to avoid complacency just because you like the results For more info on having separate R Scripts for each major section of your code, please refer to Section 5.3 The usethis package is an extremely helpful package that automates a lot of work the you would do primarily for R package development so if you go down that route I recommend exploring the package more through its website. "],["git.html", "9 Git 9.1 What is Git and why do I need it? 9.2 Git basics 9.3 Using Git 9.4 Setting up Git on an already made R Project 9.5 Using Git through RStudio 9.6 When to commit 9.7 Other resources", " 9 Git This chapter covers git, which is a way to have version control for your code - like a programming version of Dropbox, but with a few added features. This is relatively advanced material and isnt necessary for using R. However, when youre dealing with complex projects or with multiple collaborators it is helpful to use. Given the advanceness of the material, feel free to skim or skip this chapter entirely, and come back to it when you think you need it - which will likely be after you finish the rest of the book. 9.1 What is Git and why do I need it? As you write R code you will - I hope! - save your R script from time to time (preferably using RStudios auto-save feature) to avoid losing any code youve written if you close R or shut down your computer. This is important as itll save everything youve done locally but if your computer crashes, youll want your work to be backed up elsewhere. While you should have something like Dropbox or Google Drive that keeps backups of your work, here well talk about Git which is a version control software that gives you much more control (but requires more work) of the saved work than from something like Dropbox.11 Before getting into exactly how to use Git, well talk first on what it is and how itll help your work. Git is also a very powerful and complex tool so this guide is going to be touching just a small - but useful to most researchers and R programmers - part of it. With backup software such as Dropbox, itll save your work very frequently - so frequently in fact that I turn off Dropbox when I write R since it keeps interrupting me by saving at the moment Im typing, which stops the typing. Below is the Dropbox page for some R code that Ive been working on to scrape COVID data. Notice the timestamps - 4/5 of them are within one minute, showing how often Dropbox is saving changes. This is useful if I need the most recent update - or to share the most recent version with a collaborator. Heres the big issue - and the one that Git solves - I have four versions within a minute of each other, whats the difference between them? Dropbox is saving automatically and doesnt indicate how theyre different (clicking on the file shows the complete file, not differences relative to some previous version) which means if I mess up some code a while ago, I cant easily see which version is the one that works. With Git you can essentially wait until youve made enough changes to decide that these changes merit a new version of your work (One way to think about this is ) If youre ever used the track changes feature on a Word Document(or Google Doc or Overleaf, etc.), the concept is similar. When you have this setting in a Word or Google Doc every time you (or anyone else) makes changes in that document, those changes, who made them, and when they occurred, is tracked. This makes it easy to see exactly what part of the file was changed and to undo that change if necessary. Below is an example of this feature on one of my drafts on Overleaf (basically a way to collaborate using LaTeX which is similar to RMarkdown). You can see each change that my co-author Aaron Chalfin made in the draft in the purple changes the main part of the photo. The parts that were rewritten or added are highlighted in purple while the parts that were deleted have a purple highlight. What is shown in purple isnt all of the history of changes for this paper. If you look at the part on the right, highlighted in green, it shows what files were edited, by whom, and at what time. If you dont like a change - or in Rs case more commonly, broke some code by accident - you can go back in the history of changes and return to an older version. The way that R - and many other programming languages (and technically you can use this for any file or folder) does this version control is through Git. The times you see are ones that Overleaf automatically set each change to. You make changes to your code or RMarkdown file and the computer will track these changes. 9.2 Git basics There are four main processes you need to know for a basic understanding of Git: checkout, add and commit, push, and pull. This chapter will explain how to use Git through buttons on RStudio so you dont necessarily need to know these commands in Git, but its useful to know enough to talk about them and ask questions if needed. Well use the example of getting a book from the library to walk through using Git. The steps for this are simple, we go to the library, pick a book we want, check it out from the librarian, read it, and eventually return it. Using Git adds one wrinkle to this, we will want to write in the book and see what other people write too. Of course, when the book is checked out, no one else could write in our version, and no one can see what we write. So anything we write has to be done before we return the book to the library, then we check-out the book again to see what other people have written. When we want another book, we simply redo these steps. Library Steps Git steps Git code Go to library Find book and check-out book Clone (usually will just be done once per project). RStudio helps with this. The code you see in the next cell is a little more complicated than normal since were using RStudio Server. Git clone path to repo, can be GitHub link Read or write in book This is done in R, not in Git No Git code, this is going to be whatever code we write in R. Also includes any outputs such as making a graph that is saved, RMarkdown outputs like a PDF, or even new R files. Return book Add &amp; commit Push Git add . Git commit m message indicating what we wrote Git push Check-out book again (to see what other people have written in it) Pull Git pull Another way to think about commit vs push is that of writing an email. When you write an email, youre essentially editing a blank document by adding the words of the email. When you save (but dont send) the email, you are making a commit (essentially committing or promising to make a change). When you send the email you are making a push (taking something that you have written and changed and sending it to the main repository). While emails let you correspond directly between two or more people, how Git works is like sending the email to a central server (or a Post Office) and anyone who wants to read it has to go there. And when someone reads it and responds their email also goes to this central server. You have to go there to get their response (called a pull in Git terms) which is essentially an addition to your initial email. 9.3 Using Git While you can use Git like writing R code (though the syntax is not that similar to R), RStudio has built-in buttons that work instead of writing code yourself. Well go through these buttons and not discuss any Git code beyond the small amount needed to link your project to GitHub, a website that is like DropBox for Git. 9.3.1 Setting up Git To install Git on your computer install Git for Windows for Windows computers and Xcode for Mac computers. If youre on a Linux operating system, see here for how to install Git. For more help I recommend this chapter of Happy Git and GitHub for the useR which covers installing Git. Youll now need to tell Git some identifying information about yourself so that whenever you make a commit, Git will know who you are. We will use a function from the usethis package to do this. The only information we need is your name (or nickname, just something so collaborators know that it was you who did a certain commit) and email address (below youll set up an account on GitHub - use the same email address there as here). Well use the function use_git_config which has two parameters - user.name and user.email which take strings with your name and email, respectively. library(usethis) use_git_config(user.name = &quot;Your name&quot;, user.email = &quot;email_address@gmail.com&quot;) Once you have Git installed, youll need to enable it through RStudio. To do this, go to Tools and click Global Options. Then go to the Git/SVN tab and check the Enable version control interface or RStudio projects checkbox. The final step here is to click the first Browse button and navigate to where you installed Git on your computer. Select the git file (on a windows computer this will be within the larger Git folder) and then hit Ok to close the popup. 9.3.2 Setting up Github well be using GitHub to host our Git commits. To use GitHub, please make an account on their website https://Github.com/. There are several types of accounts at various monthly costs but you only need the Free version. This gives you an unlimited number of public and private repositories (sometimes shorthanded to repos) - these are basically R Projects (you can use any language when it comes to using Git and GitHub, not just R). A public repository is one that anyone can look at on GitHub, download the code/files and make any changes they want (though if they want to make changes to your repository they need to make a change request, it is not automatic). This is good for projects where you want others to collaborate on or to showcase your work. A private repository is the same thing but only people you approve can view, download, and work on your repository. This is good for when you dont want the code to be public (e.g.Â code for an employer or dealing with sensitive data such as peoples personal information). I tend to keep my research work private until the paper is published and my data work public since I want people to notice it and find bugs.12 Once youve made an account on GitHub, youll need to create a repository there to connect to your R Project. You can do this through the GitHub home page as shown below. This page is my own homepage and shows several on my current repositories on the left (note the ones with a golden lock to the left, these are the private repositories which are only accessible to people I permit), a list of updates on other peoples repositories that I chose to get updates from, and some suggested repositories that GitHub thinks Id be interested in on the right. To create a new repository, click the green New button on the left side above the list of current repositories. After you click the green New button, youll go to a page when you set a name for your repository (this can be different than the name of your R Project though I prefer to use the same name so I know exactly what project the repository is for), provide a short description, and choose if the repository should be public or private. You can also optionally add a README file which is a longer form of description for what the code is and its purpose (basically a short manual for the project - often explaining how, not why, it works), and add a .gitignore file or set a license (which tells people who look at the project what theyre allowed to do with it. For more on code licenses please see this excellent site.) The .gitignore file is essentially a list of files or folders than you do not want These last three choices are all optional and if you dont do it now, you can do it anytime through R. Once youve made your choices, click the green Create Repository button This will open up a new page with a bunch of code that youll enter in R that connects your R Project Git commits to this repository on GitHub. Well get to this in a bit - for now, lets focus on those three buttons in the top right. These are for accessing or following other peoples public repositories (you can technically click on them in your own repository but there isnt much benefit to that apart from the first button). The first button sets your notification settings for the repository. To change the notification setting, click Unwatch and then select how much you want to be notified for. By default it is set to notify you of all conversations that occur. The main conversation will be when someone posts a message in the Issues tab where they tell you about an issue (or sometimes a request for a new feature or just ask a question) about the code in this repo. With your own repositories, youll want to be notified of all conversations so you dont miss anything. You can use this option on other peoples repositories and it will alert you of changes or conversations in that repo. This is useful when you want to know about updates (i.e.Â new features) on repositories that youre interested in (for example, I follow the testthat repo so I know of any new versions of that package that may have useful features). Stars are simply a way to favorite a repository and you can see a list of all repositories that you have starred by clicking the profile button on the top right and going to Your stars. The final option is Fork which creates a new repository on your account that is a copy of the repository that you forked. You will want to fork other peoples repositories - there isnt much benefit of forking your own as thats essentially just making a duplicate of your own work - and modify them to suit your needs. This is useful for two reasons. First, if you want collaborate with someone - even if just to submit a fix to a bug you found (or a typo in this book!) - you can fork their repository, make the changes on your own RStudio project, commit the changes, and request that the original account accept your changes into the repository that you forked (called a pull request). This sounds very complicated to make what could be a simple change (and it is) so why bother? As you get more familiar with R and how R handles Git, this process wont take too much extra time so its not that much of an additional burden. But the main advantage is that Git establishes much more structure than would exist otherwise, and helps protect the original creators time. Consider that you found a bug in some of my code and sent me an email detailing that issue. This is probably the best-case scenario for you - it is quick to send emails. For me, that adds time to try to figure out what and where the bug is (describing it better would just take more time for you to write and me to read) and then to fix the bug. Even if you included the fix in the email, it would take me time to test it. When using Git and GitHub, this process is far easier for the person receiving the changes (and while is extra work because you must follow Git procedures, it can be somewhat easier as you wont need to explain as much). If you submit a bug changes to me through GitHub, I will immediately know what is changes as Git highlights all changes between my version and your fixed version, and I can set it to automatically run tests (see Chapter 8 for more on this) to make sure everything works. There is no longer any questions of what was changed, where the code was changed, how it is changed (barring confusing code being used), or whether it passes all the unit tests. Everything is largely automated so accepting changes is a breeze. As you program and collaborate more, youll increasingly be on the side of receiving changes to your code, so the balance between extra work as a submitted and easier time as a receiver of changes gets better. In Section 5.2 we walked through making an R Project and selected the Create a Git repository box without explaining what that does. Clicking this box sets the R Project up to use Git so you dont need to do any other steps from the R side (but youll need some steps to connect with GitHub). In the below section we discuss a simple way to connect your R Project to Git if you didnt check this box. If you plan on always checking the box - and have no unchecked R Projects that you want to use with Git, feel free to skip the following section. 9.4 Setting up Git on an already made R Project If you didnt tell RStudio to setup Git in your R Project, its quite simple to do so through RStudio. First, go to Tool -&gt; Project Options. Then click the Git/SVN button that is second to the bottom to open up the Git options. This will open up a page that says Version control system which will be set to (None). Click this and set it to Git. It will then ask if you want to set up Git for the current R Project. Say Yes. You need to restart RStudio for Git to work now, so click Yes. Now if you look at the Environment panel you can see a new tab called Git. Well do all of the Git work in RStudio through this tab. You are now ready to use Git for this project. 9.5 Using Git through RStudio Now we have an R Project with Git ready, and a repo on GitHub to store the project files. We need a way to connect the R Project to the specific GitHub repo - for this, well return to that screen on GitHub with all of the weird code that starts with the word Git. We need to enter that code into R to connect the two. To do this, we need to use the Git Shell, which is basically like the Console panel but for Git. You can get to this by going to the Git tab, click on the More button, then click Shell. This opens up a popup almost identical to the Console panel. Here we can write the code (or copy it from GitHub) and hit enter to run the line. This is the only time we will be using actual Git code in this chapter (there is some benefit to learning the Git code rather than relying on the buttons in RStudio as it is much faster when dealing with large files or simply a large number of files to use the code rather than through RStudio - though Im not sure why this is). We will use the first chunk of code thats shown on GitHub - the one that starts with the bold text or create a new repository on the command line. You can copy and paste all of the code (starting with the echo line and ending with the git push -u origin master line) to the shell and hit enter or you can do it one line at a time. Refresh your GitHub page and youll see that instead of code on the screen, it shows the files that you uploaded. In this case, I didnt make any files so it is largely blank, just a relatively empty README file. If this was a real project, youd see all of the same files (except those you chose not to commit) as in your R Project folder. You R Project is now connected to the GitHub repo so you can do the rest of the Git work on this project entirely through RStudio and will not need to touch the Git Shell again. The below photo shows my Git tab while working on this chapter and from an update to the Subsetting chapter. It has a list of all of the files that I changed since my last commit (if you havent committed at all yet, this is just all of the files in your project folder) and is color coded based on what I did to them. The blue M means that I have modified an already existing - i.e.Â one that has already been committed through Git - file, and and the yellow ? means that these are new files. If there was a red D next to any of the files, that would mean that I deleted a file that had previously been committed. There are a lot of buttons here (Diff, Commit, Pull, etc.) but you can ignore them and just click the Commit button when ready to make a commit. Doing so will open up a new window that has all the functionality of these various buttons in an easier (in my opinion) format. This window is where you can review the changes and write up a brief note about what you did. The window is a bit overwhelming so well take it in pieces. First lets start by examining how the list of files in the top left is related to the big box on the bottom with text highlighted in red and green. The list of files is identical to that in the Git tab - its just a list of files that have changed (including new files and deleted files) since the last commit. When you click one, itll show you the changes made to this file relative to the most recent version on Git (note that while this will show changes on R files and some other types of files, not all are available to be viewed - though that wont affect Git working at all - so it may just show a blank part of the window instead). The section that was removed is highlighted in red and the replacement is highlighted in green. Unfortunately, it shows changes on entire lines so if you only change a small part of a line, you will have to read closely to see the difference. You can look through this to figure out exactly what you changed - both which files were changed and what was changed in each file. Now lets walk through the process of actually committing and pushing your changes to GitHub. In real terms, this is basically uploading a new version of the files to GitHub, with brief documentation of what changed. At this point all we need to do is tell RStudio which files we want to commit, write a brief message explaining the changes, and submit it. First, we select which files to commit by clicking the checkbox to the very left on the top left panel. In the image below, they are all unchecked as I havent selected any yet. You can click each files box or click the Stage button near the top once you have a file (or files) highlighted to stage it. Once its staged the checkbox will now have a check in it. Staging a file just means that you want to commit this file. If you want to commit all of the files, you can do Control+A (or Command+A) to select all of the files and then click Stage. Now youre ready to document the overall changes that youre committing, not the changes for each individual file. You do so in the Commit message box on the right. Again, here it is blank but you would write a short description (there is no hard rule that it must be short, but the general convention is each commit is relatively small and thus the description of the message can be short. You generally want no less than a short sentence and no more than a paragraph, though of course this depends on your unique circumstances. As you first start out, I think over-describing your work is best as you get a feel to what to do.). Now click the Commit button. It will make a popup window showing all the changes that it made. The create mode  stuff is saying that these files (the images) are new files that Git hasnt seen before. You can close this popup. You have now completed your first commit using Git through RStudio. The files arent on GitHub just yet though. Now right above the list of files is text that says Your branch is ahead of origin/master by 1 commit. This means that your version of the project is ahead of (since you made changes to the project that you just committed) the version on GitHub. To send it to GitHub you just need to push the Push button on the top right. In our email example, this is like clicking send after writing your draft and saving (committing) it. When you click Push itll open up a popup which you can close once its done. 9.6 When to commit There is no hard rule for when to make a commit, but the general convention is to make one whenever youve finished a unique part of the work. For example, if you have some data that you need to clean, graph, and run a regression on, youd likely commit after each part is done. One of the benefits of using Git is that you will have a record of each version of the code that you commit - so you want to balance between having too many records that are very similar to each other (similar to saving a new version of a paper draft every time you add a sentence) and too few so you lose a lot of work if you need to go back (similar to saving a new version of the paper only every 10 pages of writing). 9.7 Other resources For an excellent overview of using Git and GitHub with R, please see this chapter of Hadley Wickham and Jenny Bryans book R Packages. For a short and very accessible book on this topic, please see Jenny Bryan and Jim Hesters excellent Happy Git and GitHub for the useR. This came in handy for me as somehow one of my dissertation papers written in RMarkdown became empty a couple of months before my defense and I couldnt undo that change. My Dropbox backup was older than my Git backup so having Git was a real time saver You may disagree with my decision to keep research code private until publication - and for good reason. Doing this has the benefit of preventing people from scooping my (and my collaborators) work, but also makes it more likely to lead to bugs as there are fewer people looking at the code. "],["reading-and-writing-data.html", "10 Reading and writing Data 10.1 Reading Data into R 10.2 Writing Data", " 10 Reading and writing Data For this chapter youll need the following files, which are available for download here: fatal-police-shootings-data.csv, fatal-police-shootings-data.dta, fatal-police-shootings-data.sas, fatal-police-shootings-data.sav, sqf-2019.xlsx, sf_neighborhoods_suicide.rda, and \"shr_1976_2020.rds. So far in these lessons weve used data from a number of sources but which all came as .rda or .rds files which are the standard R data formats. Many data sets, particularly older government data, will not come as .rda file but rather as Excel, Stata, SAS, SPSS, or fixed-width ASCII files. In this brief lesson well cover how to read these formats into R as well as how to save data into these formats. Since many criminologists do not use R, it is important to be able to save the data in the language they use to be able to collaborate with them. Fixed-width ASCII files are not very common and require a bit more effort than the other formats so well leave those until later to discuss. In this lesson well load and save multiple files into R as examples of how R can handle data that is used in many different softwares. 10.1 Reading Data into R 10.1.1 R 10.1.1.1 .rda and .rdata files As weve seen earlier, to read in data with a .rda or .rdata extension you use the function load() with the file name (including the extension) in quotation marks inside of the parentheses. This loads the data into R and calls the object the name it was when it was saved. Therefore we do not need to give it a name ourselves. Below were loading the sf_neighborhoods_suicide.rda file and it creates an object in R (which we can look at in the Environment tab) called sf_neighborhoods_suicide. It has the same name only because when I originally saved the file I saved it using the same name as it was called in R. But in practice I could have called it whatever I wanted. So it being the same name is convenient, as it is clear what the data is, but not necessary. load(&quot;data/sf_neighborhoods_suicide.rda&quot;) 10.1.1.2 .rds files For each of the other types of data well need to assign a name to the data were reading in so it has a name. Whereas weve done x &lt;- 2 to say x gets the value of 2, now wed do x &lt;- DATA where DATA is the way to load in the data and x will get the entire data.frame that is read in. This includes the other kind of R data file, the .rds file. Here, we must explicitly name the data - there is no name by default like in a .rda or a .rdata file. We can load .rds files into R using the readRDS() which is built into R so we dont need any package to use it. Like in load(), we just put the name of the file (in quotes) in the parentheses. rds_example &lt;- readRDS(&quot;data/shr_1976_2020.rds&quot;) 10.1.2 Excel To read in Excel files, those ending in .csv, we can use the function read_csv() from the package readr (the function read.csv() is included in R by default so it doesnt require any packages but is far slower than read_csv() so we will not use it). install.packages(&quot;readr&quot;) library(readr) The input in the () is the file name ending in .csv. As it is telling R to read a file that is stored on your computer, the whole name must be in quotes. Unlike loading an .rda file using load(), there is no name for the object that gets read in so we must assign the data a name. We can use the name shootings as its relatively descriptive and easy for us to write. shootings &lt;- read_csv(&quot;data/fatal-police-shootings-data.csv&quot;) #&gt; Rows: 4371 Columns: 14 #&gt; -- Column specification -------------------------------- #&gt; Delimiter: &quot;,&quot; #&gt; chr (9): name, manner_of_death, armed, gender, race... #&gt; dbl (2): id, age #&gt; lgl (2): signs_of_mental_illness, body_camera #&gt; date (1): date #&gt; #&gt; i Use `spec()` to retrieve the full column specification for this data. #&gt; i Specify the column types or set `show_col_types = FALSE` to quiet this message. read_csv() also reads in data to an object called a tibble which is very similar to a data.frame but has some differences in displaying the data. If we run head() on the data it doesnt show all columns. This is useful to avoid accidentally printing out a massive amounts of columns. head(shootings) #&gt; # A tibble: 6 x 14 #&gt; id name date manner_of_death armed age #&gt; &lt;dbl&gt; &lt;chr&gt; &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 3 Tim Ell~ 2015-01-02 shot gun 53 #&gt; 2 4 Lewis L~ 2015-01-02 shot gun 47 #&gt; 3 5 John Pa~ 2015-01-03 shot and Taser~ unarm~ 23 #&gt; 4 8 Matthew~ 2015-01-04 shot toy w~ 32 #&gt; 5 9 Michael~ 2015-01-04 shot nail ~ 39 #&gt; 6 11 Kenneth~ 2015-01-04 shot gun 18 #&gt; # ... with 8 more variables: gender &lt;chr&gt;, race &lt;chr&gt;, #&gt; # city &lt;chr&gt;, state &lt;chr&gt;, #&gt; # signs_of_mental_illness &lt;lgl&gt;, threat_level &lt;chr&gt;, #&gt; # flee &lt;chr&gt;, body_camera &lt;lgl&gt; We can convert it to a data.frame using the function as.data.frame() though that isnt strictly necessary since tibbles and data.frames operate so similarly. shootings &lt;- as.data.frame(shootings) To read in Excel files that end in .xls or .xlsx, we need to use the readxl package and use the read_excel() function. Well read in data on stop, question, and frisks in New York City. install.packages(&quot;readxl&quot;) library(readxl) sqf &lt;- read_excel(&quot;data/sqf-2019.xlsx&quot;) 10.1.3 Stata For the remaining three data types well use the package haven. install.packages(&quot;haven&quot;) library(haven) haven follows the same syntax for each data type and is the same as with read_csv() - for each data type we simply include the file name (in quotes, with the extension) and designate an name to be assigned the data. Like with read_csv() the functions to read data through haven all start with read_ and end with the extension youre reading in. read_dta() - Stata file, extension dta read_sas() - SAS file, extension sas read_sav() - SPSS file, extension sav To read the data as a .dta format we can copy the code to read it as a .csv but change .csv to .dta. shootings &lt;- read_dta(&quot;data/fatal-police-shootings-data.dta&quot;) Since we called this new data shootings, R overwrote that object (without warning us!). This is useful because we often want to subset or aggregate data and call it by the same name to avoid making too many objects to keep track of, but watch out for accidentally overwriting an object without noticing! 10.1.4 SAS shootings &lt;- read_sas(&quot;data/fatal-police-shootings-data.sas&quot;) 10.1.5 SPSS shootings &lt;- read_sav(&quot;data/fatal-police-shootings-data.sav&quot;) 10.1.6 Fixed-width ASCII 10.2 Writing Data When were done with a project (or an important part of a project) or when we need to send data to someone, we need to save the data weve worked on in a suitable format. For each format, we are saving the data in we will follow the same syntax of function_name(data, \"file_name\") As usual we start with the function name. Then inside the parentheses we have the name of the object we are saving (as it refers to an object in R, we do not use quotations) and then the file name, in quotes, ending with the extension you want. For saving an .rda file we use the save() function, otherwise we follow the syntax of write_ ending with the file extension. write_csv() - Excel file, extension csv write_dta() - Stata file, extension dta write_sas() - SAS file, extension sas write_sav() - SPSS file, extension sav As with reading the data, write_csv() comes from the readr package while the other formats are from the haven package. Though the readxl package lets you read .xls and .xlsx files, it does not have functions that let you save a file to that type. There are other packages that let you save .xls and .xlsx file but in the interest of keeping the packages we learn to a minimum, I wont include those here. In nearly all cases youll want to save your data as an R, .csv, or a .dta file. Fixed-width ASCII files are so primitive that while we may need to load them into R, we should never save data in this format. 10.2.1 R For saving an .rda file we must set the parameter file to be the name were saving. For the other types of data they use the parameter path rather than file but it is not necessary to call them explicitly. save(shootings, file = &quot;data/shootings.rda&quot;) To save a .rds R file we use the saveRDS() which follows the exact save format as save(). saveRDS(shootings, file = &quot;data/shootings.rds&quot;) 10.2.2 Excel write_csv(shootings, &quot;data/shootings.csv&quot;) 10.2.3 Stata write_dta(shootings, &quot;data/shootings.dta&quot;) 10.2.4 SAS write_sas(shootings, &quot;data/shootings.sas&quot;) 10.2.5 SPSS write_sav(shootings, &quot;data/shootings.sav&quot;) "],["subsetting-intro.html", "11 Subsetting: Making big things small 11.1 Select specific values 11.2 Logical values and operations 11.3 Subsetting a data.frame", " 11 Subsetting: Making big things small For this chapter youll need the following file, which is available for download here: offenses_known_yearly_1960_2020.rds. Subsetting data is a way to take a large data set and reduce it to a smaller one that is better suited for answering a specific question. This is useful when you have a lot of data in the data set that isnt relevant to your research - for example, if you are studying crime in Colorado and have every state in your data, youd subset it to keep only the Colorado data. Reducing it to a smaller data set makes it easier to manage, both in understanding your data and avoiding have a huge file that could slow down R. 11.1 Select specific values animals &lt;- c(&quot;cat&quot;, &quot;dog&quot;, &quot;gorilla&quot;, &quot;buffalo&quot;, &quot;lion&quot;, &quot;snake&quot;) animals #&gt; [1] &quot;cat&quot; &quot;dog&quot; &quot;gorilla&quot; &quot;buffalo&quot; &quot;lion&quot; #&gt; [6] &quot;snake&quot; Here we have made an object called animals with a number of different animals in it. In R, we will use square brackets [] to select specific values in that object, something called indexing. Put a number (or numbers) in the square bracket and it will return the value at that index. The index is just the place number where each value is. cat is the first value in animals so it is at the first index, dog is the second value so it is the second index or index 2. snake is our last value and is the 6th value in animals so it is index 6 (some languages use zero indexing which means the first index is index 0, the second is index 1. So in our example cat would be index 0. R does not do that and the first value is index 1, the second is index 2 and so on.). The syntax (how the code is written) goes object[index] First, we have the object and then we put the square bracket []. We need both the object and the [] for subsetting to work. Lets say we wanted to choose just the snake from our animals object. In normal language we say I want the 6th value from animals. We say where were looking and which value we want. animals[6] #&gt; [1] &quot;snake&quot; Now lets get the third value. animals[3] #&gt; [1] &quot;gorilla&quot; If we want multiple values, we can enter multiple numbers. If you have multiple values, you need to make a vector using c() and put the numbers inside the parentheses separated by a comma. If we wanted values 1-3, we could use c(1, 2, 3), with each number separated by a comma. animals[c(1, 2, 3)] #&gt; [1] &quot;cat&quot; &quot;dog&quot; &quot;gorilla&quot; When making a vector of sequential integers, instead of writing them all out manually we can use first_number:last_number like so 1:3 #&gt; [1] 1 2 3 To use it in subsetting we can treat 1:3 as if we wrote c(1, 2, 3). animals[1:3] #&gt; [1] &quot;cat&quot; &quot;dog&quot; &quot;gorilla&quot; The order we enter the numbers determines the order of the values it returns. Lets get the third index, the fourth index, and the first index, in that order. animals[c(3, 4, 1)] #&gt; [1] &quot;gorilla&quot; &quot;buffalo&quot; &quot;cat&quot; Putting a negative number inside the [] will return all values except for that index, essentially deleting it. Lets remove cat from animals. Since it is the 1st item in animals, we can remove it like this animals[-1] #&gt; [1] &quot;dog&quot; &quot;gorilla&quot; &quot;buffalo&quot; &quot;lion&quot; &quot;snake&quot; Now lets remove multiple values, the first 3. animals[-c(1, 2, 3)] #&gt; [1] &quot;buffalo&quot; &quot;lion&quot; &quot;snake&quot; Earlier I said we can remove values with using a negative number and that index will be removed from the object. For example, animals[-1] prints every value in animals except for the first value. animals[-1] #&gt; [1] &quot;dog&quot; &quot;gorilla&quot; &quot;buffalo&quot; &quot;lion&quot; &quot;snake&quot; However, it doesnt actually remove anything from animals. Lets print animals and see which values it returns. animals #&gt; [1] &quot;cat&quot; &quot;dog&quot; &quot;gorilla&quot; &quot;buffalo&quot; &quot;lion&quot; #&gt; [6] &quot;snake&quot; Now the first value, cats, is back. Why? To make changes in R you need to tell R very explicitly that you are making the change. If you dont save the result of your code (by assigning an object to it), R will run that code and simply print the results in the console panel without making any changes. This is an important point that a lot of students struggle with. R doesnt know when you want to save (in this context I am referring to creating or updating an object that is entirely in R, not saving a file to your computer) a value or update an object. If x is an object with a value of 2, and you write x + 2, it would print out 4 because 2 + 2 = 4. But that wont change the value of x. x will remain as 2 until you explicitly tell R to change its value. If you want to update x you need to run x &lt;- somevalue where somevalue is whatever you want to change x to. So to return to our animals example, if we wanted to delete the first value and keep it removed, wed need to write animals &lt;- animals[-1]. Which is essentially making a new object, also called animals (to avoid having many, slightly different objects that are hard to keep track of well reuse the name) with the same values as the original animals except this time excluding the first value, cats. 11.2 Logical values and operations We also frequently want to conditionally select certain values. Earlier we selected values indexing specific numbers, but that requires us to know exactly which values we want. We can conditionally select values by having some conditional statement (e.g.Â this value is lower than the number 100) and keeping only values where that condition is true. When we talk about logical values, we mean TRUE and FALSE - in R you must spell it in all capital letters. First, we will discuss conditionals abstractly and then we will use a real example using data from the FBI to make a data set tailored to answer a specific question. We can use these TRUE and FALSE values to index and it will return every element which we say is TRUE. animals[c(TRUE, TRUE, FALSE, FALSE, FALSE, FALSE)] #&gt; [1] &quot;cat&quot; &quot;dog&quot; This is the basis of conditional subsetting. If we have a large data set and only want a small chunk based on some condition (data in a single state (or multiple states), at a certain time, at least a certain population) we need to make a conditional statement that returns TRUE if it matches what we want and FALSE if it doesnt. There are a number of different ways to make conditional statements. First lets go through some special characters involved and then show examples of each one. For each case you are asking: does the thing on the left of the conditional statement return TRUE or FALSE compared to the thing on the right. == Equals (compared to a single value) %in% Equals (one value match out of multiple comparisons) != Does not equal &lt; Less than &gt; Greater than &lt;= Less than or equal to &gt;= Greater than or equal to Since many conditionals involve numbers (especially in criminology), lets make a new object called numbers with the numbers 1-10. numbers &lt;- 1:10 11.2.1 Matching a single value The conditional == asks if the thing on the left equals the thing on the right. Note that it uses two equal signs. If we used only one equal sign it would assign the thing on the left the value of the thing on the right (as if we did &lt;-). 2 == 2 #&gt; [1] TRUE This gives TRUE as we know that 2 does equal 2. If we change either value, it would give us FALSE. 2 == 3 #&gt; [1] FALSE And it works when we have multiple numbers on the left side, such as our object called numbers. numbers == 2 #&gt; [1] FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE #&gt; [9] FALSE FALSE This also works with characters such as the animals in the object we made earlier. gorilla is the third animal in our object, so if we check animals == gorilla we expect the third value to be TRUE and all others to be FALSE. Make sure that the match is spelled correctly (including capitalization) and is in quotes. animals == &quot;gorilla&quot; #&gt; [1] FALSE FALSE TRUE FALSE FALSE FALSE The == only works when there is one thing on the right hand side. In criminology we often want to know if there is a match for multiple things - is the crime one of the following crimes, did the crime happen in one of these months, is the victim a member of these demographic groups? So we need a way to check if a value is one of many values. 11.2.2 Matching multiple values The R operator %in% asks each value on the left whether or not it is a member of the set on the right. It asks, is the single value on the left hand side (even when there are multiple values such as our animals object, it goes through them one at a time) a match with any of the values on the right hand side? It only has to match with one of the right hand side values to be a match. 2 %in% c(1, 2, 3) #&gt; [1] TRUE For our animals object, if we check if they are in the vector c(\"cat\", \"dog\", \"gorilla\"), now all three of those animals will return TRUE. animals %in% c(&quot;cat&quot;, &quot;dog&quot;, &quot;gorilla&quot;) #&gt; [1] TRUE TRUE TRUE FALSE FALSE FALSE 11.2.3 Does not match Sometimes it is easier to ask what is not a match. For example, if you wanted to get every month except January, instead of writing the other 11 months, you just ask for any month that does not equal January. We can use !=, which means not equal. When we wanted an exact match, we used ==, if we want a not match, we can use != (this time it is only a single equals sign). 2 != 3 #&gt; [1] TRUE &quot;cat&quot; != &quot;gorilla&quot; #&gt; [1] TRUE Note that for matching multiple values with %in%, we cannot write !%in% but have to put the ! before the values on the left. !animals %in% c(&quot;cat&quot;, &quot;dog&quot;, &quot;gorilla&quot;) #&gt; [1] FALSE FALSE FALSE TRUE TRUE TRUE 11.2.4 Greater than or less than We can use R to compare values using greater than or less than symbols. We can also express greater than or equal to or less than or equal to. 6 &gt; 5 #&gt; [1] TRUE 6 &lt; 5 #&gt; [1] FALSE 6 &gt;= 5 #&gt; [1] TRUE 5 &lt;= 5 #&gt; [1] TRUE When used on our object numbers it will return 10 values (since numbers is 10 elements long) with a TRUE if the condition is true for the element and FALSE otherwise. Lets run numbers &gt; 3. We expect the first 3 values to be FALSE as 1, 2, and 3 are not larger than 3. numbers &gt; 3 #&gt; [1] FALSE FALSE FALSE TRUE TRUE TRUE TRUE TRUE #&gt; [9] TRUE TRUE 11.2.5 Combining conditional statements - or, and In many cases when you are subsetting you will want to subset based on more than one condition. These conditional statements can be tricky for new R users since you need to remember both what conditions you need and the R code to write it. For a simple introduction to combining conditional statements, well first start with the dog food instructions for my new puppy Peanut. Here, the instructions indicate how much food to feed your dog each day. Then instructions are broken down into dog age and expected size (in pounds/kilograms) and the intersection of these tells you how much food to feed your dog. Even once you figure out how much to feed the dog, theres another conditional statement to figure out whether you feed them twice a day or three times a day. This food chart is basically a conditional statement matrix where you match the conditions on the left side with those on the right side to figure out how much to feed your dog.13 So if we wanted to figure out how much to feed a dog that is three months old and will be 4.4 pounds, wed use the first row on the left (which says 4.4 pounds/2.2 kilograms) and the second columns (which says three months old). When the dog gets to be four months old wed keep the same row but now move one column to the right. In normal English youd say that the dog is four months old and their expected size is 4.4 pounds (2 kg). The language when talking about (and writing code for) a conditional statement in programming is a bit more formal where every condition is spoken as a yes or no question. Here we ask is the dog four months old? and is the expected weight 4.4 pounds. If both are true, then we give the dog the amount of food shown for those conditions. If only one is true, then the whole thing is wrong - we wouldnt want to underfeed or overfeed our dog. In this example, a two four old dog can eat between 5/8th of a cup of food and two cups depending on their expected size. So having only one condition be true isnt enough. Can you see any issue with this conditional statement matrix? It doesnt cover the all possible choices for age and weight combinations. In fact, it is really quite narrow in what it does cover. For example, it covers two and three months, but not any age in between. We can assume that a dog that is 2.5 months old would eat the average of two and three month meal amounts, but wouldnt know for sure. When making your own statements please consider what conditions I am checking for - and, importantly, what Im leaving out. For a real data example, lets say you have crime data from every state between 1960 and 2017. Your research question is did Colorados marijuana legalization affect crime in the state? In that case you want only data from Colorado. Since legalization began in January 2014, you wouldnt need every year, only years some period of time before and after legalization to be able to measure its effect. So you would need to subset based on the state and the year. To make conditional statements with multiple conditions we use | for or and &amp; for and. Condition 1 | Condition 2 2 == 3 | 2 &gt; 1 #&gt; [1] TRUE As it sounds, when using | as long as at least one condition is true (we can include as many conditions as we like) it will return TRUE. Condition 1 &amp; Condition 2 2 == 3 &amp; 2 &gt; 1 #&gt; [1] FALSE For &amp;, all of the conditions must be true. If even one condition is not true it will return FALSE. 11.3 Subsetting a data.frame Earlier we were using a simple vector (collection of values). In this class - and in your own work - you will usually work on an entire data set. These generally come in the form called a data.frame which you can imagine as being like an Excel file with multiple rows and columns. Lets load in data from the Uniform Crime Report (UCR), an FBI data set that well work on in a later lesson. This data has crime data every year from 1960-2020 and for nearly every agency in the country. offenses_known_yearly_1960_2020 &lt;- readRDS(&quot;data/offenses_known_yearly_1960_2020.rds&quot;) Lets peak at the first 6 rows and 6 columns using the square bracket notation [] for data.frames which well explain more below. offenses_known_yearly_1960_2020[1:6, 1:6] #&gt; ori ori9 agency_name state state_abb year #&gt; 1 AK00101 AK0010100 anchorage alaska AK 2020 #&gt; 2 AK00101 AK0010100 anchorage alaska AK 2019 #&gt; 3 AK00101 AK0010100 anchorage alaska AK 2018 #&gt; 4 AK00101 AK0010100 anchorage alaska AK 2017 #&gt; 5 AK00101 AK0010100 anchorage alaska AK 2016 #&gt; 6 AK00101 AK0010100 anchorage alaska AK 2015 The first 6 rows appear to be agency identification info for Anchorage, Alaska from 2017-2012. For good measure lets check how many rows and columns are in this data. This will give us some guidance on subsetting which well see below. nrow() gives us the number of rows and ncol() gives us the number of columns. nrow(offenses_known_yearly_1960_2020) #&gt; [1] 1032307 ncol(offenses_known_yearly_1960_2020) #&gt; [1] 223 This is a large file with 223 columns and over a million rows. Normally we wouldnt want to print out the names of all 223 columns but lets do this here as we want to know the variables available to subset. names(offenses_known_yearly_1960_2020) #&gt; [1] &quot;ori&quot; #&gt; [2] &quot;ori9&quot; #&gt; [3] &quot;agency_name&quot; #&gt; [4] &quot;state&quot; #&gt; [5] &quot;state_abb&quot; #&gt; [6] &quot;year&quot; #&gt; [7] &quot;number_of_months_missing&quot; #&gt; [8] &quot;last_month_reported&quot; #&gt; [9] &quot;arson_number_of_months_missing&quot; #&gt; [10] &quot;arson_last_month_reported&quot; #&gt; [11] &quot;fips_state_code&quot; #&gt; [12] &quot;fips_county_code&quot; #&gt; [13] &quot;fips_state_county_code&quot; #&gt; [14] &quot;fips_place_code&quot; #&gt; [15] &quot;agency_type&quot; #&gt; [16] &quot;crosswalk_agency_name&quot; #&gt; [17] &quot;census_name&quot; #&gt; [18] &quot;longitude&quot; #&gt; [19] &quot;latitude&quot; #&gt; [20] &quot;address_name&quot; #&gt; [21] &quot;address_street_line_1&quot; #&gt; [22] &quot;address_street_line_2&quot; #&gt; [23] &quot;address_city&quot; #&gt; [24] &quot;address_state&quot; #&gt; [25] &quot;address_zip_code&quot; #&gt; [26] &quot;population_group&quot; #&gt; [27] &quot;population_1&quot; #&gt; [28] &quot;population_1_county&quot; #&gt; [29] &quot;population_2&quot; #&gt; [30] &quot;population_2_county&quot; #&gt; [31] &quot;population_3&quot; #&gt; [32] &quot;population_3_county&quot; #&gt; [33] &quot;population&quot; #&gt; [34] &quot;country_division&quot; #&gt; [35] &quot;juvenile_age&quot; #&gt; [36] &quot;core_city_indication&quot; #&gt; [37] &quot;fbi_field_office&quot; #&gt; [38] &quot;followup_indication&quot; #&gt; [39] &quot;zip_code&quot; #&gt; [40] &quot;month_included_in&quot; #&gt; [41] &quot;covered_by_ori&quot; #&gt; [42] &quot;agency_count&quot; #&gt; [43] &quot;special_mailing_group&quot; #&gt; [44] &quot;special_mailing_address&quot; #&gt; [45] &quot;first_line_of_mailing_address&quot; #&gt; [46] &quot;second_line_of_mailing_address&quot; #&gt; [47] &quot;third_line_of_mailing_address&quot; #&gt; [48] &quot;fourth_line_of_mailing_address&quot; #&gt; [49] &quot;officers_killed_by_felony&quot; #&gt; [50] &quot;officers_killed_by_accident&quot; #&gt; [51] &quot;officers_assaulted&quot; #&gt; [52] &quot;actual_murder&quot; #&gt; [53] &quot;actual_manslaughter&quot; #&gt; [54] &quot;actual_rape_total&quot; #&gt; [55] &quot;actual_rape_by_force&quot; #&gt; [56] &quot;actual_rape_attempted&quot; #&gt; [57] &quot;actual_robbery_total&quot; #&gt; [58] &quot;actual_robbery_with_a_gun&quot; #&gt; [59] &quot;actual_robbery_with_a_knife&quot; #&gt; [60] &quot;actual_robbery_other_weapon&quot; #&gt; [61] &quot;actual_robbery_unarmed&quot; #&gt; [62] &quot;actual_assault_total&quot; #&gt; [63] &quot;actual_assault_with_a_gun&quot; #&gt; [64] &quot;actual_assault_with_a_knife&quot; #&gt; [65] &quot;actual_assault_other_weapon&quot; #&gt; [66] &quot;actual_assault_unarmed&quot; #&gt; [67] &quot;actual_assault_simple&quot; #&gt; [68] &quot;actual_burg_total&quot; #&gt; [69] &quot;actual_burg_force_entry&quot; #&gt; [70] &quot;actual_burg_nonforce_entry&quot; #&gt; [71] &quot;actual_burg_attempted&quot; #&gt; [72] &quot;actual_theft_total&quot; #&gt; [73] &quot;actual_mtr_veh_theft_total&quot; #&gt; [74] &quot;actual_mtr_veh_theft_car&quot; #&gt; [75] &quot;actual_mtr_veh_theft_truck&quot; #&gt; [76] &quot;actual_mtr_veh_theft_other&quot; #&gt; [77] &quot;actual_all_crimes&quot; #&gt; [78] &quot;actual_assault_aggravated&quot; #&gt; [79] &quot;actual_index_violent&quot; #&gt; [80] &quot;actual_index_property&quot; #&gt; [81] &quot;actual_index_total&quot; #&gt; [82] &quot;actual_arson_single_occupancy&quot; #&gt; [83] &quot;actual_arson_other_residential&quot; #&gt; [84] &quot;actual_arson_storage&quot; #&gt; [85] &quot;actual_arson_industrial&quot; #&gt; [86] &quot;actual_arson_other_commercial&quot; #&gt; [87] &quot;actual_arson_community_public&quot; #&gt; [88] &quot;actual_arson_all_oth_structures&quot; #&gt; [89] &quot;actual_arson_total_structures&quot; #&gt; [90] &quot;actual_arson_motor_vehicles&quot; #&gt; [91] &quot;actual_arson_other_mobile&quot; #&gt; [92] &quot;actual_arson_total_mobile&quot; #&gt; [93] &quot;actual_arson_all_other&quot; #&gt; [94] &quot;actual_arson_grand_total&quot; #&gt; [95] &quot;tot_clr_murder&quot; #&gt; [96] &quot;tot_clr_manslaughter&quot; #&gt; [97] &quot;tot_clr_rape_total&quot; #&gt; [98] &quot;tot_clr_rape_by_force&quot; #&gt; [99] &quot;tot_clr_rape_attempted&quot; #&gt; [100] &quot;tot_clr_robbery_total&quot; #&gt; [101] &quot;tot_clr_robbery_with_a_gun&quot; #&gt; [102] &quot;tot_clr_robbery_with_a_knife&quot; #&gt; [103] &quot;tot_clr_robbery_other_weapon&quot; #&gt; [104] &quot;tot_clr_robbery_unarmed&quot; #&gt; [105] &quot;tot_clr_assault_total&quot; #&gt; [106] &quot;tot_clr_assault_with_a_gun&quot; #&gt; [107] &quot;tot_clr_assault_with_a_knife&quot; #&gt; [108] &quot;tot_clr_assault_other_weapon&quot; #&gt; [109] &quot;tot_clr_assault_unarmed&quot; #&gt; [110] &quot;tot_clr_assault_simple&quot; #&gt; [111] &quot;tot_clr_burg_total&quot; #&gt; [112] &quot;tot_clr_burg_force_entry&quot; #&gt; [113] &quot;tot_clr_burg_nonforce_entry&quot; #&gt; [114] &quot;tot_clr_burg_attempted&quot; #&gt; [115] &quot;tot_clr_theft_total&quot; #&gt; [116] &quot;tot_clr_mtr_veh_theft_total&quot; #&gt; [117] &quot;tot_clr_mtr_veh_theft_car&quot; #&gt; [118] &quot;tot_clr_mtr_veh_theft_truck&quot; #&gt; [119] &quot;tot_clr_mtr_veh_theft_other&quot; #&gt; [120] &quot;tot_clr_all_crimes&quot; #&gt; [121] &quot;tot_clr_assault_aggravated&quot; #&gt; [122] &quot;tot_clr_index_violent&quot; #&gt; [123] &quot;tot_clr_index_property&quot; #&gt; [124] &quot;tot_clr_index_total&quot; #&gt; [125] &quot;tot_clr_arson_single_occupancy&quot; #&gt; [126] &quot;tot_clr_arson_other_residential&quot; #&gt; [127] &quot;tot_clr_arson_storage&quot; #&gt; [128] &quot;tot_clr_arson_industrial&quot; #&gt; [129] &quot;tot_clr_arson_other_commercial&quot; #&gt; [130] &quot;tot_clr_arson_community_public&quot; #&gt; [131] &quot;tot_clr_arson_all_oth_structures&quot; #&gt; [132] &quot;tot_clr_arson_total_structures&quot; #&gt; [133] &quot;tot_clr_arson_motor_vehicles&quot; #&gt; [134] &quot;tot_clr_arson_other_mobile&quot; #&gt; [135] &quot;tot_clr_arson_total_mobile&quot; #&gt; [136] &quot;tot_clr_arson_all_other&quot; #&gt; [137] &quot;tot_clr_arson_grand_total&quot; #&gt; [138] &quot;clr_18_murder&quot; #&gt; [139] &quot;clr_18_manslaughter&quot; #&gt; [140] &quot;clr_18_rape_total&quot; #&gt; [141] &quot;clr_18_rape_by_force&quot; #&gt; [142] &quot;clr_18_rape_attempted&quot; #&gt; [143] &quot;clr_18_robbery_total&quot; #&gt; [144] &quot;clr_18_robbery_with_a_gun&quot; #&gt; [145] &quot;clr_18_robbery_with_a_knife&quot; #&gt; [146] &quot;clr_18_robbery_other_weapon&quot; #&gt; [147] &quot;clr_18_robbery_unarmed&quot; #&gt; [148] &quot;clr_18_assault_total&quot; #&gt; [149] &quot;clr_18_assault_with_a_gun&quot; #&gt; [150] &quot;clr_18_assault_with_a_knife&quot; #&gt; [151] &quot;clr_18_assault_other_weapon&quot; #&gt; [152] &quot;clr_18_assault_unarmed&quot; #&gt; [153] &quot;clr_18_assault_simple&quot; #&gt; [154] &quot;clr_18_burg_total&quot; #&gt; [155] &quot;clr_18_burg_force_entry&quot; #&gt; [156] &quot;clr_18_burg_nonforce_entry&quot; #&gt; [157] &quot;clr_18_burg_attempted&quot; #&gt; [158] &quot;clr_18_theft_total&quot; #&gt; [159] &quot;clr_18_mtr_veh_theft_total&quot; #&gt; [160] &quot;clr_18_mtr_veh_theft_car&quot; #&gt; [161] &quot;clr_18_mtr_veh_theft_truck&quot; #&gt; [162] &quot;clr_18_mtr_veh_theft_other&quot; #&gt; [163] &quot;clr_18_all_crimes&quot; #&gt; [164] &quot;clr_18_assault_aggravated&quot; #&gt; [165] &quot;clr_18_index_violent&quot; #&gt; [166] &quot;clr_18_index_property&quot; #&gt; [167] &quot;clr_18_index_total&quot; #&gt; [168] &quot;clr_18_arson_single_occupancy&quot; #&gt; [169] &quot;clr_18_arson_other_residential&quot; #&gt; [170] &quot;clr_18_arson_storage&quot; #&gt; [171] &quot;clr_18_arson_industrial&quot; #&gt; [172] &quot;clr_18_arson_other_commercial&quot; #&gt; [173] &quot;clr_18_arson_community_public&quot; #&gt; [174] &quot;clr_18_arson_all_oth_structures&quot; #&gt; [175] &quot;clr_18_arson_total_structures&quot; #&gt; [176] &quot;clr_18_arson_motor_vehicles&quot; #&gt; [177] &quot;clr_18_arson_other_mobile&quot; #&gt; [178] &quot;clr_18_arson_total_mobile&quot; #&gt; [179] &quot;clr_18_arson_all_other&quot; #&gt; [180] &quot;clr_18_arson_grand_total&quot; #&gt; [181] &quot;unfound_murder&quot; #&gt; [182] &quot;unfound_manslaughter&quot; #&gt; [183] &quot;unfound_rape_total&quot; #&gt; [184] &quot;unfound_rape_by_force&quot; #&gt; [185] &quot;unfound_rape_attempted&quot; #&gt; [186] &quot;unfound_robbery_total&quot; #&gt; [187] &quot;unfound_robbery_with_a_gun&quot; #&gt; [188] &quot;unfound_robbery_with_a_knife&quot; #&gt; [189] &quot;unfound_robbery_other_weapon&quot; #&gt; [190] &quot;unfound_robbery_unarmed&quot; #&gt; [191] &quot;unfound_assault_total&quot; #&gt; [192] &quot;unfound_assault_with_a_gun&quot; #&gt; [193] &quot;unfound_assault_with_a_knife&quot; #&gt; [194] &quot;unfound_assault_other_weapon&quot; #&gt; [195] &quot;unfound_assault_unarmed&quot; #&gt; [196] &quot;unfound_assault_simple&quot; #&gt; [197] &quot;unfound_burg_total&quot; #&gt; [198] &quot;unfound_burg_force_entry&quot; #&gt; [199] &quot;unfound_burg_nonforce_entry&quot; #&gt; [200] &quot;unfound_burg_attempted&quot; #&gt; [201] &quot;unfound_theft_total&quot; #&gt; [202] &quot;unfound_mtr_veh_theft_total&quot; #&gt; [203] &quot;unfound_mtr_veh_theft_car&quot; #&gt; [204] &quot;unfound_mtr_veh_theft_truck&quot; #&gt; [205] &quot;unfound_mtr_veh_theft_other&quot; #&gt; [206] &quot;unfound_all_crimes&quot; #&gt; [207] &quot;unfound_assault_aggravated&quot; #&gt; [208] &quot;unfound_index_violent&quot; #&gt; [209] &quot;unfound_index_property&quot; #&gt; [210] &quot;unfound_index_total&quot; #&gt; [211] &quot;unfound_arson_single_occupancy&quot; #&gt; [212] &quot;unfound_arson_other_residential&quot; #&gt; [213] &quot;unfound_arson_storage&quot; #&gt; [214] &quot;unfound_arson_industrial&quot; #&gt; [215] &quot;unfound_arson_other_commercial&quot; #&gt; [216] &quot;unfound_arson_community_public&quot; #&gt; [217] &quot;unfound_arson_all_oth_structures&quot; #&gt; [218] &quot;unfound_arson_total_structures&quot; #&gt; [219] &quot;unfound_arson_motor_vehicles&quot; #&gt; [220] &quot;unfound_arson_other_mobile&quot; #&gt; [221] &quot;unfound_arson_total_mobile&quot; #&gt; [222] &quot;unfound_arson_all_other&quot; #&gt; [223] &quot;unfound_arson_grand_total&quot; Now lets discuss how to subset this data into a smaller data set to answer a specific question. Lets subset the data to answer our above question of did Colorados marijuana legalization affect crime in the state? Like mentioned above, we need data just from Colorado and just for years around the legalization year - we can do 2011-2017 for simplicity. We also dont need all 159 columns in the current data. Lets say were only interested in if murder changes. Wed need the column called actual_murder, the state column (as a check to make sure we subset only Colorado), the year column, the population column, the ori column, and the agency_name column (a real analysis would likely grab geographic variables too to see if changes depended on location but here were just using it as an example). The last two columns - ori and agency_name - arent strictly necessary but would be useful if checking if an agencys values are reasonable when checking for outliers, a step we wont do here. Before explaining how to subset from a data.frame, lets write pseudocode (essentially a description of what we are going to do that is readable to people but isnt real code) for our subset. We want Only rows where the state equals Colorado Only rows where the year is 2011-2017 Only the following columns: actual_murder, state, year, population, ori, agency_name 11.3.1 Select specific columns The way to select a specific column in R is called the dollar sign notation. data$column We write the data name followed by a $ and then the column name. Make sure there are no spaces, quotes, or misspellings (or capitalization issues). Just the data$column exactly as it is spelled. Since we are referring to data already read into R, there should not be any quotes for either the data or the column name. We can do this for the column agency_name in our UCR data. If we wrote this in the console it would print out every single row in the column. Because this data is large (nearly a million rows), I am going to wrap this in head() so it only displays the first 6 rows of the column rather than printing the entire column. head(offenses_known_yearly_1960_2020$agency_name) #&gt; [1] &quot;anchorage&quot; &quot;anchorage&quot; &quot;anchorage&quot; &quot;anchorage&quot; #&gt; [5] &quot;anchorage&quot; &quot;anchorage&quot; Theyre all the same name because Anchorage Police reported many times and are in the data set multiple times. Lets look at the column actual_murder which shows the annual number of murders in that agency. head(offenses_known_yearly_1960_2020$actual_murder) #&gt; [1] 18 32 26 27 28 26 One hint is to write out the data set name in the console and hit the Tab key. Wait a couple of seconds and a popup will appear listing every column in the data set. You can scroll through this and then hit enter to select that column. 11.3.2 Select specific rows In the earlier examples we used square bracket notation [] and just put a number or several numbers in the []. When dealing with data.frames, however, you need an extra step to tell R which columns to keep. The syntax in the square bracket is [row, column] As we did earlier, we start in the square bracket by saying which row we want. Now, since we also have to consider the columns, we need to tell it the number or name (in a vector using c() if more than one name and putting column names in quotes) of the column or columns we want. The exception to this is when we use the dollar sign notation to select a single column. In that case we dont need a comma (and indeed it will give us an error!). Lets see a few examples and then explain why this works the way it does. offenses_known_yearly_1960_2020[1, 1] #&gt; [1] &quot;AK00101&quot; If we input multiple numbers, we can get multiple rows and columns. offenses_known_yearly_1960_2020[1:6, 1:6] #&gt; ori ori9 agency_name state state_abb year #&gt; 1 AK00101 AK0010100 anchorage alaska AK 2020 #&gt; 2 AK00101 AK0010100 anchorage alaska AK 2019 #&gt; 3 AK00101 AK0010100 anchorage alaska AK 2018 #&gt; 4 AK00101 AK0010100 anchorage alaska AK 2017 #&gt; 5 AK00101 AK0010100 anchorage alaska AK 2016 #&gt; 6 AK00101 AK0010100 anchorage alaska AK 2015 The column section also accepts a vector of the names of the columns. These names must be spelled correctly and in quotes. offenses_known_yearly_1960_2020[1:6, c(&quot;ori&quot;, &quot;year&quot;)] #&gt; ori year #&gt; 1 AK00101 2020 #&gt; 2 AK00101 2019 #&gt; 3 AK00101 2018 #&gt; 4 AK00101 2017 #&gt; 5 AK00101 2016 #&gt; 6 AK00101 2015 In cases where we want every row or every column, we just dont put a number. By default, R will return every row/column if you dont specify which ones you want. However, you will still need to include the comma. Here is every column in the first row. Again, for real work wed likely not due this as it will print out hundreds of rows to the console. offenses_known_yearly_1960_2020[1, ] #&gt; ori ori9 agency_name state state_abb year #&gt; 1 AK00101 AK0010100 anchorage alaska AK 2020 #&gt; number_of_months_missing last_month_reported #&gt; 1 0 december #&gt; arson_number_of_months_missing #&gt; 1 0 #&gt; arson_last_month_reported fips_state_code #&gt; 1 december 02 #&gt; fips_county_code fips_state_county_code #&gt; 1 020 02020 #&gt; fips_place_code agency_type #&gt; 1 03000 local police department #&gt; crosswalk_agency_name census_name #&gt; 1 anchorage police department anchorage municipality #&gt; longitude latitude address_name #&gt; 1 -149.284329 61.17425 anchorage police department #&gt; address_street_line_1 address_street_line_2 #&gt; 1 4501 elmore rd &lt;NA&gt; #&gt; address_city address_state address_zip_code #&gt; 1 anchorage ak 99507 #&gt; population_group population_1 #&gt; 1 city 250,000 thru 499,999 286388 #&gt; population_1_county population_2 population_2_county #&gt; 1 0 0 NA #&gt; population_3 population_3_county population #&gt; 1 0 NA 286388 #&gt; country_division juvenile_age core_city_indication #&gt; 1 pacific NA core city of msa #&gt; fbi_field_office followup_indication zip_code #&gt; 1 3030 do not send a follow-up 99507 #&gt; month_included_in covered_by_ori agency_count #&gt; 1 0 &lt;NA&gt; 1 #&gt; special_mailing_group #&gt; 1 the agency is a contributor but not on the mailing list,they are not sent forms. #&gt; special_mailing_address #&gt; 1 not a special mailing address #&gt; first_line_of_mailing_address #&gt; 1 4501 elmore rd #&gt; second_line_of_mailing_address #&gt; 1 &lt;NA&gt; #&gt; third_line_of_mailing_address #&gt; 1 &lt;NA&gt; #&gt; fourth_line_of_mailing_address #&gt; 1 &lt;NA&gt; #&gt; officers_killed_by_felony officers_killed_by_accident #&gt; 1 0 0 #&gt; officers_assaulted actual_murder actual_manslaughter #&gt; 1 464 18 0 #&gt; actual_rape_total actual_rape_by_force #&gt; 1 558 534 #&gt; actual_rape_attempted actual_robbery_total #&gt; 1 24 558 #&gt; actual_robbery_with_a_gun actual_robbery_with_a_knife #&gt; 1 124 65 #&gt; actual_robbery_other_weapon actual_robbery_unarmed #&gt; 1 82 287 #&gt; actual_assault_total actual_assault_with_a_gun #&gt; 1 5777 512 #&gt; actual_assault_with_a_knife #&gt; 1 377 #&gt; actual_assault_other_weapon actual_assault_unarmed #&gt; 1 840 609 #&gt; actual_assault_simple actual_burg_total #&gt; 1 3439 1444 #&gt; actual_burg_force_entry actual_burg_nonforce_entry #&gt; 1 900 453 #&gt; actual_burg_attempted actual_theft_total #&gt; 1 91 7279 #&gt; actual_mtr_veh_theft_total actual_mtr_veh_theft_car #&gt; 1 1149 807 #&gt; actual_mtr_veh_theft_truck actual_mtr_veh_theft_other #&gt; 1 278 64 #&gt; actual_all_crimes actual_assault_aggravated #&gt; 1 16856 2338 #&gt; actual_index_violent actual_index_property #&gt; 1 3472 9945 #&gt; actual_index_total actual_arson_single_occupancy #&gt; 1 13417 6 #&gt; actual_arson_other_residential actual_arson_storage #&gt; 1 16 1 #&gt; actual_arson_industrial actual_arson_other_commercial #&gt; 1 0 10 #&gt; actual_arson_community_public #&gt; 1 7 #&gt; actual_arson_all_oth_structures #&gt; 1 0 #&gt; actual_arson_total_structures #&gt; 1 30 #&gt; actual_arson_motor_vehicles actual_arson_other_mobile #&gt; 1 17 0 #&gt; actual_arson_total_mobile actual_arson_all_other #&gt; 1 17 0 #&gt; actual_arson_grand_total tot_clr_murder #&gt; 1 73 15 #&gt; tot_clr_manslaughter tot_clr_rape_total #&gt; 1 0 46 #&gt; tot_clr_rape_by_force tot_clr_rape_attempted #&gt; 1 41 5 #&gt; tot_clr_robbery_total tot_clr_robbery_with_a_gun #&gt; 1 207 30 #&gt; tot_clr_robbery_with_a_knife #&gt; 1 33 #&gt; tot_clr_robbery_other_weapon tot_clr_robbery_unarmed #&gt; 1 27 117 #&gt; tot_clr_assault_total tot_clr_assault_with_a_gun #&gt; 1 3407 223 #&gt; tot_clr_assault_with_a_knife #&gt; 1 281 #&gt; tot_clr_assault_other_weapon tot_clr_assault_unarmed #&gt; 1 511 428 #&gt; tot_clr_assault_simple tot_clr_burg_total #&gt; 1 1964 237 #&gt; tot_clr_burg_force_entry tot_clr_burg_nonforce_entry #&gt; 1 115 118 #&gt; tot_clr_burg_attempted tot_clr_theft_total #&gt; 1 4 865 #&gt; tot_clr_mtr_veh_theft_total tot_clr_mtr_veh_theft_car #&gt; 1 197 153 #&gt; tot_clr_mtr_veh_theft_truck #&gt; 1 39 #&gt; tot_clr_mtr_veh_theft_other tot_clr_all_crimes #&gt; 1 5 5001 #&gt; tot_clr_assault_aggravated tot_clr_index_violent #&gt; 1 1443 1711 #&gt; tot_clr_index_property tot_clr_index_total #&gt; 1 1326 3037 #&gt; tot_clr_arson_single_occupancy #&gt; 1 2 #&gt; tot_clr_arson_other_residential tot_clr_arson_storage #&gt; 1 8 0 #&gt; tot_clr_arson_industrial #&gt; 1 0 #&gt; tot_clr_arson_other_commercial #&gt; 1 5 #&gt; tot_clr_arson_community_public #&gt; 1 3 #&gt; tot_clr_arson_all_oth_structures #&gt; 1 0 #&gt; tot_clr_arson_total_structures #&gt; 1 13 #&gt; tot_clr_arson_motor_vehicles #&gt; 1 5 #&gt; tot_clr_arson_other_mobile tot_clr_arson_total_mobile #&gt; 1 0 5 #&gt; tot_clr_arson_all_other tot_clr_arson_grand_total #&gt; 1 0 27 #&gt; clr_18_murder clr_18_manslaughter clr_18_rape_total #&gt; 1 0 0 11 #&gt; clr_18_rape_by_force clr_18_rape_attempted #&gt; 1 11 0 #&gt; clr_18_robbery_total clr_18_robbery_with_a_gun #&gt; 1 5 2 #&gt; clr_18_robbery_with_a_knife #&gt; 1 0 #&gt; clr_18_robbery_other_weapon clr_18_robbery_unarmed #&gt; 1 1 2 #&gt; clr_18_assault_total clr_18_assault_with_a_gun #&gt; 1 228 18 #&gt; clr_18_assault_with_a_knife #&gt; 1 13 #&gt; clr_18_assault_other_weapon clr_18_assault_unarmed #&gt; 1 25 12 #&gt; clr_18_assault_simple clr_18_burg_total #&gt; 1 160 4 #&gt; clr_18_burg_force_entry clr_18_burg_nonforce_entry #&gt; 1 4 0 #&gt; clr_18_burg_attempted clr_18_theft_total #&gt; 1 0 36 #&gt; clr_18_mtr_veh_theft_total clr_18_mtr_veh_theft_car #&gt; 1 9 8 #&gt; clr_18_mtr_veh_theft_truck clr_18_mtr_veh_theft_other #&gt; 1 1 0 #&gt; clr_18_all_crimes clr_18_assault_aggravated #&gt; 1 295 68 #&gt; clr_18_index_violent clr_18_index_property #&gt; 1 84 51 #&gt; clr_18_index_total clr_18_arson_single_occupancy #&gt; 1 135 0 #&gt; clr_18_arson_other_residential clr_18_arson_storage #&gt; 1 0 0 #&gt; clr_18_arson_industrial clr_18_arson_other_commercial #&gt; 1 0 0 #&gt; clr_18_arson_community_public #&gt; 1 0 #&gt; clr_18_arson_all_oth_structures #&gt; 1 0 #&gt; clr_18_arson_total_structures #&gt; 1 0 #&gt; clr_18_arson_motor_vehicles clr_18_arson_other_mobile #&gt; 1 0 0 #&gt; clr_18_arson_total_mobile clr_18_arson_all_other #&gt; 1 0 0 #&gt; clr_18_arson_grand_total unfound_murder #&gt; 1 2 4 #&gt; unfound_manslaughter unfound_rape_total #&gt; 1 0 1 #&gt; unfound_rape_by_force unfound_rape_attempted #&gt; 1 1 0 #&gt; unfound_robbery_total unfound_robbery_with_a_gun #&gt; 1 0 0 #&gt; unfound_robbery_with_a_knife #&gt; 1 0 #&gt; unfound_robbery_other_weapon unfound_robbery_unarmed #&gt; 1 0 0 #&gt; unfound_assault_total unfound_assault_with_a_gun #&gt; 1 0 0 #&gt; unfound_assault_with_a_knife #&gt; 1 0 #&gt; unfound_assault_other_weapon unfound_assault_unarmed #&gt; 1 0 0 #&gt; unfound_assault_simple unfound_burg_total #&gt; 1 0 4 #&gt; unfound_burg_force_entry unfound_burg_nonforce_entry #&gt; 1 2 1 #&gt; unfound_burg_attempted unfound_theft_total #&gt; 1 1 43 #&gt; unfound_mtr_veh_theft_total unfound_mtr_veh_theft_car #&gt; 1 37 22 #&gt; unfound_mtr_veh_theft_truck #&gt; 1 15 #&gt; unfound_mtr_veh_theft_other unfound_all_crimes #&gt; 1 0 89 #&gt; unfound_assault_aggravated unfound_index_violent #&gt; 1 0 5 #&gt; unfound_index_property unfound_index_total #&gt; 1 84 89 #&gt; unfound_arson_single_occupancy #&gt; 1 0 #&gt; unfound_arson_other_residential unfound_arson_storage #&gt; 1 0 0 #&gt; unfound_arson_industrial #&gt; 1 0 #&gt; unfound_arson_other_commercial #&gt; 1 0 #&gt; unfound_arson_community_public #&gt; 1 0 #&gt; unfound_arson_all_oth_structures #&gt; 1 0 #&gt; unfound_arson_total_structures #&gt; 1 0 #&gt; unfound_arson_motor_vehicles #&gt; 1 0 #&gt; unfound_arson_other_mobile unfound_arson_total_mobile #&gt; 1 0 0 #&gt; unfound_arson_all_other unfound_arson_grand_total #&gt; 1 0 0 Since there are 223 columns in our data, normally wed want to avoid printing out all of them. And in most cases, we would save the output of subsets to a new object to be used later rather than just printing the output in the console. What happens if we forget the comma? If we put in numbers for both rows and columns but dont include a comma between them it will have an error. offenses_known_yearly_1960_2020[1 1] #&gt; Error: &lt;text&gt;:1:35: unexpected numeric constant #&gt; 1: offenses_known_yearly_1960_2020[1 1 #&gt; ^ If we only put in a single number and no comma, it will return the column that matches that number. Here we have number 1 and it will return the first column. Well wrap it in head() so it doesnt print out a million rows. head(offenses_known_yearly_1960_2020[1]) #&gt; ori #&gt; 1 AK00101 #&gt; 2 AK00101 #&gt; 3 AK00101 #&gt; 4 AK00101 #&gt; 5 AK00101 #&gt; 6 AK00101 Since R thinks you are requesting a column, and we only have 159 columns in the data, asking for any number above 159 will return an error. head(offenses_known_yearly_1960_2020[1000]) #&gt; Error in `[.data.frame`(offenses_known_yearly_1960_2020, 1000): undefined columns selected If you already specify a column using dollar sign notation $, you do not need to indicate any column in the square brackets[]. All you need to do is say which row or rows you want. offenses_known_yearly_1960_2020$agency_name[15] #&gt; [1] &quot;anchorage&quot; So make sure when you want a row from a data.frame you always include the comma! 11.3.3 Subset Colorado data Finally we have the tools to subset our UCR data to just be Colorado from 2011-2017. There are three conditional statements we need to make, two for rows and one for columns. Only rows where the state equals Colorado Only rows where the year is 2011-2017 Only the following columns: actual_murder, state, year, population, ori, agency_name We could use the &amp; operator to say rows must meet condition 1 and condition 2. Since this is an intro lesson, we will do them as two separate conditional statements. For the first step we want to get all rows in the data where the state equals colorado (in this data all state names are lowercase). And at this point we want to keep all columns in the data. So lets make a new object called colorado to save the result of this subset. Remember that we want to put the object to the left of the [] (and touching the []) to make sure it returns the data. Just having the conditional statement will only return TRUE or FALSE values. Since we want all columns, we dont need to put anything after the comma (but we must include the comma!). colorado &lt;- offenses_known_yearly_1960_2020[offenses_known_yearly_1960_2020$state == &quot;colorado&quot;, ] Now we want to get all the rows where the year is 2011-2017. Since we want to check if the year is one of the years 2011-2017, we will use %in% and put the years in a vector 2011:2017. This time our primary data set is colorado, not offenses_known_yearly_1960_2020 since colorado has already subsetted to just the state we want. This is how subsetting generally works. You take a large data set, subset it to a smaller one and continue to subset the smaller one to only the data you want. colorado &lt;- colorado[colorado$year %in% 2011:2017, ] Finally we want the columns stated above and to keep every row in the current data. Since the format is [row, column] in this case we keep the row part blank to indicate that we want every row. colorado &lt;- colorado[ , c(&quot;actual_murder&quot;, &quot;state&quot;, &quot;year&quot;, &quot;population&quot;, &quot;ori&quot;, &quot;agency_name&quot;)] We can do a quick check using the unique() function. The unique() prints all the unique values in a category, such as a column. We will use it on the state and year columns to make sure only the values that we want are present. unique(colorado$state) #&gt; [1] &quot;colorado&quot; unique(colorado$year) #&gt; [1] 2017 2016 2015 2014 2013 2012 2011 The only state is Colorado and the only years are 2011-2017 so our subset worked! This data shows the number of murders in each agency. We want to look at state trends so in Section 12.3 we will sum up all the murders per year and see if marijuana legalization affected it. 11.3.3.1 Subsetting using dplyr Above we did subsetting through whats called the base R method. Base R just means that we use functions that are built into R and dont use any packages. If you encounter some conditional statements that confuse you - which will be more common and you combine many statements together - I encourage you to make a matrix like this yourself. Even if it isnt that complicated, I think its easier to see it written down than to try to keep all of the possible conditions in your head. "],["explore.html", "12 Exploratory data analysis 12.1 Summary and Table 12.2 Graphing 12.3 Aggregating (summaries of groups) 12.4 Pipes in dplyr", " 12 Exploratory data analysis For this chapter youll need the following files, which are available for download here: ucr2017.rda and offenses_known_yearly_1960_2020.rds. When you first start working on new data it is important to spend some time getting familiar with the data. This includes understanding how many rows and columns it has, what each row means (is each row an offender? a victim? crime in a city over a day/month/year?, etc.), and what columns it has. Basically you want to know if the data is capable of answering the question you are asking. While not a comprehensive list, the following is a good start for exploratory data analysis of new data sets. What are the units (what does each row represent?)? What variables are available? What time period does it cover? Are there outliers? How many? Are there missing values? How many? For this lesson we will use a data set of FBI Uniform Crime Reporting (UCR) data for 2017. This data includes every agency that reported their data for all 12 months of the year. Throughout this lesson we will look at some summary statistics for the variables we are interested in and make some basic graphs to visualize the data. First, we need to load the data. Make sure your working directory is set to the folder where the data is. load(&quot;data/ucr2017.rda&quot;) The function head() will print out the first 6 rows of every column in the data. Since we only have 9 columns, we will use this function. Be careful when you have many columns (100+) as printing all of them out makes it read to read. head(ucr2017) #&gt; ori year agency_name state population #&gt; 1 AK00101 2017 anchorage alaska 296188 #&gt; 2 AK00102 2017 fairbanks alaska 32937 #&gt; 3 AK00103 2017 juneau alaska 32344 #&gt; 4 AK00104 2017 ketchikan alaska 8230 #&gt; 5 AK00105 2017 kodiak alaska 6198 #&gt; 6 AK00106 2017 nome alaska 3829 #&gt; actual_murder actual_rape_total actual_robbery_total #&gt; 1 27 391 778 #&gt; 2 10 24 40 #&gt; 3 1 50 46 #&gt; 4 1 19 0 #&gt; 5 0 15 4 #&gt; 6 0 7 0 #&gt; actual_assault_aggravated #&gt; 1 2368 #&gt; 2 131 #&gt; 3 206 #&gt; 4 14 #&gt; 5 41 #&gt; 6 52 From these results it appears that each row is a single agencys annual data for 2017 and the columns show the number of crimes for four crime categories included (the full UCR data contains many more crimes which well see in a later lesson). Finally, we can run names() to print out every column name. We can already see every name from head() but this is useful when we have many columns and dont want to use head(). names(ucr2017) #&gt; [1] &quot;ori&quot; #&gt; [2] &quot;year&quot; #&gt; [3] &quot;agency_name&quot; #&gt; [4] &quot;state&quot; #&gt; [5] &quot;population&quot; #&gt; [6] &quot;actual_murder&quot; #&gt; [7] &quot;actual_rape_total&quot; #&gt; [8] &quot;actual_robbery_total&quot; #&gt; [9] &quot;actual_assault_aggravated&quot; 12.1 Summary and Table An important function in understanding the data you have is summary() which, as discussed in Section 3.5, provides summary statistics on the numeric columns you have. Lets take a look at the results before seeing how to do something similar for categorical columns. summary(ucr2017) #&gt; ori year agency_name #&gt; Length:15764 Min. :2017 Length:15764 #&gt; Class :character 1st Qu.:2017 Class :character #&gt; Mode :character Median :2017 Mode :character #&gt; Mean :2017 #&gt; 3rd Qu.:2017 #&gt; Max. :2017 #&gt; state population actual_murder #&gt; Length:15764 Min. : 0 Min. : 0.000 #&gt; Class :character 1st Qu.: 914 1st Qu.: 0.000 #&gt; Mode :character Median : 4460 Median : 0.000 #&gt; Mean : 19872 Mean : 1.069 #&gt; 3rd Qu.: 15390 3rd Qu.: 0.000 #&gt; Max. :8616333 Max. :653.000 #&gt; actual_rape_total actual_robbery_total #&gt; Min. : -2.000 Min. : -1.00 #&gt; 1st Qu.: 0.000 1st Qu.: 0.00 #&gt; Median : 1.000 Median : 0.00 #&gt; Mean : 8.262 Mean : 19.85 #&gt; 3rd Qu.: 5.000 3rd Qu.: 4.00 #&gt; Max. :2455.000 Max. :13995.00 #&gt; actual_assault_aggravated #&gt; Min. : -1.00 #&gt; 1st Qu.: 1.00 #&gt; Median : 5.00 #&gt; Mean : 49.98 #&gt; 3rd Qu.: 21.00 #&gt; Max. :29771.00 The table() function returns every unique value in a category and how often that value appears. Unlike summary() we cant just put the entire data set into the (), we need to specify a single column. To specify a column you use the dollar sign notation which is data$column. For most functions we use to examine the data as a whole, you can do the same for a specific column. head(ucr2017$agency_name) #&gt; [1] &quot;anchorage&quot; &quot;fairbanks&quot; &quot;juneau&quot; &quot;ketchikan&quot; #&gt; [5] &quot;kodiak&quot; &quot;nome&quot; There are only two columns in our data with categorical values that we can use - year and state so lets use table() on both of them. The columns ori and agency_name are also categorical but as each row of data has a unique ORI and name, running table() on those columns would not be helpful. table(ucr2017$year) #&gt; #&gt; 2017 #&gt; 15764 We can see that every year in our data is 2017, as expected based on the data name. year is a numerical column so why can we use table() on it? R doesnt differentiate between numbers and characters when seeing how often each value appears. If we ran table() on the column actual_murder it would tell us how many times each unique value in the column appeared in the data. That wouldnt be very useful as we dont really care how many times an agency has 7 murders, for example (though looking for how often a numeric column has the value 0 can be helpful in finding likely erroneous data). As numeric variables often have many more unique values than character variables, it also leads to many values being printed, making it harder to understand. For columns where the number of categories is important to us, such as years, states, neighborhoods, we should use table(). table(ucr2017$state) #&gt; #&gt; alabama alaska #&gt; 305 32 #&gt; arizona arkansas #&gt; 107 273 #&gt; california colorado #&gt; 732 213 #&gt; connecticut delaware #&gt; 107 63 #&gt; district of columbia florida #&gt; 3 603 #&gt; georgia guam #&gt; 522 1 #&gt; hawaii idaho #&gt; 4 95 #&gt; illinois indiana #&gt; 696 247 #&gt; iowa kansas #&gt; 216 309 #&gt; kentucky louisiana #&gt; 352 192 #&gt; maine maryland #&gt; 135 152 #&gt; massachusetts michigan #&gt; 346 625 #&gt; minnesota mississippi #&gt; 397 71 #&gt; missouri montana #&gt; 580 108 #&gt; nebraska nevada #&gt; 225 59 #&gt; new hampshire new jersey #&gt; 176 576 #&gt; new mexico new york #&gt; 116 532 #&gt; north carolina north dakota #&gt; 310 108 #&gt; ohio oklahoma #&gt; 532 409 #&gt; oregon pennsylvania #&gt; 172 1473 #&gt; rhode island south carolina #&gt; 49 427 #&gt; south dakota tennessee #&gt; 92 466 #&gt; texas utah #&gt; 999 125 #&gt; vermont virginia #&gt; 85 407 #&gt; washington west virginia #&gt; 250 200 #&gt; wisconsin wyoming #&gt; 433 57 This shows us how many times each state is present in the data. States with a larger population tend to appear more often, this makes sense as those states have more agencies to report. Right now the results are in alphabetical order, but when knowing how frequently something appears, we usually want it ordered by frequency. We can use the sort() function to order the results from table(). Just put the entire table() function inside of the () in sort(). sort(table(ucr2017$state)) #&gt; #&gt; guam district of columbia #&gt; 1 3 #&gt; hawaii alaska #&gt; 4 32 #&gt; rhode island wyoming #&gt; 49 57 #&gt; nevada delaware #&gt; 59 63 #&gt; mississippi vermont #&gt; 71 85 #&gt; south dakota idaho #&gt; 92 95 #&gt; arizona connecticut #&gt; 107 107 #&gt; montana north dakota #&gt; 108 108 #&gt; new mexico utah #&gt; 116 125 #&gt; maine maryland #&gt; 135 152 #&gt; oregon new hampshire #&gt; 172 176 #&gt; louisiana west virginia #&gt; 192 200 #&gt; colorado iowa #&gt; 213 216 #&gt; nebraska indiana #&gt; 225 247 #&gt; washington arkansas #&gt; 250 273 #&gt; alabama kansas #&gt; 305 309 #&gt; north carolina massachusetts #&gt; 310 346 #&gt; kentucky minnesota #&gt; 352 397 #&gt; virginia oklahoma #&gt; 407 409 #&gt; south carolina wisconsin #&gt; 427 433 #&gt; tennessee georgia #&gt; 466 522 #&gt; new york ohio #&gt; 532 532 #&gt; new jersey missouri #&gt; 576 580 #&gt; florida michigan #&gt; 603 625 #&gt; illinois california #&gt; 696 732 #&gt; texas pennsylvania #&gt; 999 1473 And if we want to sort it in decreasing order of frequency, we can use the parameter decreasing in sort() and set it to TRUE. A parameter is just an option used in an R function to change the way the function is used or what output it gives. Almost all functions have these parameters and they are useful if you dont want to use the default setting in the function. This parameter, decreasing changes the sort() output to print from largest to smallest. By default this parameter is set to FALSE and here we say it is equal to TRUE. sort(table(ucr2017$state), decreasing = TRUE) #&gt; #&gt; pennsylvania texas #&gt; 1473 999 #&gt; california illinois #&gt; 732 696 #&gt; michigan florida #&gt; 625 603 #&gt; missouri new jersey #&gt; 580 576 #&gt; new york ohio #&gt; 532 532 #&gt; georgia tennessee #&gt; 522 466 #&gt; wisconsin south carolina #&gt; 433 427 #&gt; oklahoma virginia #&gt; 409 407 #&gt; minnesota kentucky #&gt; 397 352 #&gt; massachusetts north carolina #&gt; 346 310 #&gt; kansas alabama #&gt; 309 305 #&gt; arkansas washington #&gt; 273 250 #&gt; indiana nebraska #&gt; 247 225 #&gt; iowa colorado #&gt; 216 213 #&gt; west virginia louisiana #&gt; 200 192 #&gt; new hampshire oregon #&gt; 176 172 #&gt; maryland maine #&gt; 152 135 #&gt; utah new mexico #&gt; 125 116 #&gt; montana north dakota #&gt; 108 108 #&gt; arizona connecticut #&gt; 107 107 #&gt; idaho south dakota #&gt; 95 92 #&gt; vermont mississippi #&gt; 85 71 #&gt; delaware nevada #&gt; 63 59 #&gt; wyoming rhode island #&gt; 57 49 #&gt; alaska hawaii #&gt; 32 4 #&gt; district of columbia guam #&gt; 3 1 12.2 Graphing We often want to make quick plots of our data to get a visual understanding of the data. We will learn a different - and in my opinion a superior - way to make graphs in Chapters 15 but for now lets use the function plot(). The plot() function is built into R so we dont need to use any packages for it. Lets make a few scatterplots showing the relationship between two variables. With plot() the syntax (how you write the code) is plot(x_axis_variable, y_axis_variable). So all we need to do is give it the variable for the x- and y-axis. Each dot will represent a single agency (a single row in our data). plot(ucr2017$actual_murder, ucr2017$actual_robbery_total) Above we are telling R to plot the number of murders on the x-axis and the number of robberies on the y-axis. This shows the relationship between a citys number of murders and number of robberies. We can see that there is a relationship where more murders is correlated with more robberies. However, there are a huge number of agencies in the bottom-left corner which have very few murders or robberies. This makes sense as - as we see in the summary() above - most agencies are small, with the median population under 5,000 people. To try to avoid that clump of small agencies at the bottom, lets make a new data set of only agencies with a population over 1 million. We will use the filter() function from the dplyr package that was introduced in Chapter @ref(#subsetting-intro). For filter() we need to first include our dataset name, which is ucr2017, and then say our conditional statement. Our conditional statement is that rows in the population column have a value of over 1 million. For the dplyr functions we dont put our column name in quotes. And well save our results into a new object called ucr2017_big_cities Since were using the dplyr package we need to tell R that we want to use it by using library(dplyr). library(dplyr) #&gt; #&gt; Attaching package: &#39;dplyr&#39; #&gt; The following objects are masked from &#39;package:stats&#39;: #&gt; #&gt; filter, lag #&gt; The following objects are masked from &#39;package:base&#39;: #&gt; #&gt; intersect, setdiff, setequal, union ucr2017_big_cities &lt;- filter(ucr2017, population &gt; 1000000) Now we have 18 agencies with a population of over 1 million people. Now we can do the same graph as above but using this new data set. plot(ucr2017_big_cities$actual_murder, ucr2017_big_cities$actual_robbery_total) The problem is somewhat solved. There is still a small clumping of agencies with few robberies or aggravated assaults but the issue is much better. And interestingly the trend is similar with this small subset of data as with all agencies included. To make our graph look better, we can add labels for the axes and a title (there are many options for changing the appears of this graph, we will just use these three). xlab - X-axis label ylab - Y-axis label main - Graph title Like all parameters, we add them in the () of plot() and separate each parameter by a comma. Since we are adding text to write in the plot, all of these parameter inputs must be in quotes. plot(ucr2017_big_cities$actual_murder, ucr2017_big_cities$actual_robbery_total, xlab = &quot;Murder&quot;, ylab = &quot;Robberies&quot;, main = &quot;Relationship between murder and robbery&quot;) 12.3 Aggregating (summaries of groups) Right now we have the number of crimes in each agency. For many policy analyses wed be looking at the effect on the state as a whole, rather than at the agency-level. If we wanted to do this in our data, we would need to aggregate up to the state level. Aggregating data means that we group values at some higher level than they currently are (e.g.Â from agency to state, from day to month, from city street to city neighborhood) and then do some mathematical operation of our choosing (in our case usually sum) to that group. In Section 11.3.3 we started to see if marijuana legalization affected murder in Colorado. We subsetted the data to only include agencies in Colorado from 2011-2017. Now we can continue to answer the question by aggregating to the state-level to see the total number of murders per year. Lets think about how our data are and how we would (theoretically, before we write any code) find that out. Our data is a single row for each agency and we have a column indicating the year the agency reported. So how would be find out how many murders happened in Colorado for each year? Well, first we take all the agencies in 2011 (the first year available) and add up the murders for all agencies that reported that year. Then take all the rows in 2012 and add up their murders. And so on for all the years. To do this in R well be using two new functions from the dplyr package: group_by() and summarize(). These functions do the aggregation process in two steps. First we use group_by() to tell R which columns we want to group our data by - these are the higher level of aggregation columns so in our case will be the year of data (as we will already subset data to only Colorado and only the years 2011 through 2017). Then we need to sum up the number of murders each year. We do this using summarize() and well specify in the function that we want to sum up the data, rather than use some other math on it like finding the average number of murders each year. First, lets load back in the data and then repeat the subsetting code we did in Chapter 11.3.3 to keep only data for Colorado from 2011 through 2017. Well also include the actual_robbery_total column that we excluded in Chapter 11.3.3 so we can see how easy it is to aggregate multiple columns at once using this method. offenses_known_yearly_1960_2020 &lt;- readRDS(&quot;data/offenses_known_yearly_1960_2020.rds&quot;) colorado &lt;- filter(offenses_known_yearly_1960_2020, state == &quot;colorado&quot;, year %in% 2011:2017) colorado &lt;- select(colorado, actual_murder, actual_robbery_total, state, year, population, ori, agency_name) First we must group the data by using the group() by function. Here were just grouping the data by year, but we could group it by multiple columns if we want by adding a comma and then the next column we want. colorado &lt;- group_by(colorado, year) Now we can summarize the data using the summarize() function. As with other dplyr functions the first input is the dataset name. Then we choose our math function (sum, mean, median, etc.) and just apply that function on the column we want. So in our case we want the sum of murders so we use sum() and include the column we want to aggregate inside of sum()s parentheses. summarize(colorado, sum(actual_murder)) #&gt; # A tibble: 7 x 2 #&gt; year `sum(actual_murder)` #&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 2011 154 #&gt; 2 2012 163 #&gt; 3 2013 172 #&gt; 4 2014 148 #&gt; 5 2015 173 #&gt; 6 2016 203 #&gt; 7 2017 218 If we want to aggregate another column we just add a comma after our initial column and add another math operation function and the column we want. Here were also using sum() but we could use different math operations if we want - they dont need to be the same. summarize(colorado, sum(actual_murder), sum(actual_robbery_total)) #&gt; # A tibble: 7 x 3 #&gt; year `sum(actual_murder)` `sum(actual_robbery_total)` #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 2011 154 3287 #&gt; 2 2012 163 3369 #&gt; 3 2013 172 3122 #&gt; 4 2014 148 3021 #&gt; 5 2015 173 3305 #&gt; 6 2016 203 3513 #&gt; 7 2017 218 3811 We could even do different math operations on the same column and wed get multiple columns from it. Lets add another column showing the average number of robberies as an example. summarize(colorado, sum(actual_murder), sum(actual_robbery_total), mean(actual_robbery_total)) #&gt; # A tibble: 7 x 4 #&gt; year `sum(actual_murder)` `sum(actual_robbery_total)` #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 2011 154 3287 #&gt; 2 2012 163 3369 #&gt; 3 2013 172 3122 #&gt; 4 2014 148 3021 #&gt; 5 2015 173 3305 #&gt; 6 2016 203 3513 #&gt; 7 2017 218 3811 #&gt; # ... with 1 more variable: #&gt; # mean(actual_robbery_total) &lt;dbl&gt; By default summarize() calls the columns it makes using what we include in the parentheses. Since we said sum(actual_murder) to get the sum of the murder column, it names that new column sum(actual_murder). Usually well want to name the columns ourselves. We can do this by assigning the summarized column to a name using name = before it. For example, we could write murders = sum(actual_murder) and it will name that column murders instead of sum(actual_murder). Like other things in dplyr functions, we dont need to put quotes around our new column name. Well save this final summarized data into an object called colorado_agg so we can use it to make graphs. And to be able to create crime rates per population, well also find the sum of the population for each year. colorado_agg &lt;- summarize(colorado, murders = sum(actual_murder), robberies = sum(actual_robbery_total), population = sum(population)) colorado_agg #&gt; # A tibble: 7 x 4 #&gt; year murders robberies population #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 2011 154 3287 5155993 #&gt; 2 2012 163 3369 5227884 #&gt; 3 2013 172 3122 5308236 #&gt; 4 2014 148 3021 5402555 #&gt; 5 2015 173 3305 5505856 #&gt; 6 2016 203 3513 5590124 #&gt; 7 2017 218 3811 5661529 Now we can see that the total number of murders increased over time. So can we conclude that marijuana legalization increases murder? No, all this analysis shows is that the years following marijuana legalization, murders increased in Colorado. But that can be due to many reasons other than marijuana. For a proper analysis youd need a comparison area that is similar to Colorado prior to legalization (and didnt legalize marijuana) and see if their murders changes following Colorados legalization. To control for population, well standardize our murder data by creating a murder rate per 100,000 people. We can do this by dividing the murder column by the population column and then multiplying by 100,000. Lets do that and save the result into a new column called murder_rate. colorado_agg$murder_rate &lt;- colorado_agg$murders / colorado_agg$population * 100000 If we also wanted a robbery rate wed do the same with the robberies column. colorado_agg$robbery_rate &lt;- colorado_agg$robberies / colorado_agg$population * 100000 The dplyr package has a helpful function that can do this too, and allows us to do it while writing less code. The mutate() function lets us create or alter columns in our data. Like other dplyr functions we start by including our dataset in the parentheses, and then we can follow standard assignment (covered in Section @ref(#assignment)) though we must use = here and not &lt;-. A benefit of using mutate() is that we dont have to write out our dataset name each time. So wed write murder_rate = murders / population * 100000. And if we wanted to make two (or more) columns at the same time we just add a comma after our first assignment and then do the next assignment. mutate(colorado_agg, murder_rate = murders / population * 100000, robbery_rate = robberies / population * 100000) #&gt; # A tibble: 7 x 6 #&gt; year murders robberies population murder_rate #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 2011 154 3287 5155993 2.99 #&gt; 2 2012 163 3369 5227884 3.12 #&gt; 3 2013 172 3122 5308236 3.24 #&gt; 4 2014 148 3021 5402555 2.74 #&gt; 5 2015 173 3305 5505856 3.14 #&gt; 6 2016 203 3513 5590124 3.63 #&gt; 7 2017 218 3811 5661529 3.85 #&gt; # ... with 1 more variable: robbery_rate &lt;dbl&gt; Mpw lets make a plot of this data showing the murder rate over time. With time-series graphs we want the time variable to be on the x-axis and the numeric variable we are measuring to the on the y-axis. plot(x = colorado_agg$year, y = colorado_agg$murder_rate) By default plot() makes a scatterplot. If we set the parameter type to l it will be a line plot. plot(x = colorado_agg$year, y = colorado_agg$murder_rate, type = &quot;l&quot;) We can add some labels and a title to make this graph easier to read. plot(x = colorado_agg$year, y = colorado_agg$murder_rate, type = &quot;l&quot;, xlab = &quot;Year&quot;, ylab = &quot;Murders per 100k Population&quot;, main = &quot;Murder Rate in Colorado, 2011-2017&quot;) 12.4 Pipes in dplyr To end this chapter well talk about something called a pipe that is a very useful and powerful part of dplyr. colorado &lt;- filter(offenses_known_yearly_1960_2020, state == &quot;colorado&quot;, year %in% 2011:2017) colorado &lt;- select(colorado, actual_murder, actual_robbery_total, state, year, population, ori, agency_name) colorado &lt;- offenses_known_yearly_1960_2020 %&gt;% filter(state == &quot;colorado&quot;, year %in% 2011:2017) %&gt;% select(actual_murder, actual_robbery_total, state, year, population, ori, agency_name) head(colorado) #&gt; actual_murder actual_robbery_total state year #&gt; 1 7 80 colorado 2017 #&gt; 2 11 93 colorado 2016 #&gt; 3 6 68 colorado 2015 #&gt; 4 6 58 colorado 2014 #&gt; 5 7 44 colorado 2013 #&gt; 6 7 55 colorado 2012 #&gt; population ori agency_name #&gt; 1 99940 CO00100 adams #&gt; 2 100526 CO00100 adams #&gt; 3 100266 CO00100 adams #&gt; 4 98569 CO00100 adams #&gt; 5 97146 CO00100 adams #&gt; 6 93542 CO00100 adams colorado &lt;- offenses_known_yearly_1960_2020 %&gt;% filter(state == &quot;colorado&quot;, year %in% 2011:2017) %&gt;% select(actual_murder, actual_robbery_total, state, year, population, ori, agency_name) head(colorado) #&gt; actual_murder actual_robbery_total state year #&gt; 1 7 80 colorado 2017 #&gt; 2 11 93 colorado 2016 #&gt; 3 6 68 colorado 2015 #&gt; 4 6 58 colorado 2014 #&gt; 5 7 44 colorado 2013 #&gt; 6 7 55 colorado 2012 #&gt; population ori agency_name #&gt; 1 99940 CO00100 adams #&gt; 2 100526 CO00100 adams #&gt; 3 100266 CO00100 adams #&gt; 4 98569 CO00100 adams #&gt; 5 97146 CO00100 adams #&gt; 6 93542 CO00100 adams "],["regular-expressions.html", "13 Regular Expressions 13.1 Finding patterns in text with grep() 13.2 Finding and replacing patterns in text with gsub() 13.3 Useful special characters 13.4 Changing capitalization", " 13 Regular Expressions Many word processing programs like Microsoft Word or Google Docs let you search for a pattern - usually a word or phrase - and it will show you where on the page that pattern appears. It also lets you replace that word or phrase with something new. R does the same using the function grep() to search for a pattern and tell you where in the data it appears, and gsub() which lets you search for a pattern and then replace it with a new pattern. grep() - Find gsub() - Find and Replace The grep() function lets you find a pattern in the text and it will return a number saying which element has the pattern (in a data.frame this tells you which row has a match). gsub() lets you input a pattern to find and a pattern to replace it with, just like Find and Replace features elsewhere. You can remember the difference because gsub() has the word sub in it and what it does is substitute text with new text. A useful cheat sheet on regular expressions is available here. For this lesson we will use a vector of 50 crime categories. These are all of the crimes in San Francisco Police data. As well see, there are some issues with the crime names that we need to fix. crimes &lt;- c( &quot;Arson&quot;, &quot;Assault&quot;, &quot;Burglary&quot;, &quot;Case Closure&quot;, &quot;Civil Sidewalks&quot;, &quot;Courtesy Report&quot;, &quot;Disorderly Conduct&quot;, &quot;Drug Offense&quot;, &quot;Drug Violation&quot;, &quot;Embezzlement&quot;, &quot;Family Offense&quot;, &quot;Fire Report&quot;, &quot;Forgery And Counterfeiting&quot;, &quot;Fraud&quot;, &quot;Gambling&quot;, &quot;Homicide&quot;, &quot;Human Trafficking (A), Commercial Sex Acts&quot;, &quot;Human Trafficking, Commercial Sex Acts&quot;, &quot;Juvenile Offenses&quot;, &quot;Larceny Theft&quot;, &quot;Liquor Laws&quot;, &quot;Lost Property&quot;, &quot;Malicious Mischief&quot;, &quot;Miscellaneous Investigation&quot;, &quot;Missing Person&quot;, &quot;Motor Vehicle Theft&quot;, &quot;Motor Vehicle Theft?&quot;, &quot;Non-Criminal&quot;, &quot;Offences Against The Family And Children&quot;, &quot;Other&quot;, &quot;Other Miscellaneous&quot;, &quot;Other Offenses&quot;, &quot;Prostitution&quot;, &quot;Rape&quot;, &quot;Recovered Vehicle&quot;, &quot;Robbery&quot;, &quot;Sex Offense&quot;, &quot;Stolen Property&quot;, &quot;Suicide&quot;, &quot;Suspicious&quot;, &quot;Suspicious Occ&quot;, &quot;Traffic Collision&quot;, &quot;Traffic Violation Arrest&quot;, &quot;Vandalism&quot;, &quot;Vehicle Impounded&quot;, &quot;Vehicle Misplaced&quot;, &quot;Warrant&quot;, &quot;Weapons Carrying Etc&quot;, &quot;Weapons Offence&quot;, &quot;Weapons Offense&quot; ) When looking closely at these crimes it is clear that some may overlap in certain categories such as theft, and there are several duplicates with slight differences in spelling. For example the last two crimes are Weapons Offence and Weapons Offense. These should be the same crime but the first one spelled offense wrong. And take a look at motor vehicle theft. There are two crimes here because one of them adds a question mark at the end for some reason. 13.1 Finding patterns in text with grep() Well start with grep() which allows us to search a vector of data (in R, columns in a data.frame operate the same as a vector) and find where there is a match for the pattern we want to look for. The syntax for grep() is grep(\"pattern\", data) Where pattern is the pattern you are searching for, such as a if you want to find all values with the letter a. The pattern must always be in quotes. data is a vector of strings (such as crimes we made above or a column in a data.frame) that you are searching in to find the pattern. The output of this function is a number which says which element(s) in the vector the pattern was found in. If it returns, for example, the numbers 1 and 3 you know that the first and third element in your vector has the pattern - and no other elements do. It is essentially returning the index where the conditional statement is this pattern present is true. So since our data is crimes our grep() function will be grep(\"\", crimes). What we put in the \"\" is the pattern we want to search for. Lets start with the letter a. grep(&quot;a&quot;, crimes) #&gt; [1] 2 3 4 5 9 11 14 15 17 18 20 21 23 24 28 29 31 #&gt; [18] 34 42 43 44 46 47 48 49 50 It gives us a bunch of numbers where the letter a is present in that element of crimes. What this is useful for is subsetting. We can use grep() to find all values that match a pattern we want and subset to keep just those values. crimes[grep(&quot;a&quot;, crimes)] #&gt; [1] &quot;Assault&quot; #&gt; [2] &quot;Burglary&quot; #&gt; [3] &quot;Case Closure&quot; #&gt; [4] &quot;Civil Sidewalks&quot; #&gt; [5] &quot;Drug Violation&quot; #&gt; [6] &quot;Family Offense&quot; #&gt; [7] &quot;Fraud&quot; #&gt; [8] &quot;Gambling&quot; #&gt; [9] &quot;Human Trafficking (A), Commercial Sex Acts&quot; #&gt; [10] &quot;Human Trafficking, Commercial Sex Acts&quot; #&gt; [11] &quot;Larceny Theft&quot; #&gt; [12] &quot;Liquor Laws&quot; #&gt; [13] &quot;Malicious Mischief&quot; #&gt; [14] &quot;Miscellaneous Investigation&quot; #&gt; [15] &quot;Non-Criminal&quot; #&gt; [16] &quot;Offences Against The Family And Children&quot; #&gt; [17] &quot;Other Miscellaneous&quot; #&gt; [18] &quot;Rape&quot; #&gt; [19] &quot;Traffic Collision&quot; #&gt; [20] &quot;Traffic Violation Arrest&quot; #&gt; [21] &quot;Vandalism&quot; #&gt; [22] &quot;Vehicle Misplaced&quot; #&gt; [23] &quot;Warrant&quot; #&gt; [24] &quot;Weapons Carrying Etc&quot; #&gt; [25] &quot;Weapons Offence&quot; #&gt; [26] &quot;Weapons Offense&quot; Searching for the letter a isnt that useful. Lets say we want to subset the data to only include theft related crimes. From reading the list of crimes we can see there are multiple theft crimes - Larceny Theft, Motor Vehicle Theft, and Motor Vehicle Theft? We may also want to include Stolen Property in this search but well wait until later in this lesson for how to search for multiple patterns. Since those three crimes all have the word Theft in the name we can search for the pattern and it will return only those crimes grep(&quot;Theft&quot;, crimes) #&gt; [1] 20 26 27 crimes[grep(&quot;Theft&quot;, crimes)] #&gt; [1] &quot;Larceny Theft&quot; &quot;Motor Vehicle Theft&quot; #&gt; [3] &quot;Motor Vehicle Theft?&quot; A very useful parameter is value. When we set value to TRUE, it will print out the actual strings that are a match rather than the element number. While this prevents us from using it to subset (since R no longer knows which rows are a match), it is an excellent tool to check if the grep() was successful as we can visually confirm it returns what we want. When we start to learn about special characters which make the patterns more complicated, this will be important. grep(&quot;Theft&quot;, crimes, value = TRUE) #&gt; [1] &quot;Larceny Theft&quot; &quot;Motor Vehicle Theft&quot; #&gt; [3] &quot;Motor Vehicle Theft?&quot; Note that grep() (and gsub()) is case sensitive so you must capitalize properly. grep(&quot;theft&quot;, value = TRUE, crimes) #&gt; character(0) Setting the parameter ignore.case to be TRUE makes grep() ignore capitalization. grep(&quot;theft&quot;, crimes, value = TRUE, ignore.case = TRUE) #&gt; [1] &quot;Larceny Theft&quot; &quot;Motor Vehicle Theft&quot; #&gt; [3] &quot;Motor Vehicle Theft?&quot; If we want to find values which do not match with theft, we can set the parameter invert to TRUE. grep(&quot;theft&quot;, crimes, value = TRUE, ignore.case = TRUE, invert = TRUE) #&gt; [1] &quot;Arson&quot; #&gt; [2] &quot;Assault&quot; #&gt; [3] &quot;Burglary&quot; #&gt; [4] &quot;Case Closure&quot; #&gt; [5] &quot;Civil Sidewalks&quot; #&gt; [6] &quot;Courtesy Report&quot; #&gt; [7] &quot;Disorderly Conduct&quot; #&gt; [8] &quot;Drug Offense&quot; #&gt; [9] &quot;Drug Violation&quot; #&gt; [10] &quot;Embezzlement&quot; #&gt; [11] &quot;Family Offense&quot; #&gt; [12] &quot;Fire Report&quot; #&gt; [13] &quot;Forgery And Counterfeiting&quot; #&gt; [14] &quot;Fraud&quot; #&gt; [15] &quot;Gambling&quot; #&gt; [16] &quot;Homicide&quot; #&gt; [17] &quot;Human Trafficking (A), Commercial Sex Acts&quot; #&gt; [18] &quot;Human Trafficking, Commercial Sex Acts&quot; #&gt; [19] &quot;Juvenile Offenses&quot; #&gt; [20] &quot;Liquor Laws&quot; #&gt; [21] &quot;Lost Property&quot; #&gt; [22] &quot;Malicious Mischief&quot; #&gt; [23] &quot;Miscellaneous Investigation&quot; #&gt; [24] &quot;Missing Person&quot; #&gt; [25] &quot;Non-Criminal&quot; #&gt; [26] &quot;Offences Against The Family And Children&quot; #&gt; [27] &quot;Other&quot; #&gt; [28] &quot;Other Miscellaneous&quot; #&gt; [29] &quot;Other Offenses&quot; #&gt; [30] &quot;Prostitution&quot; #&gt; [31] &quot;Rape&quot; #&gt; [32] &quot;Recovered Vehicle&quot; #&gt; [33] &quot;Robbery&quot; #&gt; [34] &quot;Sex Offense&quot; #&gt; [35] &quot;Stolen Property&quot; #&gt; [36] &quot;Suicide&quot; #&gt; [37] &quot;Suspicious&quot; #&gt; [38] &quot;Suspicious Occ&quot; #&gt; [39] &quot;Traffic Collision&quot; #&gt; [40] &quot;Traffic Violation Arrest&quot; #&gt; [41] &quot;Vandalism&quot; #&gt; [42] &quot;Vehicle Impounded&quot; #&gt; [43] &quot;Vehicle Misplaced&quot; #&gt; [44] &quot;Warrant&quot; #&gt; [45] &quot;Weapons Carrying Etc&quot; #&gt; [46] &quot;Weapons Offence&quot; #&gt; [47] &quot;Weapons Offense&quot; 13.2 Finding and replacing patterns in text with gsub() gsub() takes patterns and replaces them with other patterns. An important use in criminology for gsub() is to fix spelling mistakes in the text such as the way offense was spelled wrong in our data. This will be a standard part of your data cleaning process and is important as a misspelled word can cause significant issues. For example if our previous example of marijuana legalization in Colorado had half of agencies misspelling the name Colorado, aggregating the data by the state (or simply subsetting to just Colorado agencies) would give completely different results as youd lose half your data. gsub() is also useful when you want to take subcategories and change the value to larger categories. For example we could take any crime with the word Theft in it and change the whole crime name to Theft. In our data that would take 3 subcategories of thefts and turn it into a larger category we could aggregate to. This will be useful in city-level data where you may only care about a certain type of crime but it has many subcategories that you need to aggregate. The syntax of gsub() is similar to grep() with the addition of a pattern to replace the pattern we found. gsub(\"find_pattern\", \"replace_pattern\", data) Lets start with a simple example of finding the letter a and replacing it with z. Our data will be the word cat. gsub(&quot;a&quot;, &quot;z&quot;, &quot;cat&quot;) #&gt; [1] &quot;czt&quot; Like grep(), gsub() is case sensitive and has the parameter ignore.case to ignore capitalization. gsub(&quot;A&quot;, &quot;z&quot;, &quot;cat&quot;) #&gt; [1] &quot;cat&quot; gsub(&quot;A&quot;, &quot;z&quot;, &quot;cat&quot;, ignore.case = TRUE) #&gt; [1] &quot;czt&quot; gsub() returns the same data you input but with the pattern already replaced. Above you can see that when using capital A, it returns cat unchanged as it never found the pattern. When ignore.case was set to TRUE it returned czt as it then matched to letter A. We can use gsub() to replace some issues in the crimes data such as Offense being spelled Offence. gsub(&quot;Offence&quot;, &quot;Offense&quot;, crimes) #&gt; [1] &quot;Arson&quot; #&gt; [2] &quot;Assault&quot; #&gt; [3] &quot;Burglary&quot; #&gt; [4] &quot;Case Closure&quot; #&gt; [5] &quot;Civil Sidewalks&quot; #&gt; [6] &quot;Courtesy Report&quot; #&gt; [7] &quot;Disorderly Conduct&quot; #&gt; [8] &quot;Drug Offense&quot; #&gt; [9] &quot;Drug Violation&quot; #&gt; [10] &quot;Embezzlement&quot; #&gt; [11] &quot;Family Offense&quot; #&gt; [12] &quot;Fire Report&quot; #&gt; [13] &quot;Forgery And Counterfeiting&quot; #&gt; [14] &quot;Fraud&quot; #&gt; [15] &quot;Gambling&quot; #&gt; [16] &quot;Homicide&quot; #&gt; [17] &quot;Human Trafficking (A), Commercial Sex Acts&quot; #&gt; [18] &quot;Human Trafficking, Commercial Sex Acts&quot; #&gt; [19] &quot;Juvenile Offenses&quot; #&gt; [20] &quot;Larceny Theft&quot; #&gt; [21] &quot;Liquor Laws&quot; #&gt; [22] &quot;Lost Property&quot; #&gt; [23] &quot;Malicious Mischief&quot; #&gt; [24] &quot;Miscellaneous Investigation&quot; #&gt; [25] &quot;Missing Person&quot; #&gt; [26] &quot;Motor Vehicle Theft&quot; #&gt; [27] &quot;Motor Vehicle Theft?&quot; #&gt; [28] &quot;Non-Criminal&quot; #&gt; [29] &quot;Offenses Against The Family And Children&quot; #&gt; [30] &quot;Other&quot; #&gt; [31] &quot;Other Miscellaneous&quot; #&gt; [32] &quot;Other Offenses&quot; #&gt; [33] &quot;Prostitution&quot; #&gt; [34] &quot;Rape&quot; #&gt; [35] &quot;Recovered Vehicle&quot; #&gt; [36] &quot;Robbery&quot; #&gt; [37] &quot;Sex Offense&quot; #&gt; [38] &quot;Stolen Property&quot; #&gt; [39] &quot;Suicide&quot; #&gt; [40] &quot;Suspicious&quot; #&gt; [41] &quot;Suspicious Occ&quot; #&gt; [42] &quot;Traffic Collision&quot; #&gt; [43] &quot;Traffic Violation Arrest&quot; #&gt; [44] &quot;Vandalism&quot; #&gt; [45] &quot;Vehicle Impounded&quot; #&gt; [46] &quot;Vehicle Misplaced&quot; #&gt; [47] &quot;Warrant&quot; #&gt; [48] &quot;Weapons Carrying Etc&quot; #&gt; [49] &quot;Weapons Offense&quot; #&gt; [50] &quot;Weapons Offense&quot; A useful pattern is an empty string \"\" which says replace whatever the find_pattern is with nothing, deleting it. Lets delete the letter a (lowercase only) from the data. gsub(&quot;a&quot;, &quot;&quot;, crimes) #&gt; [1] &quot;Arson&quot; #&gt; [2] &quot;Assult&quot; #&gt; [3] &quot;Burglry&quot; #&gt; [4] &quot;Cse Closure&quot; #&gt; [5] &quot;Civil Sidewlks&quot; #&gt; [6] &quot;Courtesy Report&quot; #&gt; [7] &quot;Disorderly Conduct&quot; #&gt; [8] &quot;Drug Offense&quot; #&gt; [9] &quot;Drug Violtion&quot; #&gt; [10] &quot;Embezzlement&quot; #&gt; [11] &quot;Fmily Offense&quot; #&gt; [12] &quot;Fire Report&quot; #&gt; [13] &quot;Forgery And Counterfeiting&quot; #&gt; [14] &quot;Frud&quot; #&gt; [15] &quot;Gmbling&quot; #&gt; [16] &quot;Homicide&quot; #&gt; [17] &quot;Humn Trfficking (A), Commercil Sex Acts&quot; #&gt; [18] &quot;Humn Trfficking, Commercil Sex Acts&quot; #&gt; [19] &quot;Juvenile Offenses&quot; #&gt; [20] &quot;Lrceny Theft&quot; #&gt; [21] &quot;Liquor Lws&quot; #&gt; [22] &quot;Lost Property&quot; #&gt; [23] &quot;Mlicious Mischief&quot; #&gt; [24] &quot;Miscellneous Investigtion&quot; #&gt; [25] &quot;Missing Person&quot; #&gt; [26] &quot;Motor Vehicle Theft&quot; #&gt; [27] &quot;Motor Vehicle Theft?&quot; #&gt; [28] &quot;Non-Criminl&quot; #&gt; [29] &quot;Offences Aginst The Fmily And Children&quot; #&gt; [30] &quot;Other&quot; #&gt; [31] &quot;Other Miscellneous&quot; #&gt; [32] &quot;Other Offenses&quot; #&gt; [33] &quot;Prostitution&quot; #&gt; [34] &quot;Rpe&quot; #&gt; [35] &quot;Recovered Vehicle&quot; #&gt; [36] &quot;Robbery&quot; #&gt; [37] &quot;Sex Offense&quot; #&gt; [38] &quot;Stolen Property&quot; #&gt; [39] &quot;Suicide&quot; #&gt; [40] &quot;Suspicious&quot; #&gt; [41] &quot;Suspicious Occ&quot; #&gt; [42] &quot;Trffic Collision&quot; #&gt; [43] &quot;Trffic Violtion Arrest&quot; #&gt; [44] &quot;Vndlism&quot; #&gt; [45] &quot;Vehicle Impounded&quot; #&gt; [46] &quot;Vehicle Misplced&quot; #&gt; [47] &quot;Wrrnt&quot; #&gt; [48] &quot;Wepons Crrying Etc&quot; #&gt; [49] &quot;Wepons Offence&quot; #&gt; [50] &quot;Wepons Offense&quot; 13.3 Useful special characters So far, we have just searched for a single character or word and expected a return only if an exact match was found. Now well discuss a number of characters called special characters that allow us to make more complex grep() and gsub() pattern searches. 13.3.1 Multiple characters [] To search for multiple matches we can put the pattern we want to search for inside square brackets [] (note that we use the same square brackets for subsetting but they operate very differently in this context). For example, we can find all the crimes that contain the letters x, y, or z. The grep() searches if any of the letters inside of the [] are present in our crimes vector. grep(&quot;[xyz]&quot;, crimes, value = TRUE) #&gt; [1] &quot;Burglary&quot; #&gt; [2] &quot;Courtesy Report&quot; #&gt; [3] &quot;Disorderly Conduct&quot; #&gt; [4] &quot;Embezzlement&quot; #&gt; [5] &quot;Family Offense&quot; #&gt; [6] &quot;Forgery And Counterfeiting&quot; #&gt; [7] &quot;Human Trafficking (A), Commercial Sex Acts&quot; #&gt; [8] &quot;Human Trafficking, Commercial Sex Acts&quot; #&gt; [9] &quot;Larceny Theft&quot; #&gt; [10] &quot;Lost Property&quot; #&gt; [11] &quot;Offences Against The Family And Children&quot; #&gt; [12] &quot;Robbery&quot; #&gt; [13] &quot;Sex Offense&quot; #&gt; [14] &quot;Stolen Property&quot; #&gt; [15] &quot;Weapons Carrying Etc&quot; As it searches for any letter inside of the square brackets, the order does not matter. grep(&quot;[zyx]&quot;, crimes, value = TRUE) #&gt; [1] &quot;Burglary&quot; #&gt; [2] &quot;Courtesy Report&quot; #&gt; [3] &quot;Disorderly Conduct&quot; #&gt; [4] &quot;Embezzlement&quot; #&gt; [5] &quot;Family Offense&quot; #&gt; [6] &quot;Forgery And Counterfeiting&quot; #&gt; [7] &quot;Human Trafficking (A), Commercial Sex Acts&quot; #&gt; [8] &quot;Human Trafficking, Commercial Sex Acts&quot; #&gt; [9] &quot;Larceny Theft&quot; #&gt; [10] &quot;Lost Property&quot; #&gt; [11] &quot;Offences Against The Family And Children&quot; #&gt; [12] &quot;Robbery&quot; #&gt; [13] &quot;Sex Offense&quot; #&gt; [14] &quot;Stolen Property&quot; #&gt; [15] &quot;Weapons Carrying Etc&quot; This also works for numbers though we do not have any numbers in the data. grep(&quot;[01234567890]&quot;, crimes, value = TRUE) #&gt; character(0) If we wanted to search for a pattern, such as vowels, that is repeated we could put multiple [] patterns together. We will see another way to search for a repeated pattern soon. grep(&quot;[aeiou][aeiou][aeiou]&quot;, crimes, value = TRUE) #&gt; [1] &quot;Malicious Mischief&quot; #&gt; [2] &quot;Miscellaneous Investigation&quot; #&gt; [3] &quot;Other Miscellaneous&quot; #&gt; [4] &quot;Suspicious&quot; #&gt; [5] &quot;Suspicious Occ&quot; Inside the [] we can also use the - to make intervals between certain values. For numbers, n-m means any number between n and m (inclusive). For letters, a-z means all lowercase letters and A-Z means all uppercase letters in that range (inclusive). grep(&quot;[x-z]&quot;, crimes, value = TRUE) #&gt; [1] &quot;Burglary&quot; #&gt; [2] &quot;Courtesy Report&quot; #&gt; [3] &quot;Disorderly Conduct&quot; #&gt; [4] &quot;Embezzlement&quot; #&gt; [5] &quot;Family Offense&quot; #&gt; [6] &quot;Forgery And Counterfeiting&quot; #&gt; [7] &quot;Human Trafficking (A), Commercial Sex Acts&quot; #&gt; [8] &quot;Human Trafficking, Commercial Sex Acts&quot; #&gt; [9] &quot;Larceny Theft&quot; #&gt; [10] &quot;Lost Property&quot; #&gt; [11] &quot;Offences Against The Family And Children&quot; #&gt; [12] &quot;Robbery&quot; #&gt; [13] &quot;Sex Offense&quot; #&gt; [14] &quot;Stolen Property&quot; #&gt; [15] &quot;Weapons Carrying Etc&quot; 13.3.2 n-many of previous character {n} {n} means the preceding item will be matched exactly n times. We can use it to rewrite the above grep() to saw the values in the [] should be repeated three times. grep(&quot;[aeiou]{3}&quot;, crimes, value = TRUE) #&gt; [1] &quot;Malicious Mischief&quot; #&gt; [2] &quot;Miscellaneous Investigation&quot; #&gt; [3] &quot;Other Miscellaneous&quot; #&gt; [4] &quot;Suspicious&quot; #&gt; [5] &quot;Suspicious Occ&quot; 13.3.3 n-many to m-many of previous character {n,m} While {n} says the previous character (or characters inside a []) must be present exactly n times, we can allow a range by using {n,m}. Here the previous character must be present between n and m times. We can check for values where there are 2-3 vowels in a row. Note that there cannot be a space before or after the comma. grep(&quot;[aeiou]{2,3}&quot;, crimes, value = TRUE) #&gt; [1] &quot;Assault&quot; #&gt; [2] &quot;Courtesy Report&quot; #&gt; [3] &quot;Drug Violation&quot; #&gt; [4] &quot;Forgery And Counterfeiting&quot; #&gt; [5] &quot;Fraud&quot; #&gt; [6] &quot;Human Trafficking (A), Commercial Sex Acts&quot; #&gt; [7] &quot;Human Trafficking, Commercial Sex Acts&quot; #&gt; [8] &quot;Liquor Laws&quot; #&gt; [9] &quot;Malicious Mischief&quot; #&gt; [10] &quot;Miscellaneous Investigation&quot; #&gt; [11] &quot;Offences Against The Family And Children&quot; #&gt; [12] &quot;Other Miscellaneous&quot; #&gt; [13] &quot;Prostitution&quot; #&gt; [14] &quot;Suicide&quot; #&gt; [15] &quot;Suspicious&quot; #&gt; [16] &quot;Suspicious Occ&quot; #&gt; [17] &quot;Traffic Collision&quot; #&gt; [18] &quot;Traffic Violation Arrest&quot; #&gt; [19] &quot;Vehicle Impounded&quot; #&gt; [20] &quot;Weapons Carrying Etc&quot; #&gt; [21] &quot;Weapons Offence&quot; #&gt; [22] &quot;Weapons Offense&quot; If we wanted only crimes with exactly three vowels in a row wed use {3,3}. grep(&quot;[aeiou]{3,3}&quot;, crimes, value = TRUE) #&gt; [1] &quot;Malicious Mischief&quot; #&gt; [2] &quot;Miscellaneous Investigation&quot; #&gt; [3] &quot;Other Miscellaneous&quot; #&gt; [4] &quot;Suspicious&quot; #&gt; [5] &quot;Suspicious Occ&quot; If we leave n blank, such as {,m} it says, previous character must be present up to m times. grep(&quot;[aeiou]{,3}&quot;, crimes, value = TRUE) #&gt; [1] &quot;Arson&quot; #&gt; [2] &quot;Assault&quot; #&gt; [3] &quot;Burglary&quot; #&gt; [4] &quot;Case Closure&quot; #&gt; [5] &quot;Civil Sidewalks&quot; #&gt; [6] &quot;Courtesy Report&quot; #&gt; [7] &quot;Disorderly Conduct&quot; #&gt; [8] &quot;Drug Offense&quot; #&gt; [9] &quot;Drug Violation&quot; #&gt; [10] &quot;Embezzlement&quot; #&gt; [11] &quot;Family Offense&quot; #&gt; [12] &quot;Fire Report&quot; #&gt; [13] &quot;Forgery And Counterfeiting&quot; #&gt; [14] &quot;Fraud&quot; #&gt; [15] &quot;Gambling&quot; #&gt; [16] &quot;Homicide&quot; #&gt; [17] &quot;Human Trafficking (A), Commercial Sex Acts&quot; #&gt; [18] &quot;Human Trafficking, Commercial Sex Acts&quot; #&gt; [19] &quot;Juvenile Offenses&quot; #&gt; [20] &quot;Larceny Theft&quot; #&gt; [21] &quot;Liquor Laws&quot; #&gt; [22] &quot;Lost Property&quot; #&gt; [23] &quot;Malicious Mischief&quot; #&gt; [24] &quot;Miscellaneous Investigation&quot; #&gt; [25] &quot;Missing Person&quot; #&gt; [26] &quot;Motor Vehicle Theft&quot; #&gt; [27] &quot;Motor Vehicle Theft?&quot; #&gt; [28] &quot;Non-Criminal&quot; #&gt; [29] &quot;Offences Against The Family And Children&quot; #&gt; [30] &quot;Other&quot; #&gt; [31] &quot;Other Miscellaneous&quot; #&gt; [32] &quot;Other Offenses&quot; #&gt; [33] &quot;Prostitution&quot; #&gt; [34] &quot;Rape&quot; #&gt; [35] &quot;Recovered Vehicle&quot; #&gt; [36] &quot;Robbery&quot; #&gt; [37] &quot;Sex Offense&quot; #&gt; [38] &quot;Stolen Property&quot; #&gt; [39] &quot;Suicide&quot; #&gt; [40] &quot;Suspicious&quot; #&gt; [41] &quot;Suspicious Occ&quot; #&gt; [42] &quot;Traffic Collision&quot; #&gt; [43] &quot;Traffic Violation Arrest&quot; #&gt; [44] &quot;Vandalism&quot; #&gt; [45] &quot;Vehicle Impounded&quot; #&gt; [46] &quot;Vehicle Misplaced&quot; #&gt; [47] &quot;Warrant&quot; #&gt; [48] &quot;Weapons Carrying Etc&quot; #&gt; [49] &quot;Weapons Offence&quot; #&gt; [50] &quot;Weapons Offense&quot; This returns every crime as up to m times includes zero times. And the same works for leaving m blank but it will be present at least n times. grep(&quot;[aeiou]{3,}&quot;, crimes, value = TRUE) #&gt; [1] &quot;Malicious Mischief&quot; #&gt; [2] &quot;Miscellaneous Investigation&quot; #&gt; [3] &quot;Other Miscellaneous&quot; #&gt; [4] &quot;Suspicious&quot; #&gt; [5] &quot;Suspicious Occ&quot; 13.3.4 Start of string The ^ symbol (called a caret) signifies that what follows it is the start of the string. We put the ^ at the beginning of the quotes and then anything that follows it must be the very start of the string. As an example lets search for Family. Our data has both the Family Offense crime and the Offences Against The Family And Children crime (which likely are the same crime written differently). If we use ^ then we should only have the first one returned. grep(&quot;^Family&quot;, crimes, value = TRUE) #&gt; [1] &quot;Family Offense&quot; 13.3.5 End of string $ The dollar sign $ acts similar to the caret ^ except that it signifies that the value before it is the end of the string. We put the $ at the very end of our search pattern and whatever character is before it is the end of the string. For example, lets search for all crimes that end with the word Theft. grep(&quot;Theft$&quot;, crimes, value = TRUE) #&gt; [1] &quot;Larceny Theft&quot; &quot;Motor Vehicle Theft&quot; Note that the crime Motor Vehicle Theft? doesnt get selected as it ends with a question mark. 13.3.6 Anything . The . symbol is a stand-in for any value. This is useful when you arent sure about every part of the pattern you are searching. It can also be used when there are slight differences in words such as our incorrect Offence and Offense. We can replace the c and s with the .. grep(&quot;Weapons Offen.e&quot;, crimes, value = TRUE) #&gt; [1] &quot;Weapons Offence&quot; &quot;Weapons Offense&quot; 13.3.7 One or more of previous + The + means that the character immediately before it is present at least one time. This is the same as writing {1,}. If we wanted to find all values with only two words, we would start with some number of letters followed by a space followed by some more letters and the string would end. grep(&quot;^[A-Za-z]+ [A-Za-z]+$&quot;, crimes, value = TRUE) #&gt; [1] &quot;Case Closure&quot; #&gt; [2] &quot;Civil Sidewalks&quot; #&gt; [3] &quot;Courtesy Report&quot; #&gt; [4] &quot;Disorderly Conduct&quot; #&gt; [5] &quot;Drug Offense&quot; #&gt; [6] &quot;Drug Violation&quot; #&gt; [7] &quot;Family Offense&quot; #&gt; [8] &quot;Fire Report&quot; #&gt; [9] &quot;Juvenile Offenses&quot; #&gt; [10] &quot;Larceny Theft&quot; #&gt; [11] &quot;Liquor Laws&quot; #&gt; [12] &quot;Lost Property&quot; #&gt; [13] &quot;Malicious Mischief&quot; #&gt; [14] &quot;Miscellaneous Investigation&quot; #&gt; [15] &quot;Missing Person&quot; #&gt; [16] &quot;Other Miscellaneous&quot; #&gt; [17] &quot;Other Offenses&quot; #&gt; [18] &quot;Recovered Vehicle&quot; #&gt; [19] &quot;Sex Offense&quot; #&gt; [20] &quot;Stolen Property&quot; #&gt; [21] &quot;Suspicious Occ&quot; #&gt; [22] &quot;Traffic Collision&quot; #&gt; [23] &quot;Vehicle Impounded&quot; #&gt; [24] &quot;Vehicle Misplaced&quot; #&gt; [25] &quot;Weapons Offence&quot; #&gt; [26] &quot;Weapons Offense&quot; 13.3.8 Zero or more of previous * The * special character says match zero or more of the previous character and is the same as {0,}. Combining . with * is powerful when used in gsub() to delete text before or after a pattern. Lets write a pattern that searches the text for the word Weapons and then deletes any text after that. Our pattern would be \"Weapons.*\" which is the word Weapons followed by anything zero or more times. gsub(&quot;Weapons.*&quot;, &quot;Weapons&quot;, crimes) #&gt; [1] &quot;Arson&quot; #&gt; [2] &quot;Assault&quot; #&gt; [3] &quot;Burglary&quot; #&gt; [4] &quot;Case Closure&quot; #&gt; [5] &quot;Civil Sidewalks&quot; #&gt; [6] &quot;Courtesy Report&quot; #&gt; [7] &quot;Disorderly Conduct&quot; #&gt; [8] &quot;Drug Offense&quot; #&gt; [9] &quot;Drug Violation&quot; #&gt; [10] &quot;Embezzlement&quot; #&gt; [11] &quot;Family Offense&quot; #&gt; [12] &quot;Fire Report&quot; #&gt; [13] &quot;Forgery And Counterfeiting&quot; #&gt; [14] &quot;Fraud&quot; #&gt; [15] &quot;Gambling&quot; #&gt; [16] &quot;Homicide&quot; #&gt; [17] &quot;Human Trafficking (A), Commercial Sex Acts&quot; #&gt; [18] &quot;Human Trafficking, Commercial Sex Acts&quot; #&gt; [19] &quot;Juvenile Offenses&quot; #&gt; [20] &quot;Larceny Theft&quot; #&gt; [21] &quot;Liquor Laws&quot; #&gt; [22] &quot;Lost Property&quot; #&gt; [23] &quot;Malicious Mischief&quot; #&gt; [24] &quot;Miscellaneous Investigation&quot; #&gt; [25] &quot;Missing Person&quot; #&gt; [26] &quot;Motor Vehicle Theft&quot; #&gt; [27] &quot;Motor Vehicle Theft?&quot; #&gt; [28] &quot;Non-Criminal&quot; #&gt; [29] &quot;Offences Against The Family And Children&quot; #&gt; [30] &quot;Other&quot; #&gt; [31] &quot;Other Miscellaneous&quot; #&gt; [32] &quot;Other Offenses&quot; #&gt; [33] &quot;Prostitution&quot; #&gt; [34] &quot;Rape&quot; #&gt; [35] &quot;Recovered Vehicle&quot; #&gt; [36] &quot;Robbery&quot; #&gt; [37] &quot;Sex Offense&quot; #&gt; [38] &quot;Stolen Property&quot; #&gt; [39] &quot;Suicide&quot; #&gt; [40] &quot;Suspicious&quot; #&gt; [41] &quot;Suspicious Occ&quot; #&gt; [42] &quot;Traffic Collision&quot; #&gt; [43] &quot;Traffic Violation Arrest&quot; #&gt; [44] &quot;Vandalism&quot; #&gt; [45] &quot;Vehicle Impounded&quot; #&gt; [46] &quot;Vehicle Misplaced&quot; #&gt; [47] &quot;Warrant&quot; #&gt; [48] &quot;Weapons&quot; #&gt; [49] &quot;Weapons&quot; #&gt; [50] &quot;Weapons&quot; And now our last three crimes are all identical. 13.3.9 Multiple patterns | The vertical bar | special character allows us to check for multiple patterns. It essentially functions as pattern A or Pattern B with the | symbol replacing the word or (and making sure to not have any space between patterns.). To check our crimes for the word Drug or the word Weapons we could write Drug|Weapon which searches for Drug or Weapons in the text. grep(&quot;Drug|Weapons&quot;, crimes, value = TRUE) #&gt; [1] &quot;Drug Offense&quot; &quot;Drug Violation&quot; #&gt; [3] &quot;Weapons Carrying Etc&quot; &quot;Weapons Offence&quot; #&gt; [5] &quot;Weapons Offense&quot; 13.3.10 Parentheses () Parentheses act similar to the square brackets [] where we want everything inside but with parentheses the values must be in the proper order. grep(&quot;(Offense)&quot;, crimes, value = TRUE) #&gt; [1] &quot;Drug Offense&quot; &quot;Family Offense&quot; #&gt; [3] &quot;Juvenile Offenses&quot; &quot;Other Offenses&quot; #&gt; [5] &quot;Sex Offense&quot; &quot;Weapons Offense&quot; Running the above code returns the same results as if we didnt include the parentheses. The usefulness of parentheses comes when combining it with the | symbol to be able to check (X|Y) Z), which says, look for either X or Y which must be followed by Z. Running just (Offense) returns values for multiple types of offenses. Lets say we just care about Drug and Weapon Offenses. We can search for Offense normally and combine () and | to say, search for either the wordDrug\" or the word Family and they should be followed by the word Offense. grep(&quot;(Drug|Weapons) Offense&quot;, crimes, value = TRUE) #&gt; [1] &quot;Drug Offense&quot; &quot;Weapons Offense&quot; 13.3.11 Optional text ? The question mark indicates that the character immediately before the ? is optional. Lets search for the term offens and add a ? at the end. This says search for the pattern offen and we expect an exact match for that pattern. And if the letter s follows offen return that too, but it isnt required to be there. grep(&quot;Offens?&quot;, crimes, value = TRUE) #&gt; [1] &quot;Drug Offense&quot; #&gt; [2] &quot;Family Offense&quot; #&gt; [3] &quot;Juvenile Offenses&quot; #&gt; [4] &quot;Offences Against The Family And Children&quot; #&gt; [5] &quot;Other Offenses&quot; #&gt; [6] &quot;Sex Offense&quot; #&gt; [7] &quot;Weapons Offence&quot; #&gt; [8] &quot;Weapons Offense&quot; We can further combine it with () and | to get both spellings of Weapon Offense. grep(&quot;(Drug|Weapons) Offens?&quot;, crimes, value = TRUE) #&gt; [1] &quot;Drug Offense&quot; &quot;Weapons Offence&quot; #&gt; [3] &quot;Weapons Offense&quot; 13.4 Changing capitalization If youre dealing with data where the only difference is capitalization (as is common in crime data) instead of using gsub() to change individual values, you can use the functions toupper() and tolower() to change every letters capitalization. These functions take as an input a vector of strings (or a column from a data.frame) and return those strings either upper or lowercase. toupper(crimes) #&gt; [1] &quot;ARSON&quot; #&gt; [2] &quot;ASSAULT&quot; #&gt; [3] &quot;BURGLARY&quot; #&gt; [4] &quot;CASE CLOSURE&quot; #&gt; [5] &quot;CIVIL SIDEWALKS&quot; #&gt; [6] &quot;COURTESY REPORT&quot; #&gt; [7] &quot;DISORDERLY CONDUCT&quot; #&gt; [8] &quot;DRUG OFFENSE&quot; #&gt; [9] &quot;DRUG VIOLATION&quot; #&gt; [10] &quot;EMBEZZLEMENT&quot; #&gt; [11] &quot;FAMILY OFFENSE&quot; #&gt; [12] &quot;FIRE REPORT&quot; #&gt; [13] &quot;FORGERY AND COUNTERFEITING&quot; #&gt; [14] &quot;FRAUD&quot; #&gt; [15] &quot;GAMBLING&quot; #&gt; [16] &quot;HOMICIDE&quot; #&gt; [17] &quot;HUMAN TRAFFICKING (A), COMMERCIAL SEX ACTS&quot; #&gt; [18] &quot;HUMAN TRAFFICKING, COMMERCIAL SEX ACTS&quot; #&gt; [19] &quot;JUVENILE OFFENSES&quot; #&gt; [20] &quot;LARCENY THEFT&quot; #&gt; [21] &quot;LIQUOR LAWS&quot; #&gt; [22] &quot;LOST PROPERTY&quot; #&gt; [23] &quot;MALICIOUS MISCHIEF&quot; #&gt; [24] &quot;MISCELLANEOUS INVESTIGATION&quot; #&gt; [25] &quot;MISSING PERSON&quot; #&gt; [26] &quot;MOTOR VEHICLE THEFT&quot; #&gt; [27] &quot;MOTOR VEHICLE THEFT?&quot; #&gt; [28] &quot;NON-CRIMINAL&quot; #&gt; [29] &quot;OFFENCES AGAINST THE FAMILY AND CHILDREN&quot; #&gt; [30] &quot;OTHER&quot; #&gt; [31] &quot;OTHER MISCELLANEOUS&quot; #&gt; [32] &quot;OTHER OFFENSES&quot; #&gt; [33] &quot;PROSTITUTION&quot; #&gt; [34] &quot;RAPE&quot; #&gt; [35] &quot;RECOVERED VEHICLE&quot; #&gt; [36] &quot;ROBBERY&quot; #&gt; [37] &quot;SEX OFFENSE&quot; #&gt; [38] &quot;STOLEN PROPERTY&quot; #&gt; [39] &quot;SUICIDE&quot; #&gt; [40] &quot;SUSPICIOUS&quot; #&gt; [41] &quot;SUSPICIOUS OCC&quot; #&gt; [42] &quot;TRAFFIC COLLISION&quot; #&gt; [43] &quot;TRAFFIC VIOLATION ARREST&quot; #&gt; [44] &quot;VANDALISM&quot; #&gt; [45] &quot;VEHICLE IMPOUNDED&quot; #&gt; [46] &quot;VEHICLE MISPLACED&quot; #&gt; [47] &quot;WARRANT&quot; #&gt; [48] &quot;WEAPONS CARRYING ETC&quot; #&gt; [49] &quot;WEAPONS OFFENCE&quot; #&gt; [50] &quot;WEAPONS OFFENSE&quot; tolower(crimes) #&gt; [1] &quot;arson&quot; #&gt; [2] &quot;assault&quot; #&gt; [3] &quot;burglary&quot; #&gt; [4] &quot;case closure&quot; #&gt; [5] &quot;civil sidewalks&quot; #&gt; [6] &quot;courtesy report&quot; #&gt; [7] &quot;disorderly conduct&quot; #&gt; [8] &quot;drug offense&quot; #&gt; [9] &quot;drug violation&quot; #&gt; [10] &quot;embezzlement&quot; #&gt; [11] &quot;family offense&quot; #&gt; [12] &quot;fire report&quot; #&gt; [13] &quot;forgery and counterfeiting&quot; #&gt; [14] &quot;fraud&quot; #&gt; [15] &quot;gambling&quot; #&gt; [16] &quot;homicide&quot; #&gt; [17] &quot;human trafficking (a), commercial sex acts&quot; #&gt; [18] &quot;human trafficking, commercial sex acts&quot; #&gt; [19] &quot;juvenile offenses&quot; #&gt; [20] &quot;larceny theft&quot; #&gt; [21] &quot;liquor laws&quot; #&gt; [22] &quot;lost property&quot; #&gt; [23] &quot;malicious mischief&quot; #&gt; [24] &quot;miscellaneous investigation&quot; #&gt; [25] &quot;missing person&quot; #&gt; [26] &quot;motor vehicle theft&quot; #&gt; [27] &quot;motor vehicle theft?&quot; #&gt; [28] &quot;non-criminal&quot; #&gt; [29] &quot;offences against the family and children&quot; #&gt; [30] &quot;other&quot; #&gt; [31] &quot;other miscellaneous&quot; #&gt; [32] &quot;other offenses&quot; #&gt; [33] &quot;prostitution&quot; #&gt; [34] &quot;rape&quot; #&gt; [35] &quot;recovered vehicle&quot; #&gt; [36] &quot;robbery&quot; #&gt; [37] &quot;sex offense&quot; #&gt; [38] &quot;stolen property&quot; #&gt; [39] &quot;suicide&quot; #&gt; [40] &quot;suspicious&quot; #&gt; [41] &quot;suspicious occ&quot; #&gt; [42] &quot;traffic collision&quot; #&gt; [43] &quot;traffic violation arrest&quot; #&gt; [44] &quot;vandalism&quot; #&gt; [45] &quot;vehicle impounded&quot; #&gt; [46] &quot;vehicle misplaced&quot; #&gt; [47] &quot;warrant&quot; #&gt; [48] &quot;weapons carrying etc&quot; #&gt; [49] &quot;weapons offence&quot; #&gt; [50] &quot;weapons offense&quot; "],["reshaping.html", "14 Reshaping data", " 14 Reshaping data For this chapter youll need the following file, which are available for download here: sqf-2019.xlsx. https://www1.nyc.gov/site/nypd/stats/reports-analysis/stopfrisk.page "],["graphing-intro.html", "15 Graphing with ggplot2 15.1 What does the data look like? 15.2 Graphing data 15.3 Time-Series Plots 15.4 Scatter Plots 15.5 Color blindness", " 15 Graphing with ggplot2 For this chapter youll need the following file, which is available for download here: apparent_per_capita_alcohol_consumption.rda. Weve made some simple graphs earlier; in this lesson we will use the package ggplot2 to make simple and elegant looking graphs. The gg part of ggplot2 stands for grammar of graphics which is the idea that most graphs can be made using the same few pieces. Well get into those pieces during this lesson. For a useful cheat sheet for this package see here install.packages(&quot;ggplot2&quot;) library(ggplot2) When working with new data, Its often useful to quickly graph the data to try to understand what youre working with. It is also useful when understanding how much to trust the data. The data we will work on is data about alcohol consumption in U.S. states from 1977-2017 from the National Institute of Health. It contains the per capita alcohol consumption for each state for every year. Their method to determine per capita consumption is amount of alcohol sold / number of people aged 14+ living in the state. More details on the data are available here. Now we need to load the data. load(&quot;data/apparent_per_capita_alcohol_consumption.rda&quot;) The name of the data is quite long so for convenience lets copy it to a new object with a better name, alcohol. alcohol &lt;- apparent_per_capita_alcohol_consumption The original data has every state, region, and the US as a whole. For this lesson were using data subsetted to just include states. For now lets just look at Pennsylvania. penn_alcohol &lt;- alcohol[alcohol$state == &quot;pennsylvania&quot;, ] 15.1 What does the data look like? Before graphing, its helpful to see what the data includes. An important thing to check is what variables are available and the units of these variables. names(penn_alcohol) #&gt; [1] &quot;state&quot; #&gt; [2] &quot;year&quot; #&gt; [3] &quot;ethanol_beer_gallons_per_capita&quot; #&gt; [4] &quot;ethanol_wine_gallons_per_capita&quot; #&gt; [5] &quot;ethanol_spirit_gallons_per_capita&quot; #&gt; [6] &quot;ethanol_all_drinks_gallons_per_capita&quot; #&gt; [7] &quot;number_of_beers&quot; #&gt; [8] &quot;number_of_glasses_wine&quot; #&gt; [9] &quot;number_of_shots_liquor&quot; #&gt; [10] &quot;number_of_drinks_total&quot; summary(penn_alcohol) #&gt; state year #&gt; Length:41 Length:41 #&gt; Class :character Class :character #&gt; Mode :character Mode :character #&gt; #&gt; #&gt; #&gt; ethanol_beer_gallons_per_capita #&gt; Min. :1.210 #&gt; 1st Qu.:1.310 #&gt; Median :1.350 #&gt; Mean :1.344 #&gt; 3rd Qu.:1.380 #&gt; Max. :1.450 #&gt; ethanol_wine_gallons_per_capita #&gt; Min. :0.1700 #&gt; 1st Qu.:0.1900 #&gt; Median :0.2100 #&gt; Mean :0.2276 #&gt; 3rd Qu.:0.2500 #&gt; Max. :0.3300 #&gt; ethanol_spirit_gallons_per_capita #&gt; Min. :0.4500 #&gt; 1st Qu.:0.5100 #&gt; Median :0.6100 #&gt; Mean :0.5939 #&gt; 3rd Qu.:0.6800 #&gt; Max. :0.7400 #&gt; ethanol_all_drinks_gallons_per_capita number_of_beers #&gt; Min. :1.850 Min. :286.8 #&gt; 1st Qu.:2.040 1st Qu.:310.5 #&gt; Median :2.220 Median :320.0 #&gt; Mean :2.167 Mean :318.7 #&gt; 3rd Qu.:2.330 3rd Qu.:327.1 #&gt; Max. :2.390 Max. :343.7 #&gt; number_of_glasses_wine number_of_shots_liquor #&gt; Min. :33.74 Min. : 93.43 #&gt; 1st Qu.:37.71 1st Qu.:105.89 #&gt; Median :41.67 Median :126.65 #&gt; Mean :45.16 Mean :123.31 #&gt; 3rd Qu.:49.61 3rd Qu.:141.18 #&gt; Max. :65.49 Max. :153.64 #&gt; number_of_drinks_total #&gt; Min. :394.7 #&gt; 1st Qu.:435.2 #&gt; Median :473.6 #&gt; Mean :462.3 #&gt; 3rd Qu.:497.1 #&gt; Max. :509.9 head(penn_alcohol) #&gt; state year ethanol_beer_gallons_per_capita #&gt; 1559 pennsylvania 2017 1.29 #&gt; 1560 pennsylvania 2016 1.31 #&gt; 1561 pennsylvania 2015 1.31 #&gt; 1562 pennsylvania 2014 1.32 #&gt; 1563 pennsylvania 2013 1.34 #&gt; 1564 pennsylvania 2012 1.36 #&gt; ethanol_wine_gallons_per_capita #&gt; 1559 0.33 #&gt; 1560 0.33 #&gt; 1561 0.32 #&gt; 1562 0.32 #&gt; 1563 0.31 #&gt; 1564 0.31 #&gt; ethanol_spirit_gallons_per_capita #&gt; 1559 0.71 #&gt; 1560 0.72 #&gt; 1561 0.70 #&gt; 1562 0.70 #&gt; 1563 0.68 #&gt; 1564 0.67 #&gt; ethanol_all_drinks_gallons_per_capita #&gt; 1559 2.34 #&gt; 1560 2.36 #&gt; 1561 2.33 #&gt; 1562 2.34 #&gt; 1563 2.33 #&gt; 1564 2.34 #&gt; number_of_beers number_of_glasses_wine #&gt; 1559 305.7778 65.48837 #&gt; 1560 310.5185 65.48837 #&gt; 1561 310.5185 63.50388 #&gt; 1562 312.8889 63.50388 #&gt; 1563 317.6296 61.51938 #&gt; 1564 322.3704 61.51938 #&gt; number_of_shots_liquor number_of_drinks_total #&gt; 1559 147.4128 499.2000 #&gt; 1560 149.4891 503.4667 #&gt; 1561 145.3366 497.0667 #&gt; 1562 145.3366 499.2000 #&gt; 1563 141.1841 497.0667 #&gt; 1564 139.1079 499.2000 So each row of the data is a single year of data for Pennsylvania. It includes alcohol consumption for wine, liquor, beer, and total drinks - both as gallons of ethanol (a hard unit to interpret) and more traditional measures such as glasses of wine or number of beers. The original data only included the gallons of ethanol data which I converted to the more understandable units. If you encounter data with odd units, it is a good idea to convert it to something easier to understand - especially if you intend to show someone else the data or results! 15.2 Graphing data To make a plot using ggplot(), all you need to do is specify the data set and the variables you want to plot. From there you add on pieces of the graph using the + symbol and then specify what you want added. For ggplot() we need to specify 4 things The data set The x-axis variable The y-axis variable The type of graph - e.g.Â line, point, etc. Some useful types of graphs are geom_point() - A point graph, can be used for scatter plots geom_line() - A line graph geom_smooth() - Adds a regression line to the graph geom_bar() - A barplot 15.3 Time-Series Plots Lets start with a time-series of beer consumption in Pennsylvania. In time-series plots the x-axis is always the time variable while the y-axis is the variable whose trend over time is what were interested in. When you see a graph showing crime rates over time, this is the type of graph youre looking at. The code below starts by writing our data set name. Then says what our x- and y-axis variables are called. The x- and y-axis variables are within parentheses of the function called aes(). aes() stands for aesthetic and whats included inside here describes how the graph will look. Its not intuitive to remember, but you need to include it. ggplot(penn_alcohol, aes(x = year, y = number_of_beers)) Note that on the x-axis it prints out every single year and makes it completely unreadable. That is because the year column is a character type, so R thinks each year is its own category. It prints every single year because it thinks we want every category shown. To fix this we can make the column numeric and ggplot() will be smarter about printing fewer years. penn_alcohol$year &lt;- as.numeric(penn_alcohol$year) ggplot(penn_alcohol, aes(x = year, y = number_of_beers)) When we run it, we get our graph. It includes the variable names for each axis and shows the range of data through the tick marks. What is missing is the actual data. For that we need to specify what type of graph it is. We literally add it with the + followed by the type of graph we want. Make sure that the + is at the end of a line, not the start of one. Starting a line with the + will not work. Lets start with point and line graphs. ggplot(penn_alcohol, aes(x = year, y = number_of_beers)) + geom_point() ggplot(penn_alcohol, aes(x = year, y = number_of_beers)) + geom_line() We can also combine different types of graphs. ggplot(penn_alcohol, aes(x = year, y = number_of_beers)) + geom_point() + geom_line() It looks like theres a huge change in beer consumption over time. But look at where they y-axis starts. It starts around 280 so really that change is only ~60 beers. Thats because when graphs dont start at 0, it can make small changes appear big. We can fix this by forcing the y-axis to begin at 0. We can add expand_limits(y = 0) to the graph to say that the value 0 must always appear on the y-axis, even if no data is close to that value. ggplot(penn_alcohol, aes(x = year, y = number_of_beers)) + geom_point() + geom_line() + expand_limits(y = 0) Now that graph shows what looks like nearly no change even though that is also not true. Which graph is best? Its hard to say. Inside the types of graphs we can change how it is displayed. As with using plot(), we can specify the color and size of our lines or points. ggplot(penn_alcohol, aes(x = year, y = number_of_beers)) + geom_line(color = &quot;forestgreen&quot;, size = 1.3) Some other useful features are changing the axis labels and the graph title. Unlike in plot() we do not need to include it in the () of ggplot() but use their own functions to add them to the graph. xlab() - x-axis label ylab() - y-axis label ggtitle() - graph title ggplot(penn_alcohol, aes(x = year, y = number_of_beers)) + geom_line(color = &quot;forestgreen&quot;, size = 1.3) + xlab(&quot;Year&quot;) + ylab(&quot;Number of Beers&quot;) + ggtitle(&quot;PA Annual Beer Consumption Per Capita (1977-2017)&quot;) Many time-series plots show multiple variables over the same time period (e.g.Â murder and robbery over time). There are ways to change the data itself to make creating graphs like this easier, but lets stick with the data we currently have and just change ggplot(). Start with a normal line graph, this time looking at wine. ggplot(penn_alcohol, aes(x = year, y = number_of_glasses_wine)) + geom_line() Then include a second geom_line() with its own aes() for the second variable. ggplot(penn_alcohol, aes(x = year, y = number_of_glasses_wine)) + geom_line() + geom_line(aes(x = year, y = number_of_shots_liquor)) A problem with this is that both lines are the same color. We need to set a color for each line and do so within aes(). Instead of providing a color name, we need to provide the name the color will have in the legend. Do so for both lines. ggplot(penn_alcohol, aes(x = year, y = number_of_glasses_wine, color = &quot;Glasses of Wine&quot;)) + geom_line() + geom_line(aes(x = year, y = number_of_shots_liquor, color = &quot;Shots of Liquor&quot;)) We can change the legend title by using the function labs() and changing the value color to what we want the legend title to be. ggplot(penn_alcohol, aes(x = year, y = number_of_glasses_wine, color = &quot;Glasses of Wine&quot;)) + geom_line() + geom_line(aes(x = year, y = number_of_shots_liquor, color = &quot;Shots of Liquor&quot;)) + labs(color = &quot;Alcohol Type&quot;) Finally, a useful option to move the legend from the side to the bottom is setting the theme() function to move the legend.position to bottom. This will allow the graph to be wider. ggplot(penn_alcohol, aes(x = year, y = number_of_glasses_wine, color = &quot;Glasses of Wine&quot;)) + geom_line() + geom_line(aes(x = year, y = number_of_shots_liquor, color = &quot;Shots of Liquor&quot;)) + labs(color = &quot;Alcohol Type&quot;) + theme(legend.position = &quot;bottom&quot;) 15.4 Scatter Plots Making a scatter plot simply requires changing the x-axis from year to another numerical variable and using geom_point(). ggplot(penn_alcohol, aes(x = number_of_shots_liquor, y = number_of_beers)) + geom_point() This graph shows us that when liquor consumption increases, beer consumption also tends to increase. While scatterplots can help show the relationship between variables, we lose the information of how consumption changes over time. 15.5 Color blindness Please keep in mind that some people are color blind so graphs (or maps which we will learn about soon) will be hard to read for these people if we choose the incorrect colors. A helpful site for choosing colors for graphs is colorbrewer2.org This site lets you select which type of colors you want (sequential and diverging such as shades in a hotspot map, and qualitative such as for data like what we used in this lesson). In the Only show: section you can set it to colorblind safe to restrict it to colors that allow people with color blindness to read your graph. To the right of this section it shows the HEX codes for each color (a HEX code is just a code that a computer can read and know exactly which color it is). Lets use an example of a color blind friendly color from the qualitative section of ColorBrewer. We have three options on this page (we can change how many colors we want but it defaults to showing 3): green (HEX = #1b9e77), orange (HEX = #d95f02), and purple (HEX = #7570b3). Well use the orange and purple colors. To manually set colors in ggplot() we use scale_color_manual(values = c()) and include a vector of color names or HEX codes inside the c(). Doing that using the orange and purple HEX codes will change our graph colors to these two colors. ggplot(penn_alcohol, aes(x = year, y = number_of_glasses_wine, color = &quot;Glasses of Wine&quot;)) + geom_line() + geom_line(aes(x = year, y = number_of_shots_liquor, color = &quot;number_of_shots_liquor&quot;)) + labs(color = &quot;Alcohol Type&quot;) + theme(legend.position = &quot;bottom&quot;) + scale_color_manual(values = c(&quot;#7570b3&quot;, &quot;#d95f02&quot;)) "],["ois_graphs.html", "16 More graphing with ggplot2 16.1 Exploring Data 16.2 Graphing a Single Numeric Variable 16.3 Bar graph 16.4 Graphing Data Over Time 16.5 Pretty Graphs", " 16 More graphing with ggplot2 For this chapter youll need the following file, which is available for download here: fatal-police-shootings-data.csv. In this lesson we will continue to explore graphing using ggplot(). The data we will use is microdata on officer-involved shootings that result in a death in the United States since January 1st, 2015. This data has been compiled and released by the Washington Post so it will be a useful exercise in exploring data from non-government sources. This data is useful for our purposes as it has a number of variables related to the person who was shot, allowing us to practice making many types of graphs. Each row of data is a different person who was shot and killed by the police, and each column gives us information about the individual or the shooting, such as their age, their location, and whether they carried any weapon. To explore the data on their website, see here. To examine their methodology, see here. The data initially comes as a .csv file so well use the read_csv() function from the readr package. Since its available on GitHub, we can download it by directing read_csv() to read the file at its URL on GitHub. library(readr) shootings &lt;- read_csv(&quot;data/fatal-police-shootings-data.csv&quot;) #&gt; Rows: 4371 Columns: 14 #&gt; -- Column specification -------------------------------- #&gt; Delimiter: &quot;,&quot; #&gt; chr (9): name, manner_of_death, armed, gender, race... #&gt; dbl (2): id, age #&gt; lgl (2): signs_of_mental_illness, body_camera #&gt; date (1): date #&gt; #&gt; i Use `spec()` to retrieve the full column specification for this data. #&gt; i Specify the column types or set `show_col_types = FALSE` to quiet this message. Since read_csv() reads files into a tibble object, well turn it into a data.frame so head() shows every single column. shootings &lt;- as.data.frame(shootings) 16.1 Exploring Data Now that we have the data read in, lets look at it. nrow(shootings) #&gt; [1] 4371 ncol(shootings) #&gt; [1] 14 The data has 14 variables and covers 4371 shootings. Lets check out some of the variables, first using head() then using summary() and table(). head(shootings) #&gt; id name date manner_of_death #&gt; 1 3 Tim Elliot 2015-01-02 shot #&gt; 2 4 Lewis Lee Lembke 2015-01-02 shot #&gt; 3 5 John Paul Quintero 2015-01-03 shot and Tasered #&gt; 4 8 Matthew Hoffman 2015-01-04 shot #&gt; 5 9 Michael Rodriguez 2015-01-04 shot #&gt; 6 11 Kenneth Joe Brown 2015-01-04 shot #&gt; armed age gender race city state #&gt; 1 gun 53 M A Shelton WA #&gt; 2 gun 47 M W Aloha OR #&gt; 3 unarmed 23 M H Wichita KS #&gt; 4 toy weapon 32 M W San Francisco CA #&gt; 5 nail gun 39 M H Evans CO #&gt; 6 gun 18 M W Guthrie OK #&gt; signs_of_mental_illness threat_level flee #&gt; 1 TRUE attack Not fleeing #&gt; 2 FALSE attack Not fleeing #&gt; 3 FALSE other Not fleeing #&gt; 4 TRUE attack Not fleeing #&gt; 5 FALSE attack Not fleeing #&gt; 6 FALSE attack Not fleeing #&gt; body_camera #&gt; 1 FALSE #&gt; 2 FALSE #&gt; 3 FALSE #&gt; 4 FALSE #&gt; 5 FALSE #&gt; 6 FALSE Each row is a single shooting and it includes variables such as the victims name, the date of the shooting, demographic information about that person, the city and state where the shooting occurred, and some information about the incident. It is clear from these first 6 rows that most variables are categorical so we cant use summary() on them. Lets use summary() on the date and age columns and then use table() for the rest. summary(shootings$date) #&gt; Min. 1st Qu. Median Mean #&gt; &quot;2015-01-02&quot; &quot;2016-02-07&quot; &quot;2017-03-16&quot; &quot;2017-03-18&quot; #&gt; 3rd Qu. Max. #&gt; &quot;2018-04-11&quot; &quot;2019-06-25&quot; summary(shootings$age) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s #&gt; 6.00 27.00 35.00 36.84 45.00 91.00 182 From this we can see that the data is from early January through about a week ago. From the age column we can see that the average age is about 37 with most people around that range. Now we can use table() to see how often each value appears in each variable. We dont want to do this for city or name as there would be too many values, but it will work for the other columns. Lets start with the manner_of_death column. table(shootings$manner_of_death) #&gt; #&gt; shot shot and Tasered #&gt; 4146 225 To turn these counts into percentages we can divide the results by the number of rows in our data and multiply by 100. table(shootings$manner_of_death) / nrow(shootings) * 100 #&gt; #&gt; shot shot and Tasered #&gt; 94.852437 5.147563 Now it is clear to see that in about 95% of shootings, officers used a gun and in 5% of shootings they also used a Taser. As this is data on officer shooting deaths, this is unsurprising. Lets take a look at whether the victim was armed. table(shootings$armed) / nrow(shootings) * 100 #&gt; #&gt; air conditioner #&gt; 0.02287806 #&gt; ax #&gt; 0.48043926 #&gt; barstool #&gt; 0.02287806 #&gt; baseball bat #&gt; 0.27453672 #&gt; baseball bat and bottle #&gt; 0.02287806 #&gt; baseball bat and fireplace poker #&gt; 0.02287806 #&gt; baton #&gt; 0.09151224 #&gt; bayonet #&gt; 0.02287806 #&gt; BB gun #&gt; 0.06863418 #&gt; bean-bag gun #&gt; 0.02287806 #&gt; beer bottle #&gt; 0.06863418 #&gt; blunt object #&gt; 0.11439030 #&gt; bow and arrow #&gt; 0.02287806 #&gt; box cutter #&gt; 0.22878060 #&gt; brick #&gt; 0.04575612 #&gt; carjack #&gt; 0.02287806 #&gt; chain #&gt; 0.04575612 #&gt; chain saw #&gt; 0.04575612 #&gt; chainsaw #&gt; 0.02287806 #&gt; chair #&gt; 0.04575612 #&gt; claimed to be armed #&gt; 0.02287806 #&gt; contractor&#39;s level #&gt; 0.02287806 #&gt; cordless drill #&gt; 0.02287806 #&gt; crossbow #&gt; 0.20590254 #&gt; crowbar #&gt; 0.06863418 #&gt; fireworks #&gt; 0.02287806 #&gt; flagpole #&gt; 0.02287806 #&gt; flashlight #&gt; 0.02287806 #&gt; garden tool #&gt; 0.02287806 #&gt; glass shard #&gt; 0.06863418 #&gt; gun #&gt; 55.43353924 #&gt; gun and car #&gt; 0.11439030 #&gt; gun and knife #&gt; 0.34317090 #&gt; gun and sword #&gt; 0.02287806 #&gt; gun and vehicle #&gt; 0.04575612 #&gt; guns and explosives #&gt; 0.06863418 #&gt; hammer #&gt; 0.22878060 #&gt; hand torch #&gt; 0.02287806 #&gt; hatchet #&gt; 0.18302448 #&gt; hatchet and gun #&gt; 0.04575612 #&gt; incendiary device #&gt; 0.04575612 #&gt; knife #&gt; 14.96225120 #&gt; lawn mower blade #&gt; 0.04575612 #&gt; machete #&gt; 0.86936628 #&gt; machete and gun #&gt; 0.02287806 #&gt; meat cleaver #&gt; 0.06863418 #&gt; metal hand tool #&gt; 0.02287806 #&gt; metal object #&gt; 0.09151224 #&gt; metal pipe #&gt; 0.25165866 #&gt; metal pole #&gt; 0.04575612 #&gt; metal rake #&gt; 0.02287806 #&gt; metal stick #&gt; 0.06863418 #&gt; motorcycle #&gt; 0.02287806 #&gt; nail gun #&gt; 0.02287806 #&gt; oar #&gt; 0.02287806 #&gt; pellet gun #&gt; 0.02287806 #&gt; pen #&gt; 0.02287806 #&gt; pepper spray #&gt; 0.02287806 #&gt; pick-axe #&gt; 0.06863418 #&gt; piece of wood #&gt; 0.06863418 #&gt; pipe #&gt; 0.13726836 #&gt; pitchfork #&gt; 0.04575612 #&gt; pole #&gt; 0.04575612 #&gt; pole and knife #&gt; 0.04575612 #&gt; rock #&gt; 0.09151224 #&gt; samurai sword #&gt; 0.02287806 #&gt; scissors #&gt; 0.06863418 #&gt; screwdriver #&gt; 0.18302448 #&gt; sharp object #&gt; 0.11439030 #&gt; shovel #&gt; 0.06863418 #&gt; spear #&gt; 0.02287806 #&gt; stapler #&gt; 0.02287806 #&gt; straight edge razor #&gt; 0.06863418 #&gt; sword #&gt; 0.34317090 #&gt; Taser #&gt; 0.41180508 #&gt; tire iron #&gt; 0.02287806 #&gt; toy weapon #&gt; 3.54609929 #&gt; unarmed #&gt; 6.36010066 #&gt; undetermined #&gt; 4.30107527 #&gt; unknown weapon #&gt; 1.25829330 #&gt; vehicle #&gt; 1.57858614 #&gt; vehicle and gun #&gt; 0.02287806 #&gt; walking stick #&gt; 0.02287806 #&gt; wrench #&gt; 0.02287806 This is fairly hard to interpret as it is sorted alphabetically when wed prefer it to be sorted by most common weapon. It also doesnt round the numbers so there are many numbers past the decimal point shown. Lets solve these two issues using sort() and round(). We could just wrap our initial code inside each of these functions but to avoid making too complicated code, we save the results in a temp object and incrementally use sort() and round() on that. Well set the parameter decreasing to TRUE in the sort() function so that it is in descending order of how common each value is. And well round to two decimal places by setting the parameter digits to 2. temp &lt;- table(shootings$armed) / nrow(shootings) * 100 temp &lt;- sort(temp, decreasing = TRUE) temp &lt;- round(temp, digits = 2) temp #&gt; #&gt; gun #&gt; 55.43 #&gt; knife #&gt; 14.96 #&gt; unarmed #&gt; 6.36 #&gt; undetermined #&gt; 4.30 #&gt; toy weapon #&gt; 3.55 #&gt; vehicle #&gt; 1.58 #&gt; unknown weapon #&gt; 1.26 #&gt; machete #&gt; 0.87 #&gt; ax #&gt; 0.48 #&gt; Taser #&gt; 0.41 #&gt; gun and knife #&gt; 0.34 #&gt; sword #&gt; 0.34 #&gt; baseball bat #&gt; 0.27 #&gt; metal pipe #&gt; 0.25 #&gt; box cutter #&gt; 0.23 #&gt; hammer #&gt; 0.23 #&gt; crossbow #&gt; 0.21 #&gt; hatchet #&gt; 0.18 #&gt; screwdriver #&gt; 0.18 #&gt; pipe #&gt; 0.14 #&gt; blunt object #&gt; 0.11 #&gt; gun and car #&gt; 0.11 #&gt; sharp object #&gt; 0.11 #&gt; baton #&gt; 0.09 #&gt; metal object #&gt; 0.09 #&gt; rock #&gt; 0.09 #&gt; BB gun #&gt; 0.07 #&gt; beer bottle #&gt; 0.07 #&gt; crowbar #&gt; 0.07 #&gt; glass shard #&gt; 0.07 #&gt; guns and explosives #&gt; 0.07 #&gt; meat cleaver #&gt; 0.07 #&gt; metal stick #&gt; 0.07 #&gt; pick-axe #&gt; 0.07 #&gt; piece of wood #&gt; 0.07 #&gt; scissors #&gt; 0.07 #&gt; shovel #&gt; 0.07 #&gt; straight edge razor #&gt; 0.07 #&gt; brick #&gt; 0.05 #&gt; chain #&gt; 0.05 #&gt; chain saw #&gt; 0.05 #&gt; chair #&gt; 0.05 #&gt; gun and vehicle #&gt; 0.05 #&gt; hatchet and gun #&gt; 0.05 #&gt; incendiary device #&gt; 0.05 #&gt; lawn mower blade #&gt; 0.05 #&gt; metal pole #&gt; 0.05 #&gt; pitchfork #&gt; 0.05 #&gt; pole #&gt; 0.05 #&gt; pole and knife #&gt; 0.05 #&gt; air conditioner #&gt; 0.02 #&gt; barstool #&gt; 0.02 #&gt; baseball bat and bottle #&gt; 0.02 #&gt; baseball bat and fireplace poker #&gt; 0.02 #&gt; bayonet #&gt; 0.02 #&gt; bean-bag gun #&gt; 0.02 #&gt; bow and arrow #&gt; 0.02 #&gt; carjack #&gt; 0.02 #&gt; chainsaw #&gt; 0.02 #&gt; claimed to be armed #&gt; 0.02 #&gt; contractor&#39;s level #&gt; 0.02 #&gt; cordless drill #&gt; 0.02 #&gt; fireworks #&gt; 0.02 #&gt; flagpole #&gt; 0.02 #&gt; flashlight #&gt; 0.02 #&gt; garden tool #&gt; 0.02 #&gt; gun and sword #&gt; 0.02 #&gt; hand torch #&gt; 0.02 #&gt; machete and gun #&gt; 0.02 #&gt; metal hand tool #&gt; 0.02 #&gt; metal rake #&gt; 0.02 #&gt; motorcycle #&gt; 0.02 #&gt; nail gun #&gt; 0.02 #&gt; oar #&gt; 0.02 #&gt; pellet gun #&gt; 0.02 #&gt; pen #&gt; 0.02 #&gt; pepper spray #&gt; 0.02 #&gt; samurai sword #&gt; 0.02 #&gt; spear #&gt; 0.02 #&gt; stapler #&gt; 0.02 #&gt; tire iron #&gt; 0.02 #&gt; vehicle and gun #&gt; 0.02 #&gt; walking stick #&gt; 0.02 #&gt; wrench #&gt; 0.02 Now it is a little easier to interpret. In over half of the cases the victim was carrying a gun. 15% of the time they had a knife. And 6% of the time they were unarmed. In 4% of cases there is no data on any weapon. That leaves about 20% of cases where one of the many rare weapons were used, including some that overlap with one of the more common categories. Think about how youd graph this data. There are 85 unique values in this column though fewer than ten of them are common enough to appear more than 1% of the time. Should we graph all of them? No, that would overwhelm any graph. For a useful graph we would need to combine many of these into a single category - possibly called other weapons. And how do we deal with values where they could meet multiple larger categories? There is not always a clear answer for these types of questions. It depends on what data youre interested in, the goal of the graph, the target audience, and personal preference. Lets keep exploring the data by looking at gender and race. table(shootings$gender) / nrow(shootings) * 100 #&gt; #&gt; F M #&gt; 4.667124 95.218485 Nearly all of the shootings are of a man. Given that we saw most shootings involved a person with a weapon and that most violent crimes are committed by men, this shouldnt be too surprising. temp &lt;- table(shootings$race) / nrow(shootings) * 100 temp &lt;- sort(temp) temp &lt;- round(temp, digits = 2) temp #&gt; #&gt; O N A H B W #&gt; 0.87 1.46 1.62 16.45 22.90 44.89 White people are the largest race group that is killed by police, followed by Black people and Hispanic people. In fact, there are about twice as many White people killed than Black people killed, and about 2.5 times as many White people killed than Hispanic people killed. Does this mean that the oft-repeated claim that Black people are killed at disproportionate rates is wrong? No.Â This data simply shows the number of people killed; it doesnt give any indication on rates of death per group. Youd need to merge it with Census data to get population to determine a rate per race group. And even that would be insufficient since people are, for example, stopped by police at different rates. This data provides a lot of information on people killed by the police, but even so it is insufficient to answer many of the questions on that topic. Its important to understand the data not only to be able to answer questions about it, but to know what questions you cant answer - and youll find when using criminology data that there are a lot of questions that you cant answer.14 One annoying thing with the gender and race variables is that they dont spell out the name. Instead of Female, for example, it has F. For our graphs we want to spell out the words so it is clear to viewers. Well fix this issue, and the issue of having many weapon categories, as we graph each variable. 16.2 Graphing a Single Numeric Variable Weve spent some time looking at the data so now were ready to make the graphs. We need to load the ggplot2 package if we havent done so already this session (i.e.Â since you last closed RStudio). library(ggplot2) As a reminder, the benefit of using ggplot() is we can start with a simple plot and build our way up to more complicated graphs. Well start here by building some graphs to depict a numeric variable - in this case the age column. We start every ggplot() the same, by inserting the dataset first and then put our x and y variables inside of the aes() parameter. In this case were only going to be plotting an x variable so we dont need to write anything for y. ggplot(shootings, aes(x = age)) Running the above code returns a blank graph since we havent told ggplot() what type of graph we want yet. Below are a few different types of ways to display a single numeric variable. Theyre essentially all variations of each other and show the data at different levels of precision. Its hard to say which is best - youll need to use your best judgment and consider your audience. 16.2.1 Histogram The histogram is a very common type of graph for a single numeric variable. Histograms group a numeric variable into categories and then plot then, with the heights of each bar indicating how common the group is. We can make a histogram by adding geom_histogram() to the ggplot(). ggplot(shootings, aes(x = age)) + geom_histogram() #&gt; `stat_bin()` using `bins = 30`. Pick better value #&gt; with `binwidth`. #&gt; Warning: Removed 182 rows containing non-finite values #&gt; (stat_bin). The x-axis is ages with each bar being a group of certain ages, and the y-axis is how many people are in each group. The grouping is done automatically and we can alter it by changing the bin parameter in geom_histogram(). By default this parameter is set to 30 but we can make each group smaller (have fewer ages per group) by increasing it from 30 or make each group larger by decreasing it. ggplot(shootings, aes(x = age)) + geom_histogram(bins = 15) #&gt; Warning: Removed 182 rows containing non-finite values #&gt; (stat_bin). ggplot(shootings, aes(x = age)) + geom_histogram(bins = 45) #&gt; Warning: Removed 182 rows containing non-finite values #&gt; (stat_bin). Note that while the overall trend (of most deaths being around age 25) doesnt change when we alter bin, the data gets more or less precise. Having fewer bins means fewer, but larger, bars which can obscure trends that more, smaller, bars would show. But having too many bars may make you focus on minor variations that could occur randomly and take away attention from the overall trend. I prefer to err on the side of more precise graphs (more, smaller bars) but be careful over-interpreting data from small groups. These graphs show the y-axis as the number of people in each bar. If we want to show percent instead, we can add in a parameter for y in the aes() of the geom_histogram(). We add in y = (..count..)/sum(..count..)) which automatically converts the counts to percentages. The (..count..)/sum(..count..)) stuff is just taking each group and dividing it from the sum of all groups. You could, of course, do this yourself before making the graph, but its an easy helper. If you do this, make sure to relabel the y-axis so you dont accidentally call the percent a count! ggplot(shootings, aes(x = age)) + geom_histogram(aes(y = (..count..)/sum(..count..))) #&gt; `stat_bin()` using `bins = 30`. Pick better value #&gt; with `binwidth`. #&gt; Warning: Removed 182 rows containing non-finite values #&gt; (stat_bin). 16.2.2 Density plot Density plots are essentially smoothed versions of histograms. Theyre especially useful for numeric variables which are not integers (integers are whole numbers). Theyre also useful when you want to be more precise than a histogram as they are - to simplify - histograms where each bar is very narrow. Note that the y-axis of a density plot is automatically labeled density and has very small numbers. Interpreting the y-axis is fairly hard to explain to someone not familiar with statistics so Id caution against using this graph unless your audience is already familiar with it. To interpret these kinds of graphs, I recommend looking for trends rather than trying to identify specific points. For example, in the below graph we can see that shootings rise rapidly starting around age 10, peak at around age 30 (if we were presenting this graph to other people wed probably want more ages shown on the x-axis), and then steadily decline until about age 80 where its nearly flat. ggplot(shootings, aes(x = age)) + geom_density() #&gt; Warning: Removed 182 rows containing non-finite values #&gt; (stat_density). 16.2.3 Count Graph A count graph is essentially a histogram with a bar for every value in the numeric variable - like a less-smooth density plot. Note that this wont work well if you have too many unique values so Id strongly recommend rounding the data to the nearest whole number first. Our age variable is already rounded so we dont need to do that. To make a count graph, we add stat_count() to the ggplot(). ggplot(shootings, aes(x = age)) + stat_count() #&gt; Warning: Removed 182 rows containing non-finite values #&gt; (stat_count). Now we have a single bar for every age in the data. Like the histogram, the y-axis shows the number of people that are that age. And like the histogram, we can change this from number of people to percent of people using the exact same code. ggplot(shootings, aes(x = age)) + stat_count(aes(y = (..count..)/sum(..count..))) #&gt; Warning: Removed 182 rows containing non-finite values #&gt; (stat_count). 16.2.4 Graphing a Categorical Variable 16.3 Bar graph To make this barplot well set the x-axis variable to our race column and add geom_bar() to the end. ggplot(shootings, aes(x = race)) + geom_bar() This gives us a barplot in alphabetical order. In most cases we want the data sorted by frequency, so we can easily see what value is the most common, second most common, etc. There are a few ways to do this but well do this by turning the race variable into a factor and ordering it by frequency. We can do that using the factor() function. The first input will be the race variable and then we will need to set the levels parameter to a vector of values sorted by frequency. An easy way to know how often values are in a column is to use the table() function on that column, such as below. table(shootings$race) #&gt; #&gt; A B H N O W #&gt; 71 1001 719 64 38 1962 Its still alphabetical so lets wrap that in a sort() function. sort(table(shootings$race)) #&gt; #&gt; O N A H B W #&gt; 38 64 71 719 1001 1962 Its sorted from smallest to largest. We usually want to graph from largest to smallest so lets set the parameter decreasing in sort() to TRUE. sort(table(shootings$race), decreasing = TRUE) #&gt; #&gt; W B H A N O #&gt; 1962 1001 719 71 64 38 Now, we only need the names of each value, not how often they occur. So we can against wrap this whole thing in names() to get just the names. names(sort(table(shootings$race), decreasing = TRUE)) #&gt; [1] &quot;W&quot; &quot;B&quot; &quot;H&quot; &quot;A&quot; &quot;N&quot; &quot;O&quot; If we tie it all together, we can make the race column into a factor variable. shootings$race &lt;- factor(shootings$race, levels = names(sort(table(shootings$race), decreasing = TRUE))) Now lets try that barplot again. ggplot(shootings, aes(x = race)) + geom_bar() It works! Note that all the values that are missing in our data are still reported in the barplot under a column called NA. This is not sorted properly since there are more NA values than three of the other values but is still at the far right of the graph. We can change this if we want to make all the NA values an actual character type and call it something like Unknown. But this way it does draw attention to how many values are missing from this column. Like most things in graphing, this is a personal choice as to what to do. For bar graphs it is often useful to flip the graph so each value is a row in the graph rather than a column. This also makes it much easier to read the value name. If the value names are long, itll shrink the graph to accommodate the name. This is usually a sign that you should try to shorten the name to avoid reducing the size of the graph. ggplot(shootings, aes(x = race)) + geom_bar() + coord_flip() Since its flipped, now its sorted from smallest to largest. So well need to change the factor() code to fix that. shootings$race &lt;- factor(shootings$race, levels = names(sort(table(shootings$race), decreasing = FALSE))) ggplot(shootings, aes(x = race)) + geom_bar() + coord_flip() The NA value is now at the top, which looks fairly bad. Lets change all NA values to the string Unknown. And while were at it, lets change all the abbreviated race values to actual names. We can get all the NA values by using is.na(shootings$race) and using a conditional statement to get all rows that meet that condition, then assign them the value Unknown. Instead of trying to subset a factor variable to change the values, we should convert it back to a character type first using as.character(), and then convert it to a factor again once were done. shootings$race &lt;- as.character(shootings$race) shootings$race[is.na(shootings$race)] &lt;- &quot;Unknown&quot; Now we can use conditional statements to change all the race letters to names. Its not clear what race O and N are so I checked the Washington Posts GitHub page which explains. Instead of is.na() well use shootings$race == \"\" where we put the letter inside of the quotes. shootings$race[shootings$race == &quot;O&quot;] &lt;- &quot;Other&quot; shootings$race[shootings$race == &quot;N&quot;] &lt;- &quot;Native American&quot; shootings$race[shootings$race == &quot;A&quot;] &lt;- &quot;Asian&quot; shootings$race[shootings$race == &quot;H&quot;] &lt;- &quot;Hispanic&quot; shootings$race[shootings$race == &quot;B&quot;] &lt;- &quot;Black&quot; shootings$race[shootings$race == &quot;W&quot;] &lt;- &quot;White&quot; Now lets see how our graph looks. Well need to rerun the factor() code since now all of the values are changed. shootings$race &lt;- factor(shootings$race, levels = names(sort(table(shootings$race), decreasing = FALSE))) ggplot(shootings, aes(x = race)) + geom_bar() + coord_flip() As earlier, we can show percentage instead of count by adding y = (..count..)/sum(..count..) to the aes() in geom_bar(). ggplot(shootings, aes(x = race)) + geom_bar(aes(y = (..count..)/sum(..count..))) + coord_flip() 16.4 Graphing Data Over Time We went over time-series graphs in Chapter 15 but its such an important topic well cover it again. A lot of criminology research is seeing if a policy had an effect, which means we generally want to compare an outcome over time (and compare the treated group to a similar untreated group). To graph that we look at an outcome, in this case numbers of killings, over time. In our case we arent evaluating any policy, just seeing if the number of police killings change over time. Well need to make a variable to indicate that the row is for one shooting. We can call this dummy and assign it a value of 1. Then we can make the ggplot() and set this dummy column to the y-axis value and set our date variable date to the x-axis (the time variable is always on the x-axis). Then well set the type of plot to geom_line() so we have a line graph showing killings over time. shootings$dummy &lt;- 1 ggplot(shootings, aes(x = date, y = dummy)) + geom_line() This graph is clearly wrong. Why? Well, our y-axis variable is always 1 so theres no variation to plot. Every single value, even if there are more than one shooting per day, is on the 1 line on the y-axis. And the fact that we have multiple killings per day is an issue because we only want a single line in our graph. Well need to aggregate our data to some time period (e.g.Â day, month, year) so that we have one row per time-period and know how many people were killed in that period. Well start with yearly data and then move to monthly data. Since were going to be dealing with dates, lets load the lubridate() package that is well-suited for this task. library(lubridate) #&gt; #&gt; Attaching package: &#39;lubridate&#39; #&gt; The following objects are masked from &#39;package:base&#39;: #&gt; #&gt; date, intersect, setdiff, union Well use two functions to create variables that tell us the month and the year of each date in our data. Well use these new variables to aggregate our data to that time unit. First, the floor_date() function is a very useful tool that essentially rounds a date. Here we have the exact date the killing happened on, and we want to determine what month that date is from. So well use the parameter unit in floor_date() and tell the function we want to know the month (for a full set of options please see the documentation for floor_date() by entering ?floor_date in the console). So we can do floor_date(shootings$date, unit = \"month\") to get the month - specifically, it returns the date that is the first of the month for that month - the killing happened on. Even simpler, to get the year, we simple use year() and put our date variable in the parentheses. Well call the new variables month_year and year, respectively. shootings$month_year &lt;- floor_date(shootings$date, unit = &quot;month&quot;) shootings$year &lt;- year(shootings$date) head(shootings$month_year) #&gt; [1] &quot;2015-01-01&quot; &quot;2015-01-01&quot; &quot;2015-01-01&quot; &quot;2015-01-01&quot; #&gt; [5] &quot;2015-01-01&quot; &quot;2015-01-01&quot; head(shootings$year) #&gt; [1] 2015 2015 2015 2015 2015 2015 Since the data is already sorted by date, all the values printed from head() are the same. But you can look at the data using View() to confirm that the code worked properly. We can now aggregate the data by the month_year variable and save the result into a new dataset well call monthly_shootings. Well use the group_by() and summarize() functions from dplyr that were introduced in Chapter @ref(#explore) to do this. And well use the pipe method of writing dplyr code that was discussed in Section @ref(#dplyr-pipes) library(dplyr) #&gt; #&gt; Attaching package: &#39;dplyr&#39; #&gt; The following objects are masked from &#39;package:stats&#39;: #&gt; #&gt; filter, lag #&gt; The following objects are masked from &#39;package:base&#39;: #&gt; #&gt; intersect, setdiff, setequal, union monthly_shootings &lt;- shootings %&gt;% group_by(month_year) %&gt;% summarize(dummy = sum(dummy)) head(monthly_shootings) #&gt; # A tibble: 6 x 2 #&gt; month_year dummy #&gt; &lt;date&gt; &lt;dbl&gt; #&gt; 1 2015-01-01 76 #&gt; 2 2015-02-01 77 #&gt; 3 2015-03-01 92 #&gt; 4 2015-04-01 84 #&gt; 5 2015-05-01 71 #&gt; 6 2015-06-01 65 Since we now have a variable that shows for each month the number of people killed, we can graph this new dataset. Well use the same process as earlier but our dataset is now monthly_shootings instead of shootings and the x-axis variable is month_year instead of date. ggplot(monthly_shootings, aes(x = month_year, y = dummy)) + geom_line() The process is the same for yearly data. yearly_shootings &lt;- shootings %&gt;% group_by(year) %&gt;% summarize(dummy = sum(dummy)) ggplot(yearly_shootings, aes(x = year, y = dummy)) + geom_line() Note the steep drop-off at the end of each graph. Is that due to fewer shooting occurring more recently? No, its simply an artifact of the graph comparing whole months (years) to parts of a month (year) since we havent finished this month (year) yet (and the data has a small lag in reporting). 16.5 Pretty Graphs Whats next for these graphs? Youll likely want to add labels for the axes and the title. We went over how to do this in Section 15.3 so please refer to that for more info. Also, check out ggplot2s website to see more on this very versatile package. As Ive said all chapter, a lot of this is going to be personal taste so please spend some time exploring the package and changing the appearance of the graph to learn what looks right to you. 16.5.1 Themes In addition to making changes to the graphs appearance yourself, you can use a theme that someone else made. A theme is just a collection of changes to the graphs appearance that someone put in a function for others to use. Each theme is different and is fairly opinionated, so you should only use one that you think looks best for your graph. To use a theme, simply add the theme (exactly as spelled on the site) to your ggplot using the + as normal (and make sure to include the () since each theme is actually a function. ggplot2 comes with a series of themes that you can look at here. Here, well be looking at themes from the ggthemes package which is a great source of different themes to modify the appearance of your graph. Check out this website to see a depiction of all of the possible themes. If you dont have the ggthemes package installed, do so using `install.packages(ggthemes). Lets do a few examples using the graph made above. First, well need to load the ggthemes library. library(ggthemes) ggplot(yearly_shootings, aes(x = year, y = dummy)) + geom_line() + theme_fivethirtyeight() ggplot(yearly_shootings, aes(x = year, y = dummy)) + geom_line() + theme_tufte() ggplot(yearly_shootings, aes(x = year, y = dummy)) + geom_line() + theme_few() ggplot(yearly_shootings, aes(x = year, y = dummy)) + geom_line() + theme_excel() It is especially important to not overreach when trying to answer a question when the data cant do it well. Often, no answer is better than a wrong one - especially in a field with serious consequences like criminology. For example, using the current data wed determine that theres no (or not as much as people claim) racial bias in police killings. If we come to that conclusion based on the best possible evidence, thats okay - even if were wrong. But coming to that conclusion based on inadequate data could lead to policies that actually cause harm. This isnt to say that you should never try to answer questions since no data is perfect and you may be wrong. You should try to develop a deep understanding of the data and be confident that you can actually answer those questions with confidence. "],["hotspot-maps.html", "17 Hotspot maps 17.1 A simple map 17.2 What really are maps? 17.3 Making a hotspot map", " 17 Hotspot maps For this chapter youll need the following file, which is available for download here: san_francisco_suicide_2003_2017.csv. Hotspot maps are used to find where events (marijuana dispensaries, crimes, liquors stores) are especially prevalent. These maps are frequently used by police departments, particularly in determining where to do hotspot policing (which is focusing patrols on high-crime areas). However, there are significant flaws with these kinds of maps. As well see during this lesson, minor changes to how we make the maps can cause significant differences in interpretation. For example, determining the size of the clusters that make up the hotspots can make it seem like there are much larger or smaller areas with hotspots than there actually are. These clusters are also drawn fairly arbitrarily, without considering context such as neighborhoods (In Chapter 18 well make maps that try to account for these types of areas). This makes it more difficult to interpret because even though maps give us the context of location, it can combine different areas in an arbitrary way. Well explore these issues in more detail throughout the lesson but keep in mind these risks as you make your own hotspot maps. Here, we will make hotspot maps using data on suicides in San Francisco between 2003 and 2017. First, we need to read the data, which is called san_francisco_suicide_2003_2017.csv. We can name the object we make suicide. library(readr) suicide &lt;- read_csv(&quot;data/san_francisco_suicide_2003_2017.csv&quot;) #&gt; Rows: 1292 Columns: 14 #&gt; -- Column specification -------------------------------- #&gt; Delimiter: &quot;,&quot; #&gt; chr (8): Category, Descript, DayOfWeek, Date, PdDis... #&gt; dbl (5): IncidntNum, X, Y, PdId, year #&gt; time (1): Time #&gt; #&gt; i Use `spec()` to retrieve the full column specification for this data. #&gt; i Specify the column types or set `show_col_types = FALSE` to quiet this message. suicide &lt;- as.data.frame(suicide) This data contains information on each crime reported in San Francisco including the type of crime (in our case always suicide), a more detailed crime category, and a number of date and location variables. The columns X and Y are our longitude and latitude columns which we will use to graph the data. head(suicide) #&gt; IncidntNum Category #&gt; 1 180318931 SUICIDE #&gt; 2 180315501 SUICIDE #&gt; 3 180295674 SUICIDE #&gt; 4 180263659 SUICIDE #&gt; 5 180235523 SUICIDE #&gt; 6 180236515 SUICIDE #&gt; Descript DayOfWeek #&gt; 1 ATTEMPTED SUICIDE BY STRANGULATION Monday #&gt; 2 ATTEMPTED SUICIDE BY JUMPING Saturday #&gt; 3 SUICIDE BY LACERATION Saturday #&gt; 4 SUICIDE Tuesday #&gt; 5 ATTEMPTED SUICIDE BY INGESTION Friday #&gt; 6 SUICIDE BY ASPHYXIATION Thursday #&gt; Date Time PdDistrict Resolution #&gt; 1 04/30/2018 06:30:00 TARAVAL NONE #&gt; 2 04/28/2018 17:54:00 NORTHERN NONE #&gt; 3 04/21/2018 12:20:00 RICHMOND NONE #&gt; 4 04/10/2018 05:13:00 CENTRAL NONE #&gt; 5 03/30/2018 09:15:00 TARAVAL NONE #&gt; 6 03/29/2018 17:30:00 RICHMOND NONE #&gt; Address X Y #&gt; 1 0 Block of BRUCE AV -122.4517 37.72218 #&gt; 2 700 Block of HAYES ST -122.4288 37.77620 #&gt; 3 3700 Block of CLAY ST -122.4546 37.78818 #&gt; 4 0 Block of DRUMM ST -122.3964 37.79414 #&gt; 5 0 Block of FAIRFIELD WY -122.4632 37.72679 #&gt; 6 300 Block of 29TH AV -122.4893 37.78274 #&gt; Location #&gt; 1 POINT (-122.45168059935614 37.72218061554315) #&gt; 2 POINT (-122.42876060987851 37.77620120112792) #&gt; 3 POINT (-122.45462091999406 37.7881754224736) #&gt; 4 POINT (-122.39642194376758 37.79414474237039) #&gt; 5 POINT (-122.46324153155875 37.72679184368551) #&gt; 6 POINT (-122.48929119750689 37.782735835121265) #&gt; PdId year #&gt; 1 1.803189e+13 2018 #&gt; 2 1.803155e+13 2018 #&gt; 3 1.802957e+13 2018 #&gt; 4 1.802637e+13 2018 #&gt; 5 1.802355e+13 2018 #&gt; 6 1.802365e+13 2018 17.1 A simple map To make these maps we will use the package ggmap. install.packages(&quot;ggmap&quot;) library(ggmap) #&gt; Loading required package: ggplot2 #&gt; Google&#39;s Terms of Service: https://cloud.google.com/maps-platform/terms/. #&gt; Please cite ggmap if you use it! See citation(&quot;ggmap&quot;) for details. Well start by making the background to our map, showing San Francisco. We do so by using the get_map() function from ggmap which gets a map background from a number of sources. Well set the source to stamen since Google no longer allows us to get a map without creating an account. The first parameter in get_map() is simply coordinates for San Franciscos bounding box to ensure we get a map of the right spot. A bounding box is four coordinates that connect to make a rectangle, used for determining where in the world to show. An easy way to find the four coordinates for a bounding box is to go to the site Bounding Box. This site has a map of the world and a box on the screen. Move the box to the area you want the map of. You may need to resize the box to cover the area you want. Then in the section that says Copy &amp; Paste, change the dropdown box to CSV. In the section to the right of this are the four numbers that make up the bounding box. You can copy those numbers into get_map() sf_map &lt;- ggmap(get_map(c(-122.530392,37.698887,-122.351177,37.812996), source = &quot;stamen&quot;)) #&gt; Source : http://tile.stamen.com/terrain/12/653/1582.png #&gt; Source : http://tile.stamen.com/terrain/12/654/1582.png #&gt; Source : http://tile.stamen.com/terrain/12/655/1582.png #&gt; Source : http://tile.stamen.com/terrain/12/653/1583.png #&gt; Source : http://tile.stamen.com/terrain/12/654/1583.png #&gt; Source : http://tile.stamen.com/terrain/12/655/1583.png #&gt; Source : http://tile.stamen.com/terrain/12/653/1584.png #&gt; Source : http://tile.stamen.com/terrain/12/654/1584.png #&gt; Source : http://tile.stamen.com/terrain/12/655/1584.png sf_map Since we saved the map output into sf_map we can reuse this map background for all the maps were making in this lesson. This saves us time as we dont have to wait to download the map every time. Lets plot the shootings from our data set. Just as with a scatterplot we use the geom_point() function from the ggplot2 package and set our longitude and latitude variables on the x- and y-axis, respectively. sf_map + geom_point(aes(x = X, y = Y), data = suicide) #&gt; Warning: Removed 1 rows containing missing values #&gt; (geom_point). If we wanted to color the dots, we can use color = and then select a color. Lets try it with forestgreen. sf_map + geom_point(aes(x = X, y = Y), data = suicide, color = &quot;forestgreen&quot;) #&gt; Warning: Removed 1 rows containing missing values #&gt; (geom_point). As with other graphs we can change the size of the dot using size =. sf_map + geom_point(aes(x = X, y = Y), data = suicide, color = &quot;forestgreen&quot;, size = 0.5) #&gt; Warning: Removed 1 rows containing missing values #&gt; (geom_point). sf_map + geom_point(aes(x = X, y = Y), data = suicide, color = &quot;forestgreen&quot;, size = 2) #&gt; Warning: Removed 1 rows containing missing values #&gt; (geom_point). For maps like this - with one point per event - it is hard to tell if any events happen on the same, or nearly the same, location as each point is solid green. We want to make the dots semi-transparent so if multiple suicides happen at the same place that dot will be shaded darker than if only one suicide happened there. To do so we use the parameter alpha = which takes an input between 0 and 1 (inclusive). The lower the value the more transparent it is. sf_map + geom_point(aes(x = X, y = Y), data = suicide, color = &quot;forestgreen&quot;, size = 2, alpha = 0.5) #&gt; Warning: Removed 1 rows containing missing values #&gt; (geom_point). This map is useful because it allows us to easily see where each suicide in San Francisco happened between 2003 and 2017. There are some limitations though. This shows all suicides in a single map, meaning that any time trends are lost. 17.2 What really are maps? Lets pause for a moment to think about what a map really is. Below, I made a simple scatterplot of our data with one dot per shooting (minus the one without coordinates). Compare this to the map above and youll see that they are the same except the map has a useful background while the plot has a blank background. That is all static maps are (in Chapter 19 well learn about interactive maps), scatterplots of coordinates overlayed on a map background. Basically, they are scatterplots with context. And this context is useful, we can interpret the map to see that there are lots of suicides in the northeast part of San Francisco but not so many elsewhere, for example. The exact same pattern is present in the scatterplot but without the ability to tell where a dot is. plot(suicide$X, suicide$Y, col = &quot;forestgreen&quot;) 17.3 Making a hotspot map Now we can start making hotspot maps which help to show areas with clusters of events. Well do this using hexagonal bins which are an efficient way of showing clusters of events on a map. Our syntax will be similar to the map above but now we want to use the function stat_binhex() rather than geom_point(). It starts the same as before with aes(x = X, y = Y) (or whatever the longitude and latitude columns are called in your data), as well as data = suicide outside of the aes() parameter. There are two new things we need to make the hotspot map. First, we add the parameter bins = number_of_bins where number_of_bins is a number we select. bins essentially says how large or small we want each cluster of events to be. A smaller value for bins says we want more events clustered together, making larger bins. A larger value for bins has each bin be smaller on the map and capture fewer events. This will become clearer with examples. The second thing is to add the function coord_cartesian() which just tells ggplot() we are going to do some spatial analysis in the making of the bins. We dont need to add any parameters in this. Lets start with 60 bins and then try some other number of bins to see how it changes the map. sf_map + stat_binhex(aes(x = X, y = Y), bins = 60, data = suicide) + coord_cartesian() #&gt; Coordinate system already present. Adding new coordinate system, which will replace the existing one. #&gt; Warning: Removed 1 rows containing non-finite values #&gt; (stat_binhex). #&gt; Warning: Computation failed in `stat_binhex()`: #&gt; The `hexbin` package is required for `stat_binhex()` From this map we can see that most areas in the city had no suicides and that the areas with the most suicides are in downtown San Francisco. What happens when we drop the number of bins to 30? sf_map + stat_binhex(aes(x = X, y = Y), bins = 30, data = suicide) + coord_cartesian() #&gt; Coordinate system already present. Adding new coordinate system, which will replace the existing one. #&gt; Warning: Removed 1 rows containing non-finite values #&gt; (stat_binhex). #&gt; Warning: Computation failed in `stat_binhex()`: #&gt; The `hexbin` package is required for `stat_binhex()` Each bin is much larger and covers nearly all of San Francisco. Be careful with maps like these! This map is so broad that it appears that suicides are ubiquitous across the city. We know from the map showing each suicide as a dot, and that there are &lt;1,300 suicides, that this is not true. Making maps like this make it easy to mislead the reader, including yourself! What about looking at 100 bins? sf_map + stat_binhex(aes(x = X, y = Y), bins = 100, data = suicide) + coord_cartesian() #&gt; Coordinate system already present. Adding new coordinate system, which will replace the existing one. #&gt; Warning: Removed 1 rows containing non-finite values #&gt; (stat_binhex). #&gt; Warning: Computation failed in `stat_binhex()`: #&gt; The `hexbin` package is required for `stat_binhex()` Now each bin is very small and a much smaller area in San Francisco has had a suicide. So what is the right number of bins to use? There is no correct universal answer - you must decide what the goal is with the data you are using. This opens up serious issues for manipulation - intentional or not - of the data as the map is so easily changeable without ever changing the data itself. 17.3.1 Colors To change the bin colors we can use the parameter scale_fill_gradient(). This accepts a color for low which is when the events are rare and high for the bins with frequent events. Well use colors from ColorBrewer, selecting the yellow-reddish theme (3-class YlOrRd) from the Multi-hue section of the sequential data on the page. sf_map + stat_binhex(aes(x = X, y = Y), bins = 60, data = suicide) + coord_cartesian() + scale_fill_gradient(low = &quot;#ffeda0&quot;, high = &quot;#f03b20&quot;) #&gt; Coordinate system already present. Adding new coordinate system, which will replace the existing one. #&gt; Warning: Removed 1 rows containing non-finite values #&gt; (stat_binhex). #&gt; Warning: Computation failed in `stat_binhex()`: #&gt; The `hexbin` package is required for `stat_binhex()` By default it labels the legend as count. Since we know these are counts of suicides lets relabel that as such. sf_map + stat_binhex(aes(x = X, y = Y), bins = 60, data = suicide) + coord_cartesian() + scale_fill_gradient(&#39;Suicides&#39;, low = &quot;#ffeda0&quot;, high = &quot;#f03b20&quot;) #&gt; Coordinate system already present. Adding new coordinate system, which will replace the existing one. #&gt; Warning: Removed 1 rows containing non-finite values #&gt; (stat_binhex). #&gt; Warning: Computation failed in `stat_binhex()`: #&gt; The `hexbin` package is required for `stat_binhex()` "],["choropleth-maps.html", "18 Choropleth maps 18.1 Spatial joins 18.2 Making choropleth maps", " 18 Choropleth maps For this chapter youll need the following files, which are available for download here: san_francisco_suicide_2003_2017.csv, san_francisco_neighborhoods.dbf, san_francisco_neighborhoods.prj, san_francisco_neighborhoods.shp, san_francisco_neighborhoods.shx. In Chapter 17 we made hotspot maps to show which areas in San Francisco had the most suicides. We made the maps in a number of ways and consistently found that suicides were most prevalent in northeast San Francisco. In this lesson we will make choropleth maps, which are shaded maps where each unit is some known area such as a state or neighborhood. Think of election maps where states are colored blue when a Democratic candidate wins that state and red when a Republican candidate wins. These are choropleth maps - each state is colored to indicate something. In this lesson we will continue to work on the suicide data and make choropleth maps shaded by the number of suicides in each neighborhood (we will define this later in the lesson) in the city. Since we will be working more on the suicide data from San Francisco, lets read it in now. library(readr) suicide &lt;- read_csv(&quot;data/san_francisco_suicide_2003_2017.csv&quot;) #&gt; Rows: 1292 Columns: 14 #&gt; -- Column specification -------------------------------- #&gt; Delimiter: &quot;,&quot; #&gt; chr (8): Category, Descript, DayOfWeek, Date, PdDis... #&gt; dbl (5): IncidntNum, X, Y, PdId, year #&gt; time (1): Time #&gt; #&gt; i Use `spec()` to retrieve the full column specification for this data. #&gt; i Specify the column types or set `show_col_types = FALSE` to quiet this message. suicide &lt;- as.data.frame(suicide) The package that we will use to handle geographic data and do most of the work in this lesson is sf. sf is a sophisticated package and does far more than what we will cover in this lesson. For more information about the packages features please see the website for it here. install.packages(&quot;sf&quot;) library(sf) #&gt; Linking to GEOS 3.9.1, GDAL 3.2.1, PROJ 7.2.1 For this lesson we will need to read in a shapefile that depicts the boundaries of each neighborhood in San Francisco. A shapefile is similar to a data.frame but has information on how to draw a geographic boundary such as a state. The way sf reads in the shapefiles is through the st_read() function. Our input inside the () is a string with the name of the .shp file we want to read in (since we are telling R to read a file on the computer rather than an object that exists, it needs to be in quotes). This shapefile contains neighborhoods in San Francisco so well call the object sf_neighborhoods. I downloaded this data from San Franciscos Open Data site here, selecting the Shapefile format in the Export tab. If you do so yourself itll give you a zip file with multiple files in there. This is normal with shapefiles, you will have multiple files and only read in the file with the .shp extension to R. We still do need all of the files and st_read() is using them even if not explicitly called. So make sure every file downloaded is in the same working directory as the .shp file. The files from this site had hard to understand file names so I relabeled them all as san_francisco_neighborhoods though that doesnt matter once its read into R. sf_neighborhoods &lt;- st_read(&quot;data/san_francisco_neighborhoods.shp&quot;) #&gt; Reading layer `san_francisco_neighborhoods&#39; from data source `C:\\Users\\jkkap\\Dropbox\\crimebythenumbers\\data\\san_francisco_neighborhoods.shp&#39; #&gt; using driver `ESRI Shapefile&#39; #&gt; Simple feature collection with 41 features and 1 field #&gt; Geometry type: MULTIPOLYGON #&gt; Dimension: XY #&gt; Bounding box: xmin: -122.5149 ymin: 37.70813 xmax: -122.357 ymax: 37.8333 #&gt; Geodetic CRS: WGS84(DD) As usual when dealing with a new data set, lets look at the first 6 rows. head(sf_neighborhoods) #&gt; Simple feature collection with 6 features and 1 field #&gt; Geometry type: MULTIPOLYGON #&gt; Dimension: XY #&gt; Bounding box: xmin: -122.4543 ymin: 37.70822 xmax: -122.357 ymax: 37.80602 #&gt; Geodetic CRS: WGS84(DD) #&gt; nhood #&gt; 1 Bayview Hunters Point #&gt; 2 Bernal Heights #&gt; 3 Castro/Upper Market #&gt; 4 Chinatown #&gt; 5 Excelsior #&gt; 6 Financial District/South Beach #&gt; geometry #&gt; 1 MULTIPOLYGON (((-122.3816 3... #&gt; 2 MULTIPOLYGON (((-122.4036 3... #&gt; 3 MULTIPOLYGON (((-122.4266 3... #&gt; 4 MULTIPOLYGON (((-122.4062 3... #&gt; 5 MULTIPOLYGON (((-122.424 37... #&gt; 6 MULTIPOLYGON (((-122.3875 3... The last column is important. In shapefiles, the geometry column is the one with the instructions to make the map. This data has a single row for each neighborhood in the city. So the geometry column in each row has a list of coordinates which, if connected in order, make up that neighborhood. Since the geometry column contains the instructions to map, we can plot() it to show a map of the data. plot(sf_neighborhoods$geometry) Here we have a map of San Francisco broken up into neighborhoods. Is this a perfect representation of the neighborhoods in San Francisco? No.Â It is simply the citys attempt to create definitions of neighborhoods. Indeed, youre likely to find that areas at the border of neighborhoods are more similar to each other than they are to areas at the opposite side of their designated neighborhood. You can read a bit about how San Francisco determined the neighborhood boundaries here but know that this, like all geographic areas that someone has designated, has some degree of inaccuracy and arbitrariness in it. Like many things in criminology, this is just another limitation we will have to keep in mind. In the head() results there was a section about something called epsg and proj4string. Lets talk about that specifically since they are important for working with spatial data. A way to get just those two results in the st_crs() function which is part of sf. Lets look at the coordinate reference system (CRS) for sf_neighborhoods. st_crs(sf_neighborhoods) Coordinate Reference System: User input: WGS84(DD) wkt: GEOGCRS[&quot;WGS84(DD)&quot;, DATUM[&quot;WGS84&quot;, ELLIPSOID[&quot;WGS84&quot;,6378137,298.257223563, LENGTHUNIT[&quot;metre&quot;,1, ID[&quot;EPSG&quot;,9001]]]], PRIMEM[&quot;Greenwich&quot;,0, ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], CS[ellipsoidal,2], AXIS[&quot;geodetic longitude&quot;,east, ORDER[1], ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], AXIS[&quot;geodetic latitude&quot;,north, ORDER[2], ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]]] An issue with working with geographic data is that the Earth is not flat. Since the Earth is spherical, there will always be some distortion when trying to plot the data on a flat surface such as a map. To account for this we need to transform the longitude and latitude values we generally have to work properly on a map. We do so by projecting our data onto the areas of the Earth we want. This is a complex field with lots of work done on it (both abstractly and for R specifically) so this lesson will be an extremely brief overview of the topic and oversimplify some aspects of it. If we look at the output of st_crs(sf_neighborhoods) we can see that the EPSG is set to 4326 and the proj4string (which tells us the current map projection) is +proj=longlat +datum=WGS84 +no_defs. This CRS, WGS84, is a standard CRS and is the one used whenever you use a GPS to find a location. To find the CRS for certain parts of the world see here. If you search that site for California youll see that California is broken into 6 zones. The site isnt that helpful on which zones are which but some Googling can often find state or region maps with the zones depicted there. We want California zone 3 which has the EPSG code 2227. Well use this code to project this data properly. If we want to get the proj4string for 2227 we can use st_crs(2227) #&gt; Coordinate Reference System: #&gt; User input: EPSG:2227 #&gt; wkt: #&gt; PROJCRS[&quot;NAD83 / California zone 3 (ftUS)&quot;, #&gt; BASEGEOGCRS[&quot;NAD83&quot;, #&gt; DATUM[&quot;North American Datum 1983&quot;, #&gt; ELLIPSOID[&quot;GRS 1980&quot;,6378137,298.257222101, #&gt; LENGTHUNIT[&quot;metre&quot;,1]]], #&gt; PRIMEM[&quot;Greenwich&quot;,0, #&gt; ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], #&gt; ID[&quot;EPSG&quot;,4269]], #&gt; CONVERSION[&quot;SPCS83 California zone 3 (US Survey feet)&quot;, #&gt; METHOD[&quot;Lambert Conic Conformal (2SP)&quot;, #&gt; ID[&quot;EPSG&quot;,9802]], #&gt; PARAMETER[&quot;Latitude of false origin&quot;,36.5, #&gt; ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], #&gt; ID[&quot;EPSG&quot;,8821]], #&gt; PARAMETER[&quot;Longitude of false origin&quot;,-120.5, #&gt; ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], #&gt; ID[&quot;EPSG&quot;,8822]], #&gt; PARAMETER[&quot;Latitude of 1st standard parallel&quot;,38.4333333333333, #&gt; ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], #&gt; ID[&quot;EPSG&quot;,8823]], #&gt; PARAMETER[&quot;Latitude of 2nd standard parallel&quot;,37.0666666666667, #&gt; ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], #&gt; ID[&quot;EPSG&quot;,8824]], #&gt; PARAMETER[&quot;Easting at false origin&quot;,6561666.667, #&gt; LENGTHUNIT[&quot;US survey foot&quot;,0.304800609601219], #&gt; ID[&quot;EPSG&quot;,8826]], #&gt; PARAMETER[&quot;Northing at false origin&quot;,1640416.667, #&gt; LENGTHUNIT[&quot;US survey foot&quot;,0.304800609601219], #&gt; ID[&quot;EPSG&quot;,8827]]], #&gt; CS[Cartesian,2], #&gt; AXIS[&quot;easting (X)&quot;,east, #&gt; ORDER[1], #&gt; LENGTHUNIT[&quot;US survey foot&quot;,0.304800609601219]], #&gt; AXIS[&quot;northing (Y)&quot;,north, #&gt; ORDER[2], #&gt; LENGTHUNIT[&quot;US survey foot&quot;,0.304800609601219]], #&gt; USAGE[ #&gt; SCOPE[&quot;Engineering survey, topographic mapping.&quot;], #&gt; AREA[&quot;United States (USA) - California - counties Alameda; Calaveras; Contra Costa; Madera; Marin; Mariposa; Merced; Mono; San Francisco; San Joaquin; San Mateo; Santa Clara; Santa Cruz; Stanislaus; Tuolumne.&quot;], #&gt; BBOX[36.73,-123.02,38.71,-117.83]], #&gt; ID[&quot;EPSG&quot;,2227]] Note the text in prj4string that says +units=us-ft. This means that the units are in feet. Some projections have units in meters so be mindful of this when doing some analysis such as seeing if a point is within X feet of a certain area. Lets convert our sf_neighborhoods data to coordinate reference system 2227. sf_neighborhoods &lt;- st_transform(sf_neighborhoods, crs = 2227) st_crs(sf_neighborhoods) Coordinate Reference System: User input: EPSG:2227 wkt: PROJCRS[&quot;NAD83 / California zone 3 (ftUS)&quot;, BASEGEOGCRS[&quot;NAD83&quot;, DATUM[&quot;North American Datum 1983&quot;, ELLIPSOID[&quot;GRS 1980&quot;,6378137,298.257222101, LENGTHUNIT[&quot;metre&quot;,1]]], PRIMEM[&quot;Greenwich&quot;,0, ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ID[&quot;EPSG&quot;,4269]], CONVERSION[&quot;SPCS83 California zone 3 (US Survey feet)&quot;, METHOD[&quot;Lambert Conic Conformal (2SP)&quot;, ID[&quot;EPSG&quot;,9802]], PARAMETER[&quot;Latitude of false origin&quot;,36.5, ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ID[&quot;EPSG&quot;,8821]], PARAMETER[&quot;Longitude of false origin&quot;,-120.5, ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ID[&quot;EPSG&quot;,8822]], PARAMETER[&quot;Latitude of 1st standard parallel&quot;,38.4333333333333, ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ID[&quot;EPSG&quot;,8823]], PARAMETER[&quot;Latitude of 2nd standard parallel&quot;,37.0666666666667, ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ID[&quot;EPSG&quot;,8824]], PARAMETER[&quot;Easting at false origin&quot;,6561666.667, LENGTHUNIT[&quot;US survey foot&quot;,0.304800609601219], ID[&quot;EPSG&quot;,8826]], PARAMETER[&quot;Northing at false origin&quot;,1640416.667, LENGTHUNIT[&quot;US survey foot&quot;,0.304800609601219], ID[&quot;EPSG&quot;,8827]]], CS[Cartesian,2], AXIS[&quot;easting (X)&quot;,east, ORDER[1], LENGTHUNIT[&quot;US survey foot&quot;,0.304800609601219]], AXIS[&quot;northing (Y)&quot;,north, ORDER[2], LENGTHUNIT[&quot;US survey foot&quot;,0.304800609601219]], USAGE[ SCOPE[&quot;Engineering survey, topographic mapping.&quot;], AREA[&quot;United States (USA) - California - counties Alameda; Calaveras; Contra Costa; Madera; Marin; Mariposa; Merced; Mono; San Francisco; San Joaquin; San Mateo; Santa Clara; Santa Cruz; Stanislaus; Tuolumne.&quot;], BBOX[36.73,-123.02,38.71,-117.83]], ID[&quot;EPSG&quot;,2227]] 18.1 Spatial joins What we want to do with these neighborhoods is to find out which neighborhood each suicide occurred in and sum up the number of suicides per neighborhood. Once we do that, we can make a map at the neighborhood level and be able to measure suicides-per-neighborhood. A spatial join is very similar to regular joins where we merge two data sets based on common variables (such as state name or unique ID code of a person). In this case it merges based on some shared geographic feature such as if two lines intersect or (as we will do so here) if a point is within some geographic area. Right now our suicide data is in a data.frame with some info on each suicide and the longitude and latitude of the suicide in separate columns. We want to turn this data.frame into a spatial object to allow us to find which neighborhood each suicide happened in. We can convert it into a spatial object using the st_as_sf() function from sf. Our input is first our data, suicide. Then in the coords parameter we put a vector of the column names so the function knows which columns the longitude and latitude columns are so it can convert those columns to a geometry column like we saw in sf_neighborhoods earlier. Well set the CRS to be the WGS84 standard we saw earlier but we will change it to match the CRS that the neighborhood data has. suicide &lt;- st_as_sf(suicide, coords = c(&quot;X&quot;, &quot;Y&quot;), crs = &quot;+proj=longlat +ellps=WGS84 +no_defs&quot;) We want our suicides data in the same projection as the neighborhoods data so we need to use st_transform() to change the projection. Since we want the CRS to be the same as in sf_neighborhoods, we can set it using st_crs(sf_neighborhoods) to use the right CRS. suicide &lt;- st_transform(suicide, crs = st_crs(sf_neighborhoods)) Now we can take a look at head() to see if it was projected. head(suicide) #&gt; Simple feature collection with 6 features and 12 fields #&gt; Geometry type: POINT #&gt; Dimension: XY #&gt; Bounding box: xmin: 5986822 ymin: 2091310 xmax: 6013739 ymax: 2117180 #&gt; Projected CRS: NAD83 / California zone 3 (ftUS) #&gt; IncidntNum Category #&gt; 1 180318931 SUICIDE #&gt; 2 180315501 SUICIDE #&gt; 3 180295674 SUICIDE #&gt; 4 180263659 SUICIDE #&gt; 5 180235523 SUICIDE #&gt; 6 180236515 SUICIDE #&gt; Descript DayOfWeek #&gt; 1 ATTEMPTED SUICIDE BY STRANGULATION Monday #&gt; 2 ATTEMPTED SUICIDE BY JUMPING Saturday #&gt; 3 SUICIDE BY LACERATION Saturday #&gt; 4 SUICIDE Tuesday #&gt; 5 ATTEMPTED SUICIDE BY INGESTION Friday #&gt; 6 SUICIDE BY ASPHYXIATION Thursday #&gt; Date Time PdDistrict Resolution #&gt; 1 04/30/2018 06:30:00 TARAVAL NONE #&gt; 2 04/28/2018 17:54:00 NORTHERN NONE #&gt; 3 04/21/2018 12:20:00 RICHMOND NONE #&gt; 4 04/10/2018 05:13:00 CENTRAL NONE #&gt; 5 03/30/2018 09:15:00 TARAVAL NONE #&gt; 6 03/29/2018 17:30:00 RICHMOND NONE #&gt; Address #&gt; 1 0 Block of BRUCE AV #&gt; 2 700 Block of HAYES ST #&gt; 3 3700 Block of CLAY ST #&gt; 4 0 Block of DRUMM ST #&gt; 5 0 Block of FAIRFIELD WY #&gt; 6 300 Block of 29TH AV #&gt; Location #&gt; 1 POINT (-122.45168059935614 37.72218061554315) #&gt; 2 POINT (-122.42876060987851 37.77620120112792) #&gt; 3 POINT (-122.45462091999406 37.7881754224736) #&gt; 4 POINT (-122.39642194376758 37.79414474237039) #&gt; 5 POINT (-122.46324153155875 37.72679184368551) #&gt; 6 POINT (-122.48929119750689 37.782735835121265) #&gt; PdId year geometry #&gt; 1 1.803189e+13 2018 POINT (5997229 2091310) #&gt; 2 1.803155e+13 2018 POINT (6004262 2110838) #&gt; 3 1.802957e+13 2018 POINT (5996881 2115353) #&gt; 4 1.802637e+13 2018 POINT (6013739 2117180) #&gt; 5 1.802355e+13 2018 POINT (5993921 2093059) #&gt; 6 1.802365e+13 2018 POINT (5986822 2113584) We can see it is now a simple feature collection with the correct projection. And we can see there is a new column called geometry just like in sf_neighborhoods. The type of data in geometry is POINT since our data is just a single location instead of a polygon like in the neighborhoods data. Since we have both the neighborhoods and the suicides data lets make a quick map to see the data. plot(sf_neighborhoods$geometry) plot(suicide$geometry, add = TRUE, col = &quot;red&quot;) Our next step is to combine these two data sets to figure out how many suicides occurred in each neighborhood. This will be a multi-step process so lets plan it out before beginning. Our suicide data is one row for each suicide, our neighborhood data is one row for each neighborhood. Since our goal is to map at the neighborhood-level we need to get the neighborhood where each suicide occurred then aggregate up to the neighborhood-level to get a count of the suicides-per-neighborhood. Then we need to combine that with that the original neighborhood data (since we need the geometry column) and we can then map it. Find which neighborhood each suicide happened in Aggregate suicide data until we get one row per neighborhood and a column showing the number of suicides in that neighborhood Combine with the neighborhood data Make a map Well start by finding the neighborhood where each suicide occurred using the function st_join() which is a function in sf. This does a spatial join and finds the polygon (neighborhood in our case) where each point is located in. Since we will be aggregating the data, lets call the output of this function suicide_agg. The order in the () is important! For our aggregation we want the output to be at the suicide-level so we start with the suicide data. In the next step well see why this matters. suicide_agg &lt;- st_join(suicide, sf_neighborhoods) Lets look at the first 6 rows. head(suicide_agg) #&gt; Simple feature collection with 6 features and 13 fields #&gt; Geometry type: POINT #&gt; Dimension: XY #&gt; Bounding box: xmin: 5986822 ymin: 2091310 xmax: 6013739 ymax: 2117180 #&gt; Projected CRS: NAD83 / California zone 3 (ftUS) #&gt; IncidntNum Category #&gt; 1 180318931 SUICIDE #&gt; 2 180315501 SUICIDE #&gt; 3 180295674 SUICIDE #&gt; 4 180263659 SUICIDE #&gt; 5 180235523 SUICIDE #&gt; 6 180236515 SUICIDE #&gt; Descript DayOfWeek #&gt; 1 ATTEMPTED SUICIDE BY STRANGULATION Monday #&gt; 2 ATTEMPTED SUICIDE BY JUMPING Saturday #&gt; 3 SUICIDE BY LACERATION Saturday #&gt; 4 SUICIDE Tuesday #&gt; 5 ATTEMPTED SUICIDE BY INGESTION Friday #&gt; 6 SUICIDE BY ASPHYXIATION Thursday #&gt; Date Time PdDistrict Resolution #&gt; 1 04/30/2018 06:30:00 TARAVAL NONE #&gt; 2 04/28/2018 17:54:00 NORTHERN NONE #&gt; 3 04/21/2018 12:20:00 RICHMOND NONE #&gt; 4 04/10/2018 05:13:00 CENTRAL NONE #&gt; 5 03/30/2018 09:15:00 TARAVAL NONE #&gt; 6 03/29/2018 17:30:00 RICHMOND NONE #&gt; Address #&gt; 1 0 Block of BRUCE AV #&gt; 2 700 Block of HAYES ST #&gt; 3 3700 Block of CLAY ST #&gt; 4 0 Block of DRUMM ST #&gt; 5 0 Block of FAIRFIELD WY #&gt; 6 300 Block of 29TH AV #&gt; Location #&gt; 1 POINT (-122.45168059935614 37.72218061554315) #&gt; 2 POINT (-122.42876060987851 37.77620120112792) #&gt; 3 POINT (-122.45462091999406 37.7881754224736) #&gt; 4 POINT (-122.39642194376758 37.79414474237039) #&gt; 5 POINT (-122.46324153155875 37.72679184368551) #&gt; 6 POINT (-122.48929119750689 37.782735835121265) #&gt; PdId year nhood #&gt; 1 1.803189e+13 2018 Oceanview/Merced/Ingleside #&gt; 2 1.803155e+13 2018 Hayes Valley #&gt; 3 1.802957e+13 2018 Presidio Heights #&gt; 4 1.802637e+13 2018 Financial District/South Beach #&gt; 5 1.802355e+13 2018 West of Twin Peaks #&gt; 6 1.802365e+13 2018 Outer Richmond #&gt; geometry #&gt; 1 POINT (5997229 2091310) #&gt; 2 POINT (6004262 2110838) #&gt; 3 POINT (5996881 2115353) #&gt; 4 POINT (6013739 2117180) #&gt; 5 POINT (5993921 2093059) #&gt; 6 POINT (5986822 2113584) There is now the nhood column from the neighborhoods data which says which neighborhood the suicide happened in. Now we can aggregate up to the neighborhood-level using group_by() and summarize() functions from the dplyr package. We actually dont have a variable with the number of suicides so we need to make that. We can simply call it number_suicides and give it that value of 1 since each row is only one suicide. suicide_agg$number_suicides &lt;- 1 Now we can aggregate the data and save the results back into suicide_agg. library(dplyr) #&gt; #&gt; Attaching package: &#39;dplyr&#39; #&gt; The following objects are masked from &#39;package:stats&#39;: #&gt; #&gt; filter, lag #&gt; The following objects are masked from &#39;package:base&#39;: #&gt; #&gt; intersect, setdiff, setequal, union suicide_agg &lt;- suicide_agg %&gt;% group_by(nhood) %&gt;% summarize(number_suicides = sum(number_suicides)) Lets check a summary of the number_suicides variable we made. summary(suicide_agg$number_suicides) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; 1.00 13.50 23.50 32.30 37.25 141.00 The minimum is one suicide per neighborhood, 33 on average, and 141 in the neighborhood with the most suicides. So what do we make of this data? Well, there are some data issues that cause problems in these results. Lets think about the minimum value. Did every single neighborhood in the city have at least one suicide? No.Â Take a look at the number of rows in this data, keeping in mind there should be one row per neighborhood. nrow(suicide_agg) #&gt; [1] 40 And lets compare it to the sf_neighborhoods data. nrow(sf_neighborhoods) #&gt; [1] 41 The suicides data is missing 1 neighborhood. That is because if no suicides occurred there, there would never be a matching row in the data so that neighborhood wouldnt appear in the suicide data. Thats not going to be a major issue here but is something to keep in mind in future research. The data is ready to merge with the sf_neighborhoods data. Well introduce a new function that makes merging data simple. This function comes from the dplyr package. The function we will use is left_join() which takes two parameters, the two data sets to join together. left_join(data1, data2) This function joins these data and keeps all of the rows from the left data and every column from both data sets. It combines the data based on any matching columns (matching meaning same column name) in both data sets. Since in our data sets, the column nhood exists in both, it will merge the data based on that column. There are two other functions that are similar but differ based on which rows they keep. left_join() - All rows from Left data and all columns from Left and Right data right_join() - All rows from Right data and all columns from Left and Right data full_join() - All rows and all columns from Left and Right data We could alternatively use the merge() function which is built into R but that function is slower than the dplyr functions and requires us to manually set the matching columns. We want to keep all rows in sf_neighborhoods (keep all neighborhoods) so we can use left_join(sf_neighborhoods, suicide_agg). Lets save the results into a new data.frame called sf_neighborhoods_suicide. We dont need the spatial data for suicide_agg anymore and it will cause problems with our join if we keep it, so lets delete the geometry column from that data. We can do this by assigning the column the value of NULL. suicide_agg$geometry &lt;- NULL Now we can do our join. sf_neighborhoods_suicide &lt;- left_join(sf_neighborhoods, suicide_agg) #&gt; Joining, by = &quot;nhood&quot; If we look at summary() again for number_suicides we can see that there are now 2 rows with NAs. These are the neighborhoods where there were no suicides so they werent present in the suicide_agg data. summary(sf_neighborhoods_suicide$number_suicides) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s #&gt; 1.00 15.00 24.00 33.08 38.50 141.00 2 We need to convert these values to 0. We will use the is.na() function to conditionally find all rows with an NA value in the number_suicides column and use square bracket notation to change the value to 0. sf_neighborhoods_suicide$number_suicides[is.na(sf_neighborhoods_suicide$number_suicides)] &lt;- 0 Checking it again we see that the minimum is now 0 and the mean number of suicides decreases a bit to about 31.5 per neighborhood. summary(sf_neighborhoods_suicide$number_suicides) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; 0.00 12.00 23.00 31.46 36.00 141.00 18.2 Making choropleth maps Finally we are ready to make some choropleth maps. For these maps we are going to use ggplot2 again so we need to load it. library(ggplot2) ggplot2s benefit is you can slowly build graphs or maps and improve the graph at every step. Earlier, we used functions such as geom_line() for line graphs and geom_point() for scatter plots. For mapping these polygons we will use geom_sf() which knows how to handle spatial data. As usual we will start with ggplot(), inputting our data first. Then inside of aes (the aesthetics of the graph/map) we use a new parameter fill. In fill we will put in the number_suicides column and it will color the polygons (neighborhoods) based on values in that column. Then we can add the geom_sf(). ggplot(sf_neighborhoods_suicide, aes(fill = number_suicides)) + geom_sf() We have now created a choropleth map showing the number of suicides per neighborhood in San Francisco! Based on the legend, neighborhoods that are light blue have the most suicides while neighborhoods that are dark blue have the fewest (or none at all). Normally wed want the opposite, with darker areas signifying a greater amount of whatever the map is showing. We can use scale_fill_gradient() to set the colors to what we want. We input a color for low value and a color for high value and itll make the map shade by those colors. ggplot(sf_neighborhoods_suicide, aes(fill = number_suicides)) + geom_sf() + scale_fill_gradient(low = &quot;white&quot;, high = &quot;red&quot;) This gives a much better map and clearly shows the areas where suicides are most common and where there were no suicides. To make this map easier to read and look better, lets add a title to the map and to the legend. ggplot(sf_neighborhoods_suicide, aes(fill = number_suicides)) + geom_sf() + scale_fill_gradient(low = &quot;white&quot;, high = &quot;red&quot;) + labs(fill = &quot;# of suicides&quot;, title = &quot;Suicides in San Francisco, by neighborhood&quot;, subtitle = &quot;2003 - 2017&quot;) Since the coordinates dont add anything to the map, lets get rid of them. ggplot(sf_neighborhoods_suicide, aes(fill = number_suicides)) + geom_sf() + scale_fill_gradient(low = &quot;white&quot;, high = &quot;red&quot;) + labs(fill = &quot;# of suicides&quot;, title = &quot;Suicides in San Francisco, by neighborhood&quot;, subtitle = &quot;2003 - 2017&quot;) + theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank()) So what should we take away from this map? There are more suicides in the downtown area than any other place in the city. Does this mean that people are more likely to kill themselves there than elsewhere? Not necessarily. A major mistake people make when making a choropleth map (or really any type of map) is accidentally making a population map. The darker shaded parts of our map are also where a lot of people live. So if there are more people, it is reasonable that there would be more suicides (or crimes, etc.). What wed really want to do is make a rate per some population (usually per 100k though this assumes equal risk for every person in the city which isnt really correct) to control for population differences. Well use this data in Chapter 19 to make interactive choropleth maps so lets save it. save(sf_neighborhoods_suicide, file = &quot;data/sf_neighborhoods_suicide.rda&quot;) "],["interactive-maps.html", "19 Interactive maps 19.1 Why do interactive graphs matter? 19.2 Making the interactive map 19.3 Adding popup information 19.4 Dealing with too many markers 19.5 Interactive choropleth maps", " 19 Interactive maps For this chapter youll need the following files, which are available for download here: san_francisco_marijuana_geocoded.csv and sf_neighborhoods_suicide.rda. While maps of data are useful, their ability to show incident-level information is quite limited. They tend to show broad trends - where crime happened in a city - rather than provide information about specific crime incidents. While broad trends are important, there are significant drawbacks about being unable to get important information about an incident without having to check the data. An interactive map bridges this gap by showing trends while allowing you to zoom into individual incidents and see information about each incident. For this lesson we will be using data on every marijuana dispensary in San Francisco that has an active dispensary license as of late September 2019. The file is called san_francisco_marijuana_geocoded.csv. When downloaded from Californias Bureau of Cannabis Control (here if youre interested) the data contains the address of each dispensary but does not have coordinates. Without coordinates we are unable to map points, meaning we need to geocode them. Geocoding is the process of taking an address and getting the longitude and latitude of that address for mapping. For this lesson Ive already geocoded the data and well learn how to do so in Chapter 25. library(readr) marijuana &lt;- read_csv(&quot;data/san_francisco_marijuana_geocoded.csv&quot;) #&gt; Rows: 33 Columns: 13 #&gt; -- Column specification -------------------------------- #&gt; Delimiter: &quot;,&quot; #&gt; chr (11): License_Number, License_Type, Business_Own... #&gt; dbl (2): lat, long #&gt; #&gt; i Use `spec()` to retrieve the full column specification for this data. #&gt; i Specify the column types or set `show_col_types = FALSE` to quiet this message. marijuana &lt;- as.data.frame(marijuana) 19.1 Why do interactive graphs matter? 19.1.1 Understanding your data The most important thing to learn from this course is that understanding your data is crucial to good research. Making interactive maps is a very useful way to better understand your data as you can immediately see geographic patterns and quickly look at characteristics of those incidents to understand them. In this lesson we will make a map of each marijuana dispensary in San Francisco that lets you click on the dispensary and see some information about it. If we see a cluster of dispensaries, we can click on each one to see if they are similar - for example if owned by the same person. Though it is possible to find these patterns just looking at the data, it is easier to be able to see a geographic pattern and immediately look at information about each incident. 19.1.2 Police departments use them Interactive maps are popular in large police departments such as Philadelphia and New York City. They allow easy understanding of geographic patterns in the data and, importantly, allow such access to people who do not have the technical skills necessary to create the maps. If nothing else, learning interactive maps may help you with a future job. 19.2 Making the interactive map As usual, lets take a look at the top 6 rows of the data. head(marijuana) #&gt; License_Number License_Type #&gt; 1 C10-0000614-LIC Cannabis - Retailer License #&gt; 2 C10-0000586-LIC Cannabis - Retailer License #&gt; 3 C10-0000587-LIC Cannabis - Retailer License #&gt; 4 C10-0000539-LIC Cannabis - Retailer License #&gt; 5 C10-0000522-LIC Cannabis - Retailer License #&gt; 6 C10-0000523-LIC Cannabis - Retailer License #&gt; Business_Owner #&gt; 1 Terry Muller #&gt; 2 Jeremy Goodin #&gt; 3 Justin Jarin #&gt; 4 Ondyn Herschelle #&gt; 5 Ryan Hudson #&gt; 6 Ryan Hudson #&gt; Business_Contact_Information #&gt; 1 OUTER SUNSET HOLDINGS, LLC : Barbary Coast Sunset : Email- terry@barbarycoastsf.com : Phone- 5107173246 #&gt; 2 URBAN FLOWERS : Urban Pharm : Email- hilary@urbanpharmsf.com : Phone- 9168335343 : Website- www.up415.com #&gt; 3 CCPC, INC. : The Green Door : Email- alicia@greendoorsf.com : Phone- 4155419590 : Website- www.greendoorsf.com #&gt; 4 SEVENTY SECOND STREET : Flower Power SF : Email- flowerpowersf@hotmail.com : Phone- 5103681262 : Website- flowerpowerdispensary.com #&gt; 5 HOWARD STREET PARTNERS, LLC : The Apothecarium : Email- Ryan@apothecarium.com : Phone- 4157469001 : Website- www.apothecarium.com #&gt; 6 DEEP THOUGHT, LLC : The Apothecarium : Email- ryan@pothecarium.com : Phone- 4157469001 : Website- www.Apothecarium.com #&gt; Business_Structure #&gt; 1 Limited Liability Company #&gt; 2 Corporation #&gt; 3 Corporation #&gt; 4 Corporation #&gt; 5 Limited Liability Company #&gt; 6 Limited Liability Company #&gt; Premise_Address Status #&gt; 1 2165 IRVING ST san francisco, CA 94122 Active #&gt; 2 122 10TH ST SAN FRANCISCO, CA 941032605 Active #&gt; 3 843 Howard ST SAN FRANCISCO, CA 94103 Active #&gt; 4 70 SECOND ST SAN FRANCISCO, CA 94105 Active #&gt; 5 527 Howard ST San Francisco, CA 94105 Active #&gt; 6 2414 Lombard ST San Francisco, CA 94123 Active #&gt; Issue_Date Expiration_Date Activities #&gt; 1 9/13/2019 9/12/2020 N/A for this license type #&gt; 2 8/26/2019 8/25/2020 N/A for this license type #&gt; 3 8/26/2019 8/25/2020 N/A for this license type #&gt; 4 8/5/2019 8/4/2020 N/A for this license type #&gt; 5 7/29/2019 7/28/2020 N/A for this license type #&gt; 6 7/29/2019 7/28/2020 N/A for this license type #&gt; Adult-Use/Medicinal lat long #&gt; 1 BOTH 37.76318 -122.4811 #&gt; 2 BOTH 37.77480 -122.4157 #&gt; 3 BOTH 37.78228 -122.4035 #&gt; 4 BOTH 37.78823 -122.4004 #&gt; 5 BOTH 37.78783 -122.3965 #&gt; 6 BOTH 37.79945 -122.4414 This data has information about the type of license, who the owner is, where the dispensary is (as an address and as coordinates), and contact information. Well be making a map showing every dispensary in the city and make it so when you click a dot itll make a popup showing information about that dispensary. We will use the package leaflet for our interactive map. leaflet produces maps similar to Google Maps with circles (or any icon we choose) for each value we add to the map. It allows you to zoom in, scroll around, and provides context to each incident that isnt available on a static map. install.packages(&quot;leaflet&quot;) library(leaflet) To make a leaflet map we need to run the function leaflet() and add a tile to the map. A tile is simply the background of the map. This website provides a large number of potential tiles to use, though many are not relevant to our purposes of crime mapping. We will use a standard tile from Open Street Maps. This tile gives street names and highlights important features such has parks and large stores which provides useful contexts for looking at the data. The attribution parameter isnt strictly necessary but it is good form to say where your tile is from. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) When you run the above code it shows a world map (copied several times). Zoom into it and itll start showing relevant features of wherever youre looking. Note the %&gt;% between the leaflet() function and the addTiles() function. This is called a pipe in R and is used like the + in ggplot() to combine multiple functions together. This is used heavily in what is called the tidyverse, a series of packages that are prominent in modern R and useful for data analysis. We wont be covering them in this book but for more information on them you can check the tidyverse website. For this lesson you need to know that each piece of the leaflet function must end with %&gt;% for the next line to work. To add the points to the graph we use the function addMarkers() which has two parameters, lng and lat. For both parameters we put the column in which the longitude and latitude are, respectively. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addMarkers(lng = marijuana$long, lat = marijuana$lat) It now adds an icon indicating where every dispensary in our data is. You can zoom in and scroll around to see more about where the dispensaries are. There are only a few dozen locations in the data so the popups overlapping a bit doesnt affect our map too much. If we had more - such as crime data with millions of offenses - it would make it very hard to read. To change the icons to circles we can change the function addMarkers() to addCircleMarkers(), keeping the rest of the code the same, leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addCircleMarkers(lng = marijuana$long, lat = marijuana$lat) This makes the icon into circles which take up less space than icons. To adjust the size of our icons we use the radius parameter in addMarkers() or addCircleMarkers(). The larger the radius, the larger the icons. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addCircleMarkers(lng = marijuana$long, lat = marijuana$lat, radius = 5) Setting the radius option to 5 shrinks the size of the icon a lot. In your own maps youll have to fiddle with this option to get it to look the way you want. Lets move on to adding information about each icon when clicked upon. 19.3 Adding popup information The parameter popup in the addMarkers() or addCircleMarkers() functions lets you input a character value (if not already a character value it will convert it to one) and that will be shown as a popup when you click on the icon. Lets start simple here by inputting the business owner column in our data and then build it up to a more complicated popup. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addCircleMarkers(lng = marijuana$long, lat = marijuana$lat, radius = 5, popup = marijuana$Business_Owner) Try clicking around and youll see that the owner of the dispensary you clicked on appears over the dot. We usually want to have a title indicating what the value in the popup means. We can do this by using the paste() function to combine text explaining the value with the value itself. Lets add the words Business Owner: before the business owner column. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addCircleMarkers(lng = marijuana$long, lat = marijuana$lat, radius = 5, popup = paste(&quot;Business Owner:&quot;, marijuana$Business_Owner)) We dont have too much information in the data but we lets add the address and license number to the popup by adding them to the paste() function were using. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addCircleMarkers(lng = marijuana$long, lat = marijuana$lat, radius = 5, popup = paste(&quot;Business Owner:&quot;, marijuana$Business_Owner, &quot;Address:&quot;, marijuana$Premise_Address, &quot;License:&quot;, marijuana$License_Number)) Just adding the location text makes it try to print out everything on one line which is hard to read. If we add the text &lt;br&gt; where we want a line break it will make one. &lt;br&gt; is the HTML tag for line-break which is why it works making a new line in this case. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addCircleMarkers(lng = marijuana$long, lat = marijuana$lat, radius = 5, popup = paste(&quot;Business Owner:&quot;, marijuana$Business_Owner, &quot;&lt;br&gt;&quot;, &quot;Address:&quot;, marijuana$Premise_Address, &quot;&lt;br&gt;&quot;, &quot;License:&quot;, marijuana$License_Number)) 19.4 Dealing with too many markers In our case with only 33 rows of data, turning the markers to circles solves our visibility issue. In cases with many more rows of data, this doesnt always work. A solution for this is to cluster the data into groups where the dots only show if you zoom down. If we add the code clusterOptions = markerClusterOptions() to our addCircleMarkers() it will cluster for us. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addCircleMarkers(lng = marijuana$long, lat = marijuana$lat, radius = 5, popup = paste(&quot;Business Owner:&quot;, marijuana$Business_Owner, &quot;&lt;br&gt;&quot;, &quot;Address:&quot;, marijuana$Premise_Address, &quot;&lt;br&gt;&quot;, &quot;License:&quot;, marijuana$License_Number), clusterOptions = markerClusterOptions()) Locations close to each other are grouped together in fairly arbitrary groupings and we can see how large each grouping is by moving our cursor over the circle. Click on a circle or zoom in and it will show smaller groupings at lower levels of aggregation. Keep clicking or zooming in and it will eventually show each location as its own circle. This method is very useful for dealing with huge amounts of data as it avoids overflowing the map with too many icons at one time. A downside, however, is that the clusters are created arbitrarily meaning that important context, such as neighborhood, can be lost. 19.5 Interactive choropleth maps In Chapter 18 we worked on choropleth maps which are maps with shaded regions, such as states colored by which political party won them in an election. Here we will make interactive choropleth maps where you can click on a shaded region and see information about that region. Well make the same map as before - neighborhoods shaded by the number of suicides. Lets load the San Francisco suicides-by-neighborhood data that we made earlier. load(&quot;data/sf_neighborhoods_suicide.rda&quot;) Well begin the leaflet map similar to before but use the function addPolygons() and our input here is the geometry column of sf_neighborhoods_suicide. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addPolygons(data = sf_neighborhoods_suicide$geometry) #&gt; Warning: sf layer is not long-lat data #&gt; Warning: sf layer has inconsistent datum (+proj=lcc +lat_0=36.5 +lon_0=-120.5 +lat_1=38.4333333333333 +lat_2=37.0666666666667 +x_0=2000000.0001016 +y_0=500000.0001016 +datum=NAD83 +units=us-ft +no_defs). #&gt; Need &#39;+proj=longlat +datum=WGS84&#39; It gives us a blank map because our polygons are projected to San Franciscos projection while the leaflet map expects the standard CRS, WGS84 which uses longitude and latitude. So we need to change our projection to that using the st_transform() function from the sf package. library(sf) #&gt; Linking to GEOS 3.9.1, GDAL 3.2.1, PROJ 7.2.1 sf_neighborhoods_suicide &lt;- st_transform(sf_neighborhoods_suicide, crs = &quot;+proj=longlat +datum=WGS84&quot;) Now lets try again. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addPolygons(data = sf_neighborhoods_suicide$geometry) It made a map with large blue lines indicating each neighborhood. Lets change the appearance of the graph a bit before making a popup or shading the neighborhoods The parameter color in addPolygons() changes the color of the lines - lets change it to black. The lines are also very large, blurring into each other and making the neighborhoods hard to see. We can change the weight parameter to alter the size of these lines - smaller values are smaller lines. Lets try setting this to 1. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addPolygons(data = sf_neighborhoods_suicide$geometry, color = &quot;black&quot;, weight = 1) That looks better and we can clearly distinguish each neighborhood now. As we did earlier, we can add the popup text directly to the function which makes the geographic shapes, in this case addPolygons(). Lets add the nhood column value - the name of that neighborhood - and the number of suicides that occurred in that neighborhood. As before, when we click on a neighborhood a popup appears with the output we specified. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addPolygons(data = sf_neighborhoods_suicide$geometry, col = &quot;black&quot;, weight = 1, popup = paste0(&quot;Neighborhood: &quot;, sf_neighborhoods_suicide$nhood, &quot;&lt;br&gt;&quot;, &quot;Number of Suicides: &quot;, sf_neighborhoods_suicide$number_suicides)) For these types of maps we generally want to shade each polygon to indicate how frequently the event occurred in the polygon. Well use the function colorNumeric() which takes a lot of the work out of the process of coloring in the map. This function takes two inputs, first a color palette which we can get from the site colorbrewer2. Lets use the fourth bar in the Sequential page, which is light orange to red. If you look in the section with each HEX value it says that the palette is 3-class OrRd. The 3-class just means we selected 3 colors, the OrRd is the part we want. That will tell colorNumeric() to make the palette using these colors. The second parameter is the column for our numeric variable, number_suicides. We will save the output of colorNumeric(\"OrRd\", sf_neighborhoods_suicide$number_suicides) as a new variable which well call pal for convenience. Then inside of addPolygons() well set the parameter fillColor to pal(sf_neighborhoods_suicide$number_suicides), running this function on the column. What this really does is determine which color every neighborhood should be based on the value in the number_suicides column. pal &lt;- colorNumeric(&quot;OrRd&quot;, sf_neighborhoods_suicide$number_suicides) leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addPolygons(data = sf_neighborhoods_suicide$geometry, col = &quot;black&quot;, weight = 1, popup = paste0(&quot;Neighborhood: &quot;, sf_neighborhoods_suicide$nhood, &quot;&lt;br&gt;&quot;, &quot;Number of Suicides: &quot;, sf_neighborhoods_suicide$number_suicides), fillColor = pal(sf_neighborhoods_suicide$number_suicides)) Since the neighborhoods are transparent, it is hard to distinguish which color is shown. We can make each neighborhood a solid color by setting the parameter fillOpacity inside of addPolygons() to 1. pal &lt;- colorNumeric(&quot;OrRd&quot;, sf_neighborhoods_suicide$number_suicides) leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addPolygons(data = sf_neighborhoods_suicide$geometry, col = &quot;black&quot;, weight = 1, popup = paste0(&quot;Neighborhood: &quot;, sf_neighborhoods_suicide$nhood, &quot;&lt;br&gt;&quot;, &quot;Number of Suicides: &quot;, sf_neighborhoods_suicide$number_suicides), fillColor = pal(sf_neighborhoods_suicide$number_suicides), fillOpacity = 1) To add a legend to this we use the function addLegend() which takes three parameters. pal asks which color palette we are using - we want it to be the exact same as we use to color the neighborhoods so well use the pal object we made. The values parameter is used for which column our numeric values are from, in our case the number_suicides column so well input that. Finally opacity determines how transparent the legend will be. As each neighborhood is set to not be transparent at all, well also set this to 1 to be consistent. pal &lt;- colorNumeric(&quot;OrRd&quot;, sf_neighborhoods_suicide$number_suicides) leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addPolygons(data = sf_neighborhoods_suicide$geometry, col = &quot;black&quot;, weight = 1, popup = paste0(&quot;Neighborhood: &quot;, sf_neighborhoods_suicide$nhood, &quot;&lt;br&gt;&quot;, &quot;Number of Suicides: &quot;, sf_neighborhoods_suicide$number_suicides), fillColor = pal(sf_neighborhoods_suicide$number_suicides), fillOpacity = 1) %&gt;% addLegend(pal = pal, values = sf_neighborhoods_suicide$number_suicides, opacity = 1) Finally, we can add a title to the legend using the title parameter inside of addLegend(). pal &lt;- colorNumeric(&quot;OrRd&quot;, sf_neighborhoods_suicide$number_suicides) leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addPolygons(data = sf_neighborhoods_suicide$geometry, col = &quot;black&quot;, weight = 1, popup = paste0(&quot;Neighborhood: &quot;, sf_neighborhoods_suicide$nhood, &quot;&lt;br&gt;&quot;, &quot;Number of Suicides: &quot;, sf_neighborhoods_suicide$number_suicides), fillColor = pal(sf_neighborhoods_suicide$number_suicides), fillOpacity = 1) %&gt;% addLegend(pal = pal, values = sf_neighborhoods_suicide$number_suicides, opacity = 1, title = &quot;Suicides&quot;) "],["webscraping-with-rvest.html", "20 Webscraping with rvest 20.1 Scraping one page 20.2 Cleaning the webscraped data", " 20 Webscraping with rvest If I ever stop working in the field of criminology, I would certainly be a baker. So for the next few chapters we are going to work with data on baking. What well learn to do is find a recipe from the website All Recipes and webscrape the ingredients and directions of that recipe. For our purposes we will be using the package rvest. This package makes it relatively easy to scrape data from websites, especially when that data is already in a table on the page as our data will be. If you havent done so before, make sure to install rvest. install.packages(&quot;rvest&quot;) And every time you start R, if you want to use rvest you must tell R so by using library(). library(rvest) Here is a screenshot of the recipe for the MMMMM Brownies (an excellent brownies recipe) page. 20.1 Scraping one page In later lessons well learn how to scrape the ingredients of any recipe on the site. For now, well focus on just getting data for our brownies recipe. The first step to scraping a page is to read in that pages information to R using the function read_html() from the rvest package. The input for the () is the URL of the page we want to scrape. In a later lesson, we will manipulate this URL to be able to scrape data from many pages. read_html(&quot;https://www.allrecipes.com/recipe/25080/mmmmm-brownies/&quot;) #&gt; {html_document} #&gt; &lt;html lang=&quot;en&quot;&gt; #&gt; [1] &lt;head&gt;\\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot; ... #&gt; [2] &lt;body class=&quot;template-recipe node- mdex-test karm ... When running the above code, it returns an XML Document. The rvest package is well suited for interpreting this and turning it into something we already know how to work with. To be able to work on this data, we need to save the output of read_html() into an object which well call brownies since that is the recipe we are currently scraping. brownies &lt;- read_html(&quot;https://www.allrecipes.com/recipe/25080/mmmmm-brownies/&quot;) We now need to select only a small part of page which has the relevant information - in this case the ingredients and directions. We need to find just which parts of the page to scrape. To do so well use the helper tool SelectorGadget, a Google Chrome extension that lets you click on parts of the page to get the CSS selector code that well use. Install that extension in Chrome and go to the brownie recipe page. When you open SelectorGadget it allows you click on parts of the page and it will highlight every similar piece and show the CSS selector code in the box near the bottom. Here we clicked on the first ingredient - 1/2 cup white sugar. Every ingredient is highlighted in yellow as (to oversimplify this explanation) these ingredients are the same type in the page. Note that in the bottom right of the screen, the SelectorGadget bar now has the text .ingredients-item-name. This is the CSS selector code we can use to get all of the ingredients. We will use the function html_nodes() to grab the part of the page (based on the CSS selectors) that we want. The input for this function is first the object made from read_html() (which we called brownies) and then we can paste the CSS selector text - in this case, .ingredients-item-name. Well save the resulting object as ingredients since we want to use brownies to also get the directions. ingredients &lt;- html_nodes(brownies, &quot;.ingredients-item-name&quot;) Since we are getting data that is a text format, we need to tell rvest that the format of the scraped data is text. We do with using html_text() and our input in the () is the object made in the function html_text(). ingredients &lt;- html_text(ingredients) Now lets check what we got. ingredients #&gt; [1] &quot;Â½ cup white sugar &quot; #&gt; [2] &quot;2 tablespoons butter &quot; #&gt; [3] &quot;2 tablespoons water &quot; #&gt; [4] &quot;1 Â½ cups semisweet chocolate chips &quot; #&gt; [5] &quot;2 eggs &quot; #&gt; [6] &quot;Â½ teaspoon vanilla extract &quot; #&gt; [7] &quot;&lt;U+2154&gt; cup all-purpose flour &quot; #&gt; [8] &quot;Â¼ teaspoon baking soda &quot; #&gt; [9] &quot;Â½ teaspoon salt &quot; We have successfully scraped the ingredients for this brownies recipes. Now lets do the same process to get the directions for baking. In SelectorGadget click clear to unselect the ingredients. Now click one of in lines of directions that starts with the word Step. Itll highlight all three directions as theyre all of the same type (to be slightly more specific, when the site is made it has to put all of the pieces of the site together, such as links, photos, the section on ingredients, the section on directions, the section on reviews. So in this case we selected a text type in the section on directions and SelectorGadget then selected all text types inside of that section.). Note that if you click on the instructions without starting on one of the Step lines, such as clickingo on the actual instructions (e.g.Â Preheat the oven) lines itself, SelectorGadget will have the node p and say it has found 25 things on that page that match. To fix this you just scroll up to see where the text Best brownies Ive ever had! is also highlighted in yellow and click that to unselect it. Using SelectorGadget is often steps like this where you use trial and error to only select the parts of the page that you want. The CSS selector code this time is .instructions-section-item so we can put that inside of html_nodes(). Lets save the output as directions. directions &lt;- html_nodes(brownies, &quot;.instructions-section-item&quot;) directions &lt;- html_text(directions) Did it work? directions #&gt; [1] &quot; Step 1 Preheat the oven to 325 degrees F (165 degrees C). Grease an 8x8 inch square pan. Advertisement &quot; #&gt; [2] &quot; Step 2 In a medium saucepan, combine the sugar, butter and water. Cook over medium heat until boiling. Remove from heat and stir in chocolate chips until melted and smooth. Mix in the eggs and vanilla. Combine the flour, baking soda and salt; stir into the chocolate mixture. Spread evenly into the prepared pan. &quot; #&gt; [3] &quot; Step 3 Bake for 25 to 30 minutes in the preheated oven, until brownies set up. Do not overbake! Cool in pan and cut into squares. &quot; Yes! The final value in our vector is blank so we will have to remove that. 20.2 Cleaning the webscraped data Now we just need to clean up the extra spaces to have nice, clean instructions for own brownies. Since the directions print out with the text \\n at the end this indicates that it is the end of the line but well want to remove that, which we can do using gsub(). To remove the \\n we simple find that in gsub() and replace it with a blank string. Well do that for both ingredients and directions. directions &lt;- gsub(&quot;\\n&quot;, &quot;&quot;, directions) ingredients &lt;- gsub(&quot;\\n&quot;, &quot;&quot;, ingredients) And lets print out both objects to make sure it worked. ingredients #&gt; [1] &quot;Â½ cup white sugar &quot; #&gt; [2] &quot;2 tablespoons butter &quot; #&gt; [3] &quot;2 tablespoons water &quot; #&gt; [4] &quot;1 Â½ cups semisweet chocolate chips &quot; #&gt; [5] &quot;2 eggs &quot; #&gt; [6] &quot;Â½ teaspoon vanilla extract &quot; #&gt; [7] &quot;&lt;U+2154&gt; cup all-purpose flour &quot; #&gt; [8] &quot;Â¼ teaspoon baking soda &quot; #&gt; [9] &quot;Â½ teaspoon salt &quot; directions #&gt; [1] &quot; Step 1 Preheat the oven to 325 degrees F (165 degrees C). Grease an 8x8 inch square pan. Advertisement &quot; #&gt; [2] &quot; Step 2 In a medium saucepan, combine the sugar, butter and water. Cook over medium heat until boiling. Remove from heat and stir in chocolate chips until melted and smooth. Mix in the eggs and vanilla. Combine the flour, baking soda and salt; stir into the chocolate mixture. Spread evenly into the prepared pan. &quot; #&gt; [3] &quot; Step 3 Bake for 25 to 30 minutes in the preheated oven, until brownies set up. Do not overbake! Cool in pan and cut into squares. &quot; It got rid of the \\n but theres still white space at the start and end of our text. We can remove that using trimws(). directions &lt;- trimws(directions) ingredients &lt;- trimws(ingredients) And lets check again. ingredients #&gt; [1] &quot;Â½ cup white sugar&quot; #&gt; [2] &quot;2 tablespoons butter&quot; #&gt; [3] &quot;2 tablespoons water&quot; #&gt; [4] &quot;1 Â½ cups semisweet chocolate chips&quot; #&gt; [5] &quot;2 eggs&quot; #&gt; [6] &quot;Â½ teaspoon vanilla extract&quot; #&gt; [7] &quot;&lt;U+2154&gt; cup all-purpose flour&quot; #&gt; [8] &quot;Â¼ teaspoon baking soda&quot; #&gt; [9] &quot;Â½ teaspoon salt&quot; directions #&gt; [1] &quot;Step 1 Preheat the oven to 325 degrees F (165 degrees C). Grease an 8x8 inch square pan. Advertisement&quot; #&gt; [2] &quot;Step 2 In a medium saucepan, combine the sugar, butter and water. Cook over medium heat until boiling. Remove from heat and stir in chocolate chips until melted and smooth. Mix in the eggs and vanilla. Combine the flour, baking soda and salt; stir into the chocolate mixture. Spread evenly into the prepared pan.&quot; #&gt; [3] &quot;Step 3 Bake for 25 to 30 minutes in the preheated oven, until brownies set up. Do not overbake! Cool in pan and cut into squares.&quot; Now ingredients is as it should be (note that all of the ingredient amounts - e.g.Â 2/3 cups - looks fine when in R. But when exporting it to PDF and on the site it shows weird characters like &lt;U+2154&gt;. This is because the conversion from R to PDF or HTML isnt working right. Im keeping this unfixed as a demonstration of how things can look right in R but look wrong when moving it elsewhere. So when working on something that you export out of R (including from R to PDF/HTML or even R to Excel), you should make sure to check that no issue occurred during the conversion.) but directions has a bunch of space between the step number and the instructions. Lets use gsub() again to remove the multiple spaces and replace it with a colon followed by a single space. Well search for anything with two or more spaces and replace that with an empty string. directions &lt;- gsub(&quot; {2,}&quot;, &quot;: &quot;, directions) And one final check to make sure it worked. directions #&gt; [1] &quot;Step 1: Preheat the oven to 325 degrees F (165 degrees C). Grease an 8x8 inch square pan.: Advertisement&quot; #&gt; [2] &quot;Step 2: In a medium saucepan, combine the sugar, butter and water. Cook over medium heat until boiling. Remove from heat and stir in chocolate chips until melted and smooth. Mix in the eggs and vanilla. Combine the flour, baking soda and salt; stir into the chocolate mixture. Spread evenly into the prepared pan.&quot; #&gt; [3] &quot;Step 3: Bake for 25 to 30 minutes in the preheated oven, until brownies set up. Do not overbake! Cool in pan and cut into squares.&quot; In your own research, you will want to create a data.frame for nearly all data - this is also the way most statistical analysis packages expect data. In our case it doesnt make sense to do so. Well keep them separate for now and in Chapter 21 well learn to make a function to scrape any recipe using just the URL and to print the ingredients and directions to the console. "],["functions.html", "21 Functions 21.1 A simple function 21.2 Adding parameters 21.3 Making a function to scrape recipes", " 21 Functions So far, we have been writing code to handle specific situations such as subsetting a single data.frame. In cases where you want to reuse the code it is unwise to simply copy and paste the code and make minor changes to handle the new data. Instead we want something that is able to take multiple values and perform the same action (subset, aggregate, make a plot, webscrape, etc) on those values. Code where you can input a value (such as a data.frame) and some (often optional) instructions on how to handle that data, and have the code run on the value is called a function. Weve used other peoples function before, such as c(), mean(), grep(), and rvest(). Think of a function like a stapler - you put the paper in a push down and it staples the paper together. It doesnt matter what papers you are using; it always staples them together. If you needed to buy a new stapler every time you needed to staple something (i.e.Â copy and pasting code) youd quickly have way too many staples (and waste a bunch of money). An important benefit is that you can use this function again and again to help solve other problems. If, for example, you have code that cleans data from Philadelphias crime data set, if you wanted to use it for Chicagos crime data, making a single function is much easier (to read and to fix if there is an issue) than copying the code. If you wanted to use it for 20 cities, copy and pasting code quickly becomes a terrible solution - functions work much better. If you did copy and paste 20 times and you found a bug, then youd have to fix the bug 20 times. With a function you would change the code once. 21.1 A simple function Well start with a simple function that takes a number and returns that number plus the value 2. add_2 &lt;- function(number) { number &lt;- number + 2 return(number) } The syntax (how we write it) of a function is function_name &lt;- function(parameters) { code return(output) } There are five essential parts of a function function_name - This is just the name we give to the function. It can be anything but, like when making other objects, call it something where it is easy to remember what it does. parameters - Here is where we say what goes into the function. In most cases you will want to put some data in and expect something new out. For example, for the function mean() you put in a vector of numbers in the () section and it returns the mean of those numbers. Here is also where you can put any options to affect how the code is run. code - This is the code you write to do the thing you want the function to do. In the above example our code is number &lt;- number + 2. For any number inputted, our code adds 2 to it and saves it back into the object number. return - This is something new in this course, here you use return() and inside the () you put the object you want to be outputted. In our example we have number inside the return() as thats what we want to come out of the function. It is not always necessary to end your function with return() but is highly recommended to make sure youre outputting what it is you want to output. If you save the output of a function (such as by x &lt;- mean(1:3)) it will save the output to the variable assigned. Otherwise it will print out the results in the console. The final piece is the structure of your function. After the function_name (whatever it is you call it) you always need the text &lt;- function() where the parameters (if any) are in the (). After the closing parentheses put a { and at the very end of the function, after the return(), close those squiggly brackets with a }. The &lt;- function() tells R that you are making a function rather than some other type of object. And the { and } tell R that all the code in between are part of that function. Our function here adds 2 to any number we input. add_2(2) #&gt; [1] 4 add_2(5) #&gt; [1] 7 21.2 Adding parameters Lets add a single parameter which multiplies the result by 5 if selected. add_2 &lt;- function(number, times_5 = FALSE) { number &lt;- number + 2 return(number) } Now we have added a parameter called time_5 to the () part of the function and set it the be FALSE by default. Right now it doesnt do anything so we need to add code to say what happens if it is TRUE (remember in R true and false must always be all capital letters). add_2 &lt;- function(number, times_5 = FALSE) { number &lt;- number + 2 if (times_5 == TRUE) { number &lt;- number * 5 } return(number) } Now our code says if the parameter times_5 is TRUE, then do the thing in the squiggly brackets {} below. Note that we use the same squiggly brackets as when making the entire function. That just tells R that the code in those brackets belong together. Lets try out our function. add_2(2) #&gt; [1] 4 It returns 4, as expected. Since the parameter times_5 is defaulted to FALSE, we dont need to specify that parameter if we want it to stay FALSE. When we dont tell the function that we want it to be TRUE, the code in our if statement doesnt run. When we set times_5 to TRUE, it runs that code. add_2(2, times_5 = TRUE) #&gt; [1] 20 21.3 Making a function to scrape recipes In Section 20.1 we wrote some code to scrape data from the website All Recipes for a recipe. We are going to turn that code into a function here. The benefit is that our input to the function will be an URL and then it will print out the ingredients and directions for that recipe. If we want multiple recipes (and for webscraping you usually will want to scrape multiple pages), we just change the URL we input without changing the code at all. We used the rvest package so we need to tell R want to use it again. library(rvest) Lets start by writing a shell of the function - everything but the code. We can call it scrape_recipes (though any name would work), add in the &lt;- function() and put URL (without quotes) in the () as our input for the function is a date. In this case we wont return anything, we will just print things to the console, so we dont need the return() value. And dont forget the { after the end of the function() and } at the very end of the function. scrape_recipes &lt;- function(URL) { } Now we need to add the code that takes the date, scrapes the website, and saves that data into objects called ingredients and directions. Since we have the code from an earlier lesson, we can copy and paste that code into the function and make a small change to get a working function. scrape_recipes &lt;- function(URL) { brownies &lt;- read_html(&quot;https://www.allrecipes.com/recipe/25080/mmmmm-brownies/&quot;) ingredients &lt;- html_nodes(brownies, &quot;.ingredients-item-name&quot;) ingredients &lt;- html_text(ingredients) directions &lt;- html_nodes(brownies, &quot;.instructions-section&quot;) directions &lt;- html_text(directions) ingredients &lt;- ingredients[ingredients != &quot;Add all ingredients to list&quot;] directions &lt;- directions[directions != &quot;&quot;] } The part inside the () of read_html() is the URL of the page we want to scrape. This is the part of the function that will change based on our input. We want whatever input is in the URL parameter to be the URL we scrape. So lets change the URL of the brownies recipe we scraped previously to simply say URL (without quotes). scrape_recipes &lt;- function(URL) { brownies &lt;- read_html(URL) ingredients &lt;- html_nodes(brownies, &quot;.added&quot;) ingredients &lt;- html_text(ingredients) directions &lt;- html_nodes(brownies, &quot;.recipe-directions__list--item&quot;) directions &lt;- html_text(directions) ingredients &lt;- ingredients[ingredients != &quot;Add all ingredients to list&quot;] directions &lt;- directions[directions != &quot;&quot;] } To make this function print something to the console we need to specifically tell it to do so in the code. We do this using the print() function. Lets print first the ingredients and then the directions. Well add that add the final lines of the function. scrape_recipes &lt;- function(URL) { brownies &lt;- read_html(URL) ingredients &lt;- html_nodes(brownies, &quot;.added&quot;) ingredients &lt;- html_text(ingredients) directions &lt;- html_nodes(brownies, &quot;.recipe-directions__list--item&quot;) directions &lt;- html_text(directions) ingredients &lt;- ingredients[ingredients != &quot;Add all ingredients to list&quot;] directions &lt;- directions[directions != &quot;&quot;] directions &lt;- gsub(&quot;\\n&quot;, &quot;&quot;, directions) directions &lt;- gsub(&quot; {2,}&quot;, &quot;&quot;, directions) print(ingredients) print(directions) } Now we can try it for a new recipe, this one for The Best Lemon Bars at URL https://www.allrecipes.com/recipe/10294/the-best-lemon-bars/. scrape_recipes(&quot;https://www.allrecipes.com/recipe/10294/the-best-lemon-bars/&quot;) #&gt; character(0) #&gt; character(0) In the next lesson well use for loops to scrape multiple recipes very quickly. "],["for-loops.html", "22 For loops 22.1 Basic for loops 22.2 Scraping multiple recipes", " 22 For loops We will often want to perform the same task on a number of different items, such as cleaning every column in a data set. One effective way to do this is through for loops. Earlier in this course we learned how to scrape the recipe website All Recipes. We did so for a single recipe, if we wanted to get a feasts worth of recipes, typing out each recipe would be excessively slow, even with the function we made in Section 21.3. In this lesson we will use a for loop to scrape multiple recipes very quickly. 22.1 Basic for loops Well start with a simple example, making R print the numbers 1-10. for (i in 1:10) { print(i) } #&gt; [1] 1 #&gt; [1] 2 #&gt; [1] 3 #&gt; [1] 4 #&gt; [1] 5 #&gt; [1] 6 #&gt; [1] 7 #&gt; [1] 8 #&gt; [1] 9 #&gt; [1] 10 The basic concept of a for loop is you have some code that you need to run many times with slight changes to a value or values in the code - somewhat like a function. Like a function, all the code you want to use goes in between the { and } squiggly brackets. And you loop through all the values you specify - meaning the code runs once for each of those values. Lets look closer at the (i in 1:10). The i is simply a placeholder object which takes the value 1:10 each iteration of the loop. Its not necessary to call it i but that is convention in programming to do so. It takes the value of whatever follows the in which can range from a vector of strings to numbers to lists of data.frames. Especially when youre an early learner of R it could help to call the i something informative to you about what value it has. Lets go through a few examples with different names for i and different values it is looping through. for (a_number in 1:10) { print(a_number) } #&gt; [1] 1 #&gt; [1] 2 #&gt; [1] 3 #&gt; [1] 4 #&gt; [1] 5 #&gt; [1] 6 #&gt; [1] 7 #&gt; [1] 8 #&gt; [1] 9 #&gt; [1] 10 animals &lt;- c(&quot;cat&quot;, &quot;dog&quot;, &quot;gorilla&quot;, &quot;buffalo&quot;, &quot;lion&quot;, &quot;snake&quot;) for (animal in animals) { print(animal) } #&gt; [1] &quot;cat&quot; #&gt; [1] &quot;dog&quot; #&gt; [1] &quot;gorilla&quot; #&gt; [1] &quot;buffalo&quot; #&gt; [1] &quot;lion&quot; #&gt; [1] &quot;snake&quot; Now lets make our code a bit more complicated, adding the number 2 every loop. for (a_number in 1:10) { print(a_number + 2) } #&gt; [1] 3 #&gt; [1] 4 #&gt; [1] 5 #&gt; [1] 6 #&gt; [1] 7 #&gt; [1] 8 #&gt; [1] 9 #&gt; [1] 10 #&gt; [1] 11 #&gt; [1] 12 Were keeping the results inside of print() since for loops do not print the results by default. Lets try combining this with some subsetting using square bracket notation []. We will look through every value in numbers, a vector we will make with the values 1:10 and replace each value with its value plus 2. The object were looping through is numbers. But were actually looping through every index it has, hence the 1:length(numbers). That is saying, i takes the value of each index in numbers which is useful when we want to change that element. length(numbers) finds how long the vector numbers is (if this was a data.frame we could use nrow()) to find how many elements it has. In the code we take the value at each index numbers[i] and add 2 to it. numbers &lt;- 1:10 for (i in 1:length(numbers)) { numbers[i] &lt;- numbers[i] + 2 } numbers #&gt; [1] 3 4 5 6 7 8 9 10 11 12 We can also include functions we made in for loops. Heres a function we made last lesson which adds 2 to each inputted number. add_2 &lt;- function(number) { number &lt;- number + 2 return(number) } Lets put that in the loop. for (i in 1:length(numbers)) { numbers[i] &lt;- add_2(numbers[i]) } numbers #&gt; [1] 5 6 7 8 9 10 11 12 13 14 22.2 Scraping multiple recipes Below is the function copied from Section 21.3 which takes a single URL and scraped the site All Recipes for that recipe. It printed the ingredients and directions to cook that recipe to the console. If we wanted to get data for multiple recipes, we would need to run the function multiple times. Here we will use a for loop to do this. Since were using the read_html() function from rvest, we need to tell R we want to use that package. library(rvest) scrape_recipes &lt;- function(URL) { brownies &lt;- read_html(URL) ingredients &lt;- html_nodes(brownies, &quot;.added&quot;) ingredients &lt;- html_text(ingredients) directions &lt;- html_nodes(brownies, &quot;.recipe-directions__list--item&quot;) directions &lt;- html_text(directions) ingredients &lt;- ingredients[ingredients != &quot;Add all ingredients to list&quot;] directions &lt;- directions[directions != &quot;&quot;] directions &lt;- gsub(&quot;\\n&quot;, &quot;&quot;, directions) directions &lt;- gsub(&quot; {2,}&quot;, &quot;&quot;, directions) print(ingredients) print(directions) } With any for loop you need to figure out what is going to be changing, in this case it is the URL. And since we want multiple, we need to make an object with the URLs of all the recipes we want. Here I am making a vector called recipe_urls with the URLs of several recipes that I like on the site. The way I got the URLs was to go to each recipes page and copy and paste the URL. Is this the right approach? Shouldnt we do everything in R? Not always. In situations like this where we know that there are a small number of links we want - and there is no easy way to get them through R - it is reasonable to do it by hand. Remember that R is a tool to help you. While keeping everything you do in R is good for reproducibility, it is not always reasonable and may take too much time or effort given the constraints - usually limited time - of your project. recipe_urls &lt;- c(&quot;https://www.allrecipes.com/recipe/25080/mmmmm-brownies/&quot;, &quot;https://www.allrecipes.com/recipe/27188/crepes/&quot;, &quot;https://www.allrecipes.com/recipe/84270/slow-cooker-corned-beef-and-cabbage/&quot;, &quot;https://www.allrecipes.com/recipe/25130/soft-sugar-cookies-v/&quot;, &quot;https://www.allrecipes.com/recipe/53304/cream-corn-like-no-other/&quot;, &quot;https://www.allrecipes.com/recipe/10294/the-best-lemon-bars/&quot;, &quot;https://www.allrecipes.com/recipe/189058/super-simple-salmon/&quot;) Now we can write the for loop to go through every single URL in recipe_urls and use the function scrape_recipes on that URL. for (recipe_url in recipe_urls) { scrape_recipes(recipe_url) } #&gt; character(0) #&gt; character(0) #&gt; character(0) #&gt; character(0) #&gt; character(0) #&gt; character(0) #&gt; character(0) #&gt; character(0) #&gt; character(0) #&gt; character(0) #&gt; character(0) #&gt; character(0) #&gt; character(0) #&gt; character(0) "],["scrape-table.html", "23 Scraping tables from PDFs 23.1 Scraping the first table 23.2 Making a function", " 23 Scraping tables from PDFs For this chapter youll need the following file, which is available for download here: usbp_stats_fy2017_sector_profile.pdf. In the majority of cases when you want data from a PDF it will be in a table. Essentially the data will be an Excel file inside of a PDF. This format is not altogether different than what weve done before. We will be using regular expressions and the function strsplit() to get this data into a usable format. Lets first take a look at the data we will be scraping. The first step in any PDF scraping should be to look at the PDF and try to think about the best way to approach this particular problem - while all PDF scraping follows a general format you cannot necessarily copy and paste your code, each situation is likely slightly different. Our data is from the U.S. Customs and Border Protection (CBP) and contains a wealth of information about apprehensions and contraband seizures in border sectors. We will be using the Sector Profile 2017 PDF which has information in four tables, three of which well scrape and then combine together. The data was downloaded from the U.S. Customs and Border Protection Stats and Summaries page here. If youre interested in using more of their data, some of it has been cleaned and made available here. The file we want to use is called usbp_stats_fy2017_sector_profile.pdf and has four tables in the PDF. Lets take a look at them one at a time, understanding what variables are available, and what units each row is in. Then well start scraping the tables. The first table is Sector Profile - Fiscal Year 2017 (Oct.Â 1st through Sept.Â 30th). Before we even look down more at the table, the title is important. It is for fiscal year 2017, not calendar year 2017 which is more common in the data we usually use. This is important if we ever want to merge this data with other data sets. If possible, we would have to get data that is monthly so we can just use October 2016 through September 2017 to match up properly. Now if we look more at the table, we can see that each row is a section of the U.S. border. There are three main sections - Coastal, Northern, and Southwest, with subsections of each also included. The bottom row is the sum of all these sections and gives us nationwide data. Many government data will be like this form with sections and subsections in the same table. Watch out when doing mathematical operations! Just summing any of these columns will give you triple the true value due to the presence of nationwide, sectional, and subsectional data. There are 9 columns in the data other than the border section identifier. It looks like we have total apprehensions, apprehensions for people who are not Mexican citizens, marijuana and cocaine seizures (in pounds), the number of accepted prosecutions (presumably of those apprehended), and the number of CBP agents assaulted. The last two columns have the number of people rescued by CBP and the number of people who died (it is unclear from this data alone if this is solely people in custody or deaths during crossing the border). These two columns are also special as they only have data for the Southwest border. Table 2 has a similar format with each row being a section or subsection. The columns now have the number of juveniles apprehended, subdivided by if they were accompanied by an adult or not, and the number of adults apprehended. The last column is total apprehensions which is also in Table 1. Table 3 follows the same format and the new columns are number of apprehensions by gender. Finally, Table 4 is a bit different in its format. The rows are now variables and the columns are the locations. In this table it doesnt include subsections, only border sections and nationwide total. The data it has available are partially a repeat of Table 1 but with more drug types and the addition of the number of drug seizures and some firearm seizure information. As this table is formatted differently than the others, we wont scrape it in this lesson - but you can use the skills youll learn to do so yourself. 23.1 Scraping the first table Weve now seen all three of the tables that we want to scrape so we can begin the process of actually scraping them. Note that each table is very similar meaning we can reuse some code to scrape as well as clean the data. That means that we will want to write some functions to make our work easier and avoid copy and pasting code three times. We will use the pdf_text() function from the pdftools package to read the PDFs into R. library(pdftools) #&gt; Using poppler version 21.04.0 We can save the output of the pdf_text() function as the object border_patrol and well use it for each table. border_patrol &lt;- pdf_text(&quot;data/usbp_stats_fy2017_sector_profile.pdf&quot;) We can take a look at the head() of the result. head(border_patrol) #&gt; [1] &quot; United States Border Patrol\\n Sector Profile - Fiscal Year 2017 (Oct. 1st through Sept. 30th)\\n\\n Agent Other Than Mexican Marijuana Cocaine Accepted\\n SECTOR Staffing*\\n Apprehensions\\n Apprehensions (pounds) (pounds) Prosecutions\\n Assaults Rescues Deaths\\n\\nMiami 111 2,280 1,646 2,253 231 292 1 N/A N/A\\nNew Orleans 63 920 528 21 6 10 0 N/A N/A\\nRamey 38 388 387 3 2,932 89 0 N/A N/A\\nCoastal Border Sectors Total 212 3,588 2,561 2,277 3,169 391 1 N/A **** N/A ****\\n\\nBlaine 296 288 237 0 0 9 0 N/A N/A\\nBuffalo 277 447 293 228 2 37 2 N/A N/A\\nDetroit 408 1,070 322 124 0 85 1 N/A N/A\\nGrand Forks 189 496 202 0 0 40 2 N/A N/A\\nHavre 183 39 28 98 0 2 0 N/A N/A\\nHoulton 173 30 30 17 0 2 0 N/A N/A\\nSpokane 230 208 67 68 0 24 0 N/A N/A\\nSwanton 292 449 359 531 1 103 6 N/A N/A\\nNorthern Border Sectors Total 2,048 3,027 1,538 1,066 3 302 11 N/A **** N/A ****\\nBig Bend (formerly Marfa) 500 6,002 3,346 40,852 45 2,847 11 26 1\\nDel Rio 1,391 13,476 6,156 9,482 62 8,022 12 99 18\\nEl Centro 870 18,633 5,812 5,554 484 1,413 34 4 2\\nEl Paso 2,182 25,193 15,337 34,189 140 6,996 54 44 8\\nLaredo 1,666 25,460 7,891 69,535 757 6,119 31 1,054 83\\nRio Grande Valley (formerly McAllen) 3,130 137,562 107,909 260,020 1,192 7,979 422 1,190 104\\nSan Diego 2,199 26,086 7,060 10,985 2,903 3,099 84 48 4\\nTucson 3,691 38,657 12,328 397,090 331 20,963 93 750 72\\nYuma 859 12,847 10,139 30,181 261 2,367 33 6 2\\nSouthwest Border Sectors Total** 16,605 303,916 175,978 857,888 6,174 59,805 774 3,221 294\\nNationwide Total*** 19,437 310,531 180,077 861,231 9,346 60,498 786 3,221 294\\n* Agent staffing statistics depict FY17 on-board personnel data as of 9/30/2017\\n** Southwest Border Sectors staffing statistics include: Big Bend, Del Rio, El Centro, El Paso, Laredo, Rio Grande Valley, San Diego, Tucson, Yuma, and the Special Operations Group.\\n*** Nationwide staffing statistics include: All on-board Border Patrol agents in CBP\\n**** Rescue and Death statistics are not tracked for Northern and Coastal Border Sectors.\\n&quot; #&gt; [2] &quot; United States Border Patrol\\n Juvenile (0-17 Years Old) and Adult Apprehensions - Fiscal Year 2017 (Oct. 1st through Sept. 30th)\\n\\n\\n\\n Accompanied Unaccompanied Total Total Total\\n SECTOR Juveniles Juveniles Juveniles Adults Apprehensions\\nMiami 19 42 61 2,219 2,280\\nNew Orleans 1 22 23 897 920\\nRamey 7 1 8 380 388\\nCoastal Border Sectors Total 27 65 92 3,496 3,588\\nBlaine 29 7 36 252 288\\nBuffalo 3 3 6 441 447\\nDetroit 5 11 16 1,054 1,070\\nGrand Forks 5 4 9 487 496\\nHavre 1 3 4 35 39\\nHoulton 1 8 9 21 30\\nSpokane 3 0 3 205 208\\nSwanton 18 10 28 421 449\\nNorthern Border Sectors Total 65 46 111 2,916 3,027\\nBig Bend (formerly Marfa) 506 811 1,317 4,685 6,002\\nDel Rio 1,348 1,349 2,697 10,779 13,476\\nEl Centro 968 1,531 2,499 16,134 18,633\\nEl Paso 4,642 3,926 8,568 16,625 25,193\\nLaredo 477 2,033 2,510 22,950 25,460\\nRio Grande Valley (formerly McAllen) 27,222 23,708 50,930 86,632 137,562\\nSan Diego 1,639 1,551 3,190 22,896 26,086\\nTucson 1,088 3,659 4,747 33,910 38,657\\nYuma 3,241 2,867 6,108 6,739 12,847\\nSouthwest Border Sectors Total 41,131 41,435 82,566 221,350 303,916\\nNationwide Total 41,223 41,546 82,769 227,762 310,531\\n&quot; #&gt; [3] &quot; United States Border Patrol\\n Apprehensions by Gender - Fiscal Year 2017 (Oct. 1st through Sept. 30th)\\n\\n\\n\\n\\n SECTOR Female Male Total Apprehensions\\n\\nMiami 219 2,061 2,280\\nNew Orleans 92 828 920\\nRamey 65 323 388\\nCoastal Border Sectors Total 376 3,212 3,588\\nBlaine 97 191 288\\nBuffalo 69 378 447\\nDetroit 78 992 1,070\\nGrand Forks 56 440 496\\nHavre 13 26 39\\nHoulton 17 13 30\\nSpokane 17 191 208\\nSwanton 106 343 449\\nNorthern Border Sectors Total 453 2,574 3,027\\nBig Bend (formerly Marfa) 985 5,017 6,002\\nDel Rio 2,622 10,854 13,476\\nEl Centro 2,791 15,842 18,633\\nEl Paso 7,364 17,829 25,193\\nLaredo 3,651 21,809 25,460\\nRio Grande Valley (formerly McAllen) 50,306 87,256 137,562\\nSan Diego 4,117 21,969 26,086\\nTucson 4,693 33,964 38,657\\nYuma 4,328 8,519 12,847\\nSouthwest Border Sectors Total 80,857 223,059 303,916\\nNationwide Total 81,686 228,845 310,531\\n&quot; #&gt; [4] &quot; United States Border Patrol\\n Apprehensions / Seizure Statistics - Fiscal Year 2017 (Oct. 1st through Sept. 30th)\\n\\n Apprehension/Seizure Type Coastal Border Sectors Northern Border Sectors Southwest Border Sectors Nationwide Total\\n\\nApprehensions 3,588 3,027 303,916 310,531\\nOther Than Mexican Apprehensions 2,561 1,538 175,978 180,077\\n\\nMarijuana (pounds) 2,277 1,066 857,888 861,231\\nCocaine (pounds) 3,169 3 6,174 9,346\\nHeroin (ounces) 0 62 15,182 15,244\\nMethamphetamine (pounds) 23 32 10,273 10,328\\nEcstasy (pounds) 0 0 1 1\\nOther Drugs* (pounds) 0 14 554 568\\n\\nMarijuana Seizures 113 255 9,371 9,739\\nCocaine Seizures 33 46 463 542\\nHeroin Seizures 0 29 219 248\\nMethamphetamine Seizures 2 68 809 879\\nEcstasy Seizures 1 2 48 51\\nOther Drugs* Seizures 6 99 735 840\\n\\nConveyances 86 79 7,388 7,553\\nFirearms 9 45 369 423\\nAmmunition (rounds) 217 384 13,938 14,539\\nCurrency (value) $325,129 $374,282 $5,169,593 $5,869,004\\n\\n*Other Drugs include: All USBP drug seizures excluding marijuana, cocaine, heroin, methamphetamine, and ecstasy (MDMA).\\nCoastal Border Sectors include: Miami, New Orleans, and Ramey, Puerto Rico.\\nNorthern Border Sectors include: Blaine, Buffalo, Detroit, Grand Forks, Havre, Houlton, Spokane and Swanton.\\nSouthwest Border Sectors include: Big Bend, Del Rio, El Centro, El Paso, Laredo, Rio Grande Valley, San Diego, Tucson, and Yuma.\\nDrug quantities are rounded to the nearest whole number\\n&quot; If you look closely in this huge amount of text output, you can see that it is a vector with each table being an element in the vector. We can see this further by checking the length() of border_patrol and just looking at the first element. length(border_patrol) #&gt; [1] 4 It is four elements long, one for each table. border_patrol[1] #&gt; [1] &quot; United States Border Patrol\\n Sector Profile - Fiscal Year 2017 (Oct. 1st through Sept. 30th)\\n\\n Agent Other Than Mexican Marijuana Cocaine Accepted\\n SECTOR Staffing*\\n Apprehensions\\n Apprehensions (pounds) (pounds) Prosecutions\\n Assaults Rescues Deaths\\n\\nMiami 111 2,280 1,646 2,253 231 292 1 N/A N/A\\nNew Orleans 63 920 528 21 6 10 0 N/A N/A\\nRamey 38 388 387 3 2,932 89 0 N/A N/A\\nCoastal Border Sectors Total 212 3,588 2,561 2,277 3,169 391 1 N/A **** N/A ****\\n\\nBlaine 296 288 237 0 0 9 0 N/A N/A\\nBuffalo 277 447 293 228 2 37 2 N/A N/A\\nDetroit 408 1,070 322 124 0 85 1 N/A N/A\\nGrand Forks 189 496 202 0 0 40 2 N/A N/A\\nHavre 183 39 28 98 0 2 0 N/A N/A\\nHoulton 173 30 30 17 0 2 0 N/A N/A\\nSpokane 230 208 67 68 0 24 0 N/A N/A\\nSwanton 292 449 359 531 1 103 6 N/A N/A\\nNorthern Border Sectors Total 2,048 3,027 1,538 1,066 3 302 11 N/A **** N/A ****\\nBig Bend (formerly Marfa) 500 6,002 3,346 40,852 45 2,847 11 26 1\\nDel Rio 1,391 13,476 6,156 9,482 62 8,022 12 99 18\\nEl Centro 870 18,633 5,812 5,554 484 1,413 34 4 2\\nEl Paso 2,182 25,193 15,337 34,189 140 6,996 54 44 8\\nLaredo 1,666 25,460 7,891 69,535 757 6,119 31 1,054 83\\nRio Grande Valley (formerly McAllen) 3,130 137,562 107,909 260,020 1,192 7,979 422 1,190 104\\nSan Diego 2,199 26,086 7,060 10,985 2,903 3,099 84 48 4\\nTucson 3,691 38,657 12,328 397,090 331 20,963 93 750 72\\nYuma 859 12,847 10,139 30,181 261 2,367 33 6 2\\nSouthwest Border Sectors Total** 16,605 303,916 175,978 857,888 6,174 59,805 774 3,221 294\\nNationwide Total*** 19,437 310,531 180,077 861,231 9,346 60,498 786 3,221 294\\n* Agent staffing statistics depict FY17 on-board personnel data as of 9/30/2017\\n** Southwest Border Sectors staffing statistics include: Big Bend, Del Rio, El Centro, El Paso, Laredo, Rio Grande Valley, San Diego, Tucson, Yuma, and the Special Operations Group.\\n*** Nationwide staffing statistics include: All on-board Border Patrol agents in CBP\\n**** Rescue and Death statistics are not tracked for Northern and Coastal Border Sectors.\\n&quot; And this gives us all the values in the first table plus a few sentences at the end detailing some features of the table. At the end of each line (where in the PDF it should end but doesnt in our data yet) there is a \\r\\n indicating that there should be a new line. We want to use strsplit() to split at the \\r\\n. The strsplit() function breaks up a string into pieces based on a value inside of the string. Lets use the word criminology as an example. If we want to split it by the letter n wed have two results, crimi and ology as these are the pieces of the word after breaking up criminology at letter n. strsplit(&quot;criminology&quot;, split = &quot;n&quot;) #&gt; [[1]] #&gt; [1] &quot;crimi&quot; &quot;ology&quot; Note that it deletes whatever value is used to break up the string. Lets save a new object with the value in the first element of border_patrol, calling it sector_profile as thats the name of that table, and then using strsplit() on it. strsplit() returns a list so we will also want to keep just the first element of that list using double square bracket [[]] notation. sector_profile &lt;- border_patrol[1] sector_profile &lt;- strsplit(sector_profile, &quot;\\r\\n&quot;) sector_profile &lt;- sector_profile[[1]] Now we can look at the first six rows of this data. head(sector_profile) #&gt; [1] &quot; United States Border Patrol\\n Sector Profile - Fiscal Year 2017 (Oct. 1st through Sept. 30th)\\n\\n Agent Other Than Mexican Marijuana Cocaine Accepted\\n SECTOR Staffing*\\n Apprehensions\\n Apprehensions (pounds) (pounds) Prosecutions\\n Assaults Rescues Deaths\\n\\nMiami 111 2,280 1,646 2,253 231 292 1 N/A N/A\\nNew Orleans 63 920 528 21 6 10 0 N/A N/A\\nRamey 38 388 387 3 2,932 89 0 N/A N/A\\nCoastal Border Sectors Total 212 3,588 2,561 2,277 3,169 391 1 N/A **** N/A ****\\n\\nBlaine 296 288 237 0 0 9 0 N/A N/A\\nBuffalo 277 447 293 228 2 37 2 N/A N/A\\nDetroit 408 1,070 322 124 0 85 1 N/A N/A\\nGrand Forks 189 496 202 0 0 40 2 N/A N/A\\nHavre 183 39 28 98 0 2 0 N/A N/A\\nHoulton 173 30 30 17 0 2 0 N/A N/A\\nSpokane 230 208 67 68 0 24 0 N/A N/A\\nSwanton 292 449 359 531 1 103 6 N/A N/A\\nNorthern Border Sectors Total 2,048 3,027 1,538 1,066 3 302 11 N/A **** N/A ****\\nBig Bend (formerly Marfa) 500 6,002 3,346 40,852 45 2,847 11 26 1\\nDel Rio 1,391 13,476 6,156 9,482 62 8,022 12 99 18\\nEl Centro 870 18,633 5,812 5,554 484 1,413 34 4 2\\nEl Paso 2,182 25,193 15,337 34,189 140 6,996 54 44 8\\nLaredo 1,666 25,460 7,891 69,535 757 6,119 31 1,054 83\\nRio Grande Valley (formerly McAllen) 3,130 137,562 107,909 260,020 1,192 7,979 422 1,190 104\\nSan Diego 2,199 26,086 7,060 10,985 2,903 3,099 84 48 4\\nTucson 3,691 38,657 12,328 397,090 331 20,963 93 750 72\\nYuma 859 12,847 10,139 30,181 261 2,367 33 6 2\\nSouthwest Border Sectors Total** 16,605 303,916 175,978 857,888 6,174 59,805 774 3,221 294\\nNationwide Total*** 19,437 310,531 180,077 861,231 9,346 60,498 786 3,221 294\\n* Agent staffing statistics depict FY17 on-board personnel data as of 9/30/2017\\n** Southwest Border Sectors staffing statistics include: Big Bend, Del Rio, El Centro, El Paso, Laredo, Rio Grande Valley, San Diego, Tucson, Yuma, and the Special Operations Group.\\n*** Nationwide staffing statistics include: All on-board Border Patrol agents in CBP\\n**** Rescue and Death statistics are not tracked for Northern and Coastal Border Sectors.\\n&quot; Notice that there is a lot of empty white space at the beginning of the rows. We want to get rid of that to make our next steps easier. We can use trimws() and put the entire sector_profile data in the () and itll remove the white space at the ends of each line for us. sector_profile &lt;- trimws(sector_profile) We have more rows than we want so lets look at the entire data and try to figure out how to keep just the necessary rows. sector_profile #&gt; [1] &quot;United States Border Patrol\\n Sector Profile - Fiscal Year 2017 (Oct. 1st through Sept. 30th)\\n\\n Agent Other Than Mexican Marijuana Cocaine Accepted\\n SECTOR Staffing*\\n Apprehensions\\n Apprehensions (pounds) (pounds) Prosecutions\\n Assaults Rescues Deaths\\n\\nMiami 111 2,280 1,646 2,253 231 292 1 N/A N/A\\nNew Orleans 63 920 528 21 6 10 0 N/A N/A\\nRamey 38 388 387 3 2,932 89 0 N/A N/A\\nCoastal Border Sectors Total 212 3,588 2,561 2,277 3,169 391 1 N/A **** N/A ****\\n\\nBlaine 296 288 237 0 0 9 0 N/A N/A\\nBuffalo 277 447 293 228 2 37 2 N/A N/A\\nDetroit 408 1,070 322 124 0 85 1 N/A N/A\\nGrand Forks 189 496 202 0 0 40 2 N/A N/A\\nHavre 183 39 28 98 0 2 0 N/A N/A\\nHoulton 173 30 30 17 0 2 0 N/A N/A\\nSpokane 230 208 67 68 0 24 0 N/A N/A\\nSwanton 292 449 359 531 1 103 6 N/A N/A\\nNorthern Border Sectors Total 2,048 3,027 1,538 1,066 3 302 11 N/A **** N/A ****\\nBig Bend (formerly Marfa) 500 6,002 3,346 40,852 45 2,847 11 26 1\\nDel Rio 1,391 13,476 6,156 9,482 62 8,022 12 99 18\\nEl Centro 870 18,633 5,812 5,554 484 1,413 34 4 2\\nEl Paso 2,182 25,193 15,337 34,189 140 6,996 54 44 8\\nLaredo 1,666 25,460 7,891 69,535 757 6,119 31 1,054 83\\nRio Grande Valley (formerly McAllen) 3,130 137,562 107,909 260,020 1,192 7,979 422 1,190 104\\nSan Diego 2,199 26,086 7,060 10,985 2,903 3,099 84 48 4\\nTucson 3,691 38,657 12,328 397,090 331 20,963 93 750 72\\nYuma 859 12,847 10,139 30,181 261 2,367 33 6 2\\nSouthwest Border Sectors Total** 16,605 303,916 175,978 857,888 6,174 59,805 774 3,221 294\\nNationwide Total*** 19,437 310,531 180,077 861,231 9,346 60,498 786 3,221 294\\n* Agent staffing statistics depict FY17 on-board personnel data as of 9/30/2017\\n** Southwest Border Sectors staffing statistics include: Big Bend, Del Rio, El Centro, El Paso, Laredo, Rio Grande Valley, San Diego, Tucson, Yuma, and the Special Operations Group.\\n*** Nationwide staffing statistics include: All on-board Border Patrol agents in CBP\\n**** Rescue and Death statistics are not tracked for Northern and Coastal Border Sectors.&quot; Based on the PDF, we want every row from Miami to Nationwide Total. But here we have several rows with the title of the table and the column names, and at the end we have the sentences with some details that we dont need. To keep only the rows that we want, we can combine grep() and subsetting to find the rows from Miami to Nationwide Total and keep only those rows. We will use grep() to find which row has the text Miami and which has the text Nationwide Total and keep all rows between them (including those matched rows as well). Since each only appears once in the table we dont need to worry about handling duplicate results. grep(&quot;Miami&quot;, sector_profile) #&gt; [1] 1 grep(&quot;Nationwide Total&quot;, sector_profile) #&gt; [1] 1 Well use square bracket notation to keep all rows between those two values (including each value). Since the data is a vector, not a data.frame, we dont need a comma. sector_profile &lt;- sector_profile[grep(&quot;Miami&quot;, sector_profile):grep(&quot;Nationwide Total&quot;, sector_profile)] Note that were getting rid of the rows which had the column names. Its easier to make the names ourselves than to deal with that mess. head(sector_profile) #&gt; [1] &quot;United States Border Patrol\\n Sector Profile - Fiscal Year 2017 (Oct. 1st through Sept. 30th)\\n\\n Agent Other Than Mexican Marijuana Cocaine Accepted\\n SECTOR Staffing*\\n Apprehensions\\n Apprehensions (pounds) (pounds) Prosecutions\\n Assaults Rescues Deaths\\n\\nMiami 111 2,280 1,646 2,253 231 292 1 N/A N/A\\nNew Orleans 63 920 528 21 6 10 0 N/A N/A\\nRamey 38 388 387 3 2,932 89 0 N/A N/A\\nCoastal Border Sectors Total 212 3,588 2,561 2,277 3,169 391 1 N/A **** N/A ****\\n\\nBlaine 296 288 237 0 0 9 0 N/A N/A\\nBuffalo 277 447 293 228 2 37 2 N/A N/A\\nDetroit 408 1,070 322 124 0 85 1 N/A N/A\\nGrand Forks 189 496 202 0 0 40 2 N/A N/A\\nHavre 183 39 28 98 0 2 0 N/A N/A\\nHoulton 173 30 30 17 0 2 0 N/A N/A\\nSpokane 230 208 67 68 0 24 0 N/A N/A\\nSwanton 292 449 359 531 1 103 6 N/A N/A\\nNorthern Border Sectors Total 2,048 3,027 1,538 1,066 3 302 11 N/A **** N/A ****\\nBig Bend (formerly Marfa) 500 6,002 3,346 40,852 45 2,847 11 26 1\\nDel Rio 1,391 13,476 6,156 9,482 62 8,022 12 99 18\\nEl Centro 870 18,633 5,812 5,554 484 1,413 34 4 2\\nEl Paso 2,182 25,193 15,337 34,189 140 6,996 54 44 8\\nLaredo 1,666 25,460 7,891 69,535 757 6,119 31 1,054 83\\nRio Grande Valley (formerly McAllen) 3,130 137,562 107,909 260,020 1,192 7,979 422 1,190 104\\nSan Diego 2,199 26,086 7,060 10,985 2,903 3,099 84 48 4\\nTucson 3,691 38,657 12,328 397,090 331 20,963 93 750 72\\nYuma 859 12,847 10,139 30,181 261 2,367 33 6 2\\nSouthwest Border Sectors Total** 16,605 303,916 175,978 857,888 6,174 59,805 774 3,221 294\\nNationwide Total*** 19,437 310,531 180,077 861,231 9,346 60,498 786 3,221 294\\n* Agent staffing statistics depict FY17 on-board personnel data as of 9/30/2017\\n** Southwest Border Sectors staffing statistics include: Big Bend, Del Rio, El Centro, El Paso, Laredo, Rio Grande Valley, San Diego, Tucson, Yuma, and the Special Operations Group.\\n*** Nationwide staffing statistics include: All on-board Border Patrol agents in CBP\\n**** Rescue and Death statistics are not tracked for Northern and Coastal Border Sectors.&quot; The data now has only the rows we want but still doesnt have any columns, its currently just a vector of strings. We want to make it into a data.frame to be able to work on it like we usually do. When looking at this data it is clear that where the division between columns is a bunch of white space. Take the first row for example, it says Miami then after lots of white spaces 111 than again with 2,280 and so on for the rest of the row. Well use this pattern of columns differentiated by white space to make sector_profile into a data.frame. We will use the function str_split_fixed() from the stringr package. This function is very similar to strsplit() except you can tell it how many columns to expect. install.packages(&quot;stringr&quot;) library(stringr) The syntax of str_split_fixed() is similar to strsplit() except the new parameter of the number of splits to expect. Looking at the PDF shows us that there are 10 columns so thats the number well use. Our split will be \" {2,}. That is, a space that occurs two or more times. Since there are sectors with spaces in their name, we cant have only one space, we need at least two. If you look carefully at the rows with sectorsCoast Border Sectors Total\" and Northern Border Sectors Total, the final two columns actually do not have two spaces between them because of the amount of * they have. Normally wed want to fix this using gsub(), but those values will turn to NA anyway so we wont bother in this case. sector_profile &lt;- str_split_fixed(sector_profile, &quot; {2,}&quot;, 10) If we check the head() we can see that we have the proper columns now but this still isnt a data.frame and has no column names. head(sector_profile) #&gt; [,1] #&gt; [1,] &quot;United States Border Patrol\\n&quot; #&gt; [,2] #&gt; [1,] &quot;Sector Profile - Fiscal Year 2017 (Oct. 1st through Sept. 30th)\\n\\n&quot; #&gt; [,3] [,4] [,5] [,6] #&gt; [1,] &quot;Agent&quot; &quot;Other Than Mexican&quot; &quot;Marijuana&quot; &quot;Cocaine&quot; #&gt; [,7] [,8] [,9] #&gt; [1,] &quot;Accepted\\n&quot; &quot;SECTOR&quot; &quot;Staffing*\\n&quot; #&gt; [,10] #&gt; [1,] &quot;Apprehensions\\n Apprehensions (pounds) (pounds) Prosecutions\\n Assaults Rescues Deaths\\n\\nMiami 111 2,280 1,646 2,253 231 292 1 N/A N/A\\nNew Orleans 63 920 528 21 6 10 0 N/A N/A\\nRamey 38 388 387 3 2,932 89 0 N/A N/A\\nCoastal Border Sectors Total 212 3,588 2,561 2,277 3,169 391 1 N/A **** N/A ****\\n\\nBlaine 296 288 237 0 0 9 0 N/A N/A\\nBuffalo 277 447 293 228 2 37 2 N/A N/A\\nDetroit 408 1,070 322 124 0 85 1 N/A N/A\\nGrand Forks 189 496 202 0 0 40 2 N/A N/A\\nHavre 183 39 28 98 0 2 0 N/A N/A\\nHoulton 173 30 30 17 0 2 0 N/A N/A\\nSpokane 230 208 67 68 0 24 0 N/A N/A\\nSwanton 292 449 359 531 1 103 6 N/A N/A\\nNorthern Border Sectors Total 2,048 3,027 1,538 1,066 3 302 11 N/A **** N/A ****\\nBig Bend (formerly Marfa) 500 6,002 3,346 40,852 45 2,847 11 26 1\\nDel Rio 1,391 13,476 6,156 9,482 62 8,022 12 99 18\\nEl Centro 870 18,633 5,812 5,554 484 1,413 34 4 2\\nEl Paso 2,182 25,193 15,337 34,189 140 6,996 54 44 8\\nLaredo 1,666 25,460 7,891 69,535 757 6,119 31 1,054 83\\nRio Grande Valley (formerly McAllen) 3,130 137,562 107,909 260,020 1,192 7,979 422 1,190 104\\nSan Diego 2,199 26,086 7,060 10,985 2,903 3,099 84 48 4\\nTucson 3,691 38,657 12,328 397,090 331 20,963 93 750 72\\nYuma 859 12,847 10,139 30,181 261 2,367 33 6 2\\nSouthwest Border Sectors Total** 16,605 303,916 175,978 857,888 6,174 59,805 774 3,221 294\\nNationwide Total*** 19,437 310,531 180,077 861,231 9,346 60,498 786 3,221 294\\n* Agent staffing statistics depict FY17 on-board personnel data as of 9/30/2017\\n** Southwest Border Sectors staffing statistics include: Big Bend, Del Rio, El Centro, El Paso, Laredo, Rio Grande Valley, San Diego, Tucson, Yuma, and the Special Operations Group.\\n*** Nationwide staffing statistics include: All on-board Border Patrol agents in CBP\\n**** Rescue and Death statistics are not tracked for Northern and Coastal Border Sectors.&quot; We can make it a data.frame just by putting it in data.frame(). To avoid making the columns into factors, well set the parameter stringsAsFactors to FALSE. And we can assign the columns names using a vector of strings we can make. Well use the same column names as in the PDF but in lowercase and replacing spaces and parentheses with underscores. sector_profile &lt;- data.frame(sector_profile, stringsAsFactors = FALSE) names(sector_profile) &lt;- c(&quot;sector&quot;, &quot;agent_staffing&quot;, &quot;apprehensions&quot;, &quot;other_than_mexican_apprehensions&quot;, &quot;marijuana_pounds&quot;, &quot;cocaine_pounds&quot;, &quot;accepted_prosecutions&quot;, &quot;assaults&quot;, &quot;rescues&quot;, &quot;deaths&quot;) We have now taken a table from a PDF and successfully scraped it to a data.frame in R. Now we can work on it as we would any other data set that weve used previously. head(sector_profile) #&gt; sector #&gt; 1 United States Border Patrol\\n #&gt; agent_staffing #&gt; 1 Sector Profile - Fiscal Year 2017 (Oct. 1st through Sept. 30th)\\n\\n #&gt; apprehensions other_than_mexican_apprehensions #&gt; 1 Agent Other Than Mexican #&gt; marijuana_pounds cocaine_pounds accepted_prosecutions #&gt; 1 Marijuana Cocaine Accepted\\n #&gt; assaults rescues #&gt; 1 SECTOR Staffing*\\n #&gt; deaths #&gt; 1 Apprehensions\\n Apprehensions (pounds) (pounds) Prosecutions\\n Assaults Rescues Deaths\\n\\nMiami 111 2,280 1,646 2,253 231 292 1 N/A N/A\\nNew Orleans 63 920 528 21 6 10 0 N/A N/A\\nRamey 38 388 387 3 2,932 89 0 N/A N/A\\nCoastal Border Sectors Total 212 3,588 2,561 2,277 3,169 391 1 N/A **** N/A ****\\n\\nBlaine 296 288 237 0 0 9 0 N/A N/A\\nBuffalo 277 447 293 228 2 37 2 N/A N/A\\nDetroit 408 1,070 322 124 0 85 1 N/A N/A\\nGrand Forks 189 496 202 0 0 40 2 N/A N/A\\nHavre 183 39 28 98 0 2 0 N/A N/A\\nHoulton 173 30 30 17 0 2 0 N/A N/A\\nSpokane 230 208 67 68 0 24 0 N/A N/A\\nSwanton 292 449 359 531 1 103 6 N/A N/A\\nNorthern Border Sectors Total 2,048 3,027 1,538 1,066 3 302 11 N/A **** N/A ****\\nBig Bend (formerly Marfa) 500 6,002 3,346 40,852 45 2,847 11 26 1\\nDel Rio 1,391 13,476 6,156 9,482 62 8,022 12 99 18\\nEl Centro 870 18,633 5,812 5,554 484 1,413 34 4 2\\nEl Paso 2,182 25,193 15,337 34,189 140 6,996 54 44 8\\nLaredo 1,666 25,460 7,891 69,535 757 6,119 31 1,054 83\\nRio Grande Valley (formerly McAllen) 3,130 137,562 107,909 260,020 1,192 7,979 422 1,190 104\\nSan Diego 2,199 26,086 7,060 10,985 2,903 3,099 84 48 4\\nTucson 3,691 38,657 12,328 397,090 331 20,963 93 750 72\\nYuma 859 12,847 10,139 30,181 261 2,367 33 6 2\\nSouthwest Border Sectors Total** 16,605 303,916 175,978 857,888 6,174 59,805 774 3,221 294\\nNationwide Total*** 19,437 310,531 180,077 861,231 9,346 60,498 786 3,221 294\\n* Agent staffing statistics depict FY17 on-board personnel data as of 9/30/2017\\n** Southwest Border Sectors staffing statistics include: Big Bend, Del Rio, El Centro, El Paso, Laredo, Rio Grande Valley, San Diego, Tucson, Yuma, and the Special Operations Group.\\n*** Nationwide staffing statistics include: All on-board Border Patrol agents in CBP\\n**** Rescue and Death statistics are not tracked for Northern and Coastal Border Sectors. To really be able to use this data well want to clean the columns to turn the values to numeric type but we can leave that until later. For now lets write a function that replicates much of this work for the next tables. 23.2 Making a function As weve done before, we want to take the code we wrote for the specific case of the first table in this PDF and turn it into a function for the general case of other tables in the PDF. Lets copy the code we used above then convert it to a function. sector_profile &lt;- border_patrol[1] sector_profile &lt;- trimws(sector_profile) sector_profile &lt;- strsplit(sector_profile, &quot;\\r\\n&quot;) sector_profile &lt;- sector_profile[[1]] sector_profile &lt;- sector_profile[grep(&quot;Miami&quot;, sector_profile):grep(&quot;Nationwide Total&quot;, sector_profile)] sector_profile &lt;- str_split_fixed(sector_profile, &quot; {2,}&quot;, 10) sector_profile &lt;- data.frame(sector_profile, stringsAsFactors = FALSE) names(sector_profile) &lt;- c(&quot;sector&quot;, &quot;agent_staffing&quot;, &quot;total_apprehensions&quot;, &quot;other_than_mexican_apprehensions&quot;, &quot;marijuana_pounds&quot;, &quot;cocaine_pounds&quot;, &quot;accepted_prosecutions&quot;, &quot;assaults&quot;, &quot;rescues&quot;, &quot;deaths&quot;) Since each table is so similar our function will only need a few changes in the above code to work for all three tables. The object border_patrol has all four of the tables in the data, so we need to say which of these tables we want - we can call the parameter table_number. Then each table has a different number of columns so we need to change the str_split_fixed() function to take a variable with the number of columns we input, a value well call number_columns. We rename each column to their proper name so we need to input a vector - which well call column_names - with the names for each column. Finally, we want to have a parameter where we enter in the data which holds all of the tables, our object border_patrol, we can call this list_of_tables as it is fairly descriptive. We do this as it is bad form to have a function that relies on an object that isnt explicitly put in the function. It we change our border_patrol object and the function doesnt have that as an input, it will work differently than we expect. Since we called the object we scraped sector_profile for the first table, lets change that to data as not all tables are called Sector Profile. scrape_pdf &lt;- function(list_of_tables, table_number, number_columns, column_names) { data &lt;- list_of_tables[table_number] data &lt;- trimws(data) data &lt;- strsplit(data, &quot;\\r\\n&quot;) data &lt;- data[[1]] data &lt;- data[grep(&quot;Miami&quot;, data):grep(&quot;Nationwide Total&quot;, data)] data &lt;- str_split_fixed(data, &quot; {2,}&quot;, number_columns) data &lt;- data.frame(data, stringsAsFactors = FALSE) names(data) &lt;- column_names return(data) } Now lets run this function for each of the three tables we want to scrape, changing the functions parameters to work for each table. To see what parameter values you need to input, look at the PDF itself or the screenshots in this lesson. table_1 &lt;- scrape_pdf(list_of_tables = border_patrol, table_number = 1, number_columns = 10, column_names = c(&quot;sector&quot;, &quot;agent_staffing&quot;, &quot;total_apprehensions&quot;, &quot;other_than_mexican_apprehensions&quot;, &quot;marijuana_pounds&quot;, &quot;cocaine_pounds&quot;, &quot;accepted_prosecutions&quot;, &quot;assaults&quot;, &quot;rescues&quot;, &quot;deaths&quot;)) table_2 &lt;- scrape_pdf(list_of_tables = border_patrol, table_number = 2, number_columns = 6, column_names = c(&quot;sector&quot;, &quot;accompanied_juveniles&quot;, &quot;unaccompanied_juveniles&quot;, &quot;total_juveniles&quot;, &quot;total_adults&quot;, &quot;total_apprehensions&quot;)) table_3 &lt;- scrape_pdf(list_of_tables = border_patrol, table_number = 3, number_columns = 4, column_names = c(&quot;sector&quot;, &quot;female&quot;, &quot;male&quot;, &quot;total_apprehensions&quot;)) We can use the function left_join() from the dplyr package to combine the three tables into a single object. In the first table there are some asterix after the final two row names in the Sector column. For our match to work properly we need to delete them which we can do using gsub(). If you look carefully at the Sector column in table_1 youll see that each value starts with a space (this is something that is hard to see just looking at the data and is found primarily when encountering an error that forces you to search as I did here). Since the other tables do not have their values start with a space, it wont match properly in left_join(). Well fix this by running trimws() on the column from table_1. table_1$sector &lt;- gsub(&quot;\\\\*&quot;, &quot;&quot;, table_1$sector) table_1$sector &lt;- trimws(table_1$sector) Now we can run left_join(). library(dplyr) #&gt; #&gt; Attaching package: &#39;dplyr&#39; #&gt; The following objects are masked from &#39;package:stats&#39;: #&gt; #&gt; filter, lag #&gt; The following objects are masked from &#39;package:base&#39;: #&gt; #&gt; intersect, setdiff, setequal, union final_data &lt;- left_join(table_1, table_2) #&gt; Joining, by = c(&quot;sector&quot;, &quot;total_apprehensions&quot;) final_data &lt;- left_join(final_data, table_3) #&gt; Joining, by = c(&quot;sector&quot;, &quot;total_apprehensions&quot;) Lets take a look at the head() of this combined data. head(final_data) #&gt; sector #&gt; 1 United States Border Patrol #&gt; agent_staffing #&gt; 1 Sector Profile - Fiscal Year 2017 (Oct. 1st through Sept. 30th)\\n\\n #&gt; total_apprehensions other_than_mexican_apprehensions #&gt; 1 Agent Other Than Mexican #&gt; marijuana_pounds cocaine_pounds accepted_prosecutions #&gt; 1 Marijuana Cocaine Accepted\\n #&gt; assaults rescues #&gt; 1 SECTOR Staffing*\\n #&gt; deaths #&gt; 1 Apprehensions\\n Apprehensions (pounds) (pounds) Prosecutions\\n Assaults Rescues Deaths\\n\\nMiami 111 2,280 1,646 2,253 231 292 1 N/A N/A\\nNew Orleans 63 920 528 21 6 10 0 N/A N/A\\nRamey 38 388 387 3 2,932 89 0 N/A N/A\\nCoastal Border Sectors Total 212 3,588 2,561 2,277 3,169 391 1 N/A **** N/A ****\\n\\nBlaine 296 288 237 0 0 9 0 N/A N/A\\nBuffalo 277 447 293 228 2 37 2 N/A N/A\\nDetroit 408 1,070 322 124 0 85 1 N/A N/A\\nGrand Forks 189 496 202 0 0 40 2 N/A N/A\\nHavre 183 39 28 98 0 2 0 N/A N/A\\nHoulton 173 30 30 17 0 2 0 N/A N/A\\nSpokane 230 208 67 68 0 24 0 N/A N/A\\nSwanton 292 449 359 531 1 103 6 N/A N/A\\nNorthern Border Sectors Total 2,048 3,027 1,538 1,066 3 302 11 N/A **** N/A ****\\nBig Bend (formerly Marfa) 500 6,002 3,346 40,852 45 2,847 11 26 1\\nDel Rio 1,391 13,476 6,156 9,482 62 8,022 12 99 18\\nEl Centro 870 18,633 5,812 5,554 484 1,413 34 4 2\\nEl Paso 2,182 25,193 15,337 34,189 140 6,996 54 44 8\\nLaredo 1,666 25,460 7,891 69,535 757 6,119 31 1,054 83\\nRio Grande Valley (formerly McAllen) 3,130 137,562 107,909 260,020 1,192 7,979 422 1,190 104\\nSan Diego 2,199 26,086 7,060 10,985 2,903 3,099 84 48 4\\nTucson 3,691 38,657 12,328 397,090 331 20,963 93 750 72\\nYuma 859 12,847 10,139 30,181 261 2,367 33 6 2\\nSouthwest Border Sectors Total** 16,605 303,916 175,978 857,888 6,174 59,805 774 3,221 294\\nNationwide Total*** 19,437 310,531 180,077 861,231 9,346 60,498 786 3,221 294\\n* Agent staffing statistics depict FY17 on-board personnel data as of 9/30/2017\\n** Southwest Border Sectors staffing statistics include: Big Bend, Del Rio, El Centro, El Paso, Laredo, Rio Grande Valley, San Diego, Tucson, Yuma, and the Special Operations Group.\\n*** Nationwide staffing statistics include: All on-board Border Patrol agents in CBP\\n**** Rescue and Death statistics are not tracked for Northern and Coastal Border Sectors. #&gt; accompanied_juveniles unaccompanied_juveniles #&gt; 1 &lt;NA&gt; &lt;NA&gt; #&gt; total_juveniles total_adults female male #&gt; 1 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; In one data set we now have information from three separate tables in a PDF. Theres still some work to do - primarily convert the numeric columns to be actually numeric using gsub() to remove commas then using as.numeric() (or the parse_numeric() function from readr) on each column (probably through a for loop). but we have still made important progress getting useful data from a PDF table. "],["scrape-table2.html", "24 More scraping tables from PDFs 24.1 Pregnant Women Incarcerated 24.2 Making PDF-scraped data available to others", " 24 More scraping tables from PDFs For this chapter youll need the following files, which are available for download here: AbbreRptCurrent.pdf and PregnantFemaleReportingCurrent.pdf. In Chapter 23 we used the package pdftools to scrape tables on arrests/seizures from the United States Border Patrol that were only available in a PDF. Given the importance of PDF scraping - hopefully by the time you read this chapter more data will be available in reasonable formats and not in PDFs - in this chapter well continue working on scraping tables from PDFs. Here we will use the package tabulizer which has a number of features making it especially useful for grabbing tables from PDFs. One issue which we saw in Chapter 23 is that the table may not be the only thing on the page - the page could also have a title, page number etc. When using pdftools we use regular expressions and subsetting to remove all the extra lines. Using tabulizer we can simply say (through a handy function) that we only want a part of the page, so we only scrape the table itself. For more info about the tabulizer package please see their site here. For this chapter well scrape data from the Texas Commission on Jail Standards - Abbreviated Population Report. This is a report that shows monthly data on people incarcerated in jails for counties in Texas and is available here. Make sure to download this file and put it in the working directory that you use to follow along. This PDF is 9 pages long because of how many counties there are in Texas. Lets take a look at what the first page looks like. If you look at the PDF yourself youll see that every page follows the format of the 1st page, which greatly simplifies our scrape. The data is in county-month units which means that each row of data has info for a single county in a single month. We know that because the first column is County and each row is a single county (this is not true is every case. For example, on page 3 there are the rows Fannin 1(P) and Fannin 2(P), possibly indicating that there are two jails in that county. It is unclear from this PDF what the (P) means.). For knowing that the data is monthly, the title of this document says for 06/01/2020 indicating that it is for that date, though this doesnt by itself mean the data is monthly - it could be daily based only on this data. To know that its monthly data wed have to go to the original source on the Texas Commission on Jail Standards website here. On this page it says that Monthly population reports are available for review below,\" which tells us that the data is monthly. Its important to know the unit so you can understand the data properly - primarily so you know what kinds of questions you can answer. If someone asks whether yearly trends on jail incarceration change in Texas, you can answer that with this data. If they ask whether more people are in jail on a Tuesday than on a Friday, you cant. Just to understand what units our data is in we had to look at both the PDF itself and the site it came from. This kind of multi-step process is tedious but often necessary to truly understand your data. And even now we have questions - what does the (P) thats in some rows mean? For this wed have to email or call the people who handle the data and ask directly. This is often the easiest way to answer your question, though different organizations have varying speeds in responding - if ever. Now lets look at what columns are available. It looks like each column is the number of people incarcerated in the jail, broken down into categories of people. For example, the first two columns after County are Pretrial Felons and Conv. Felons so those are probably how many people are incarcerated who are awaiting trial for a felony and those already convicted of a felony. The other columns seem to follow this same format until the last few ones which describe the jails capacity (i.e.Â how many people they can hold), what percent of capacity they are at, and specifically how many open beds they have. Now that weve familiarized ourselves with the data, lets begin scraping this data using tabulizer. If you dont have this package installed, youll need to install it using install.packages(\"tabulizer\"). Then well need to run library(tabulizer). library(tabulizer) The main function that well be using from the tabulizer package is extract_tables(). This function basically looks at a PDF page, figures out which part of the page is a table, and then scrapes just that table. As well see, its not always perfect at figuring out what part of the page is a table so we can also tell it exactly where to look. You can look at all of the features of extract_tables() by running help(extract_tables). data &lt;- extract_tables(file = &quot;data/AbbreRptCurrent.pdf&quot;) is(data) #&gt; [1] &quot;list&quot; &quot;vector&quot; length(data) #&gt; [1] 18 data[[1]] #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;Conv. Felons&quot; #&gt; [2,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;Sentenced to&quot; #&gt; [3,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;County Jail&quot; #&gt; [4,] &quot;&quot; &quot;Pretrial&quot; &quot;Conv.&quot; &quot;&quot; #&gt; [5,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;time&quot; #&gt; [6,] &quot;County&quot; &quot;Felons&quot; &quot;Felons&quot; &quot;&quot; #&gt; [,5] [,6] [,7] [,8] #&gt; [1,] &quot;&quot; &quot;Parole&quot; &quot;&quot; &quot;&quot; #&gt; [2,] &quot;&quot; &quot;Violators&quot; &quot;&quot; &quot;&quot; #&gt; [3,] &quot;&quot; &quot;with a New&quot; &quot;&quot; &quot;&quot; #&gt; [4,] &quot;Parole&quot; &quot;&quot; &quot;Pretrial&quot; &quot;Conv.&quot; #&gt; [5,] &quot;&quot; &quot;Charge&quot; &quot;&quot; &quot;&quot; #&gt; [6,] &quot;Violators&quot; &quot;&quot; &quot;Misd.&quot; &quot;Misd.&quot; #&gt; [,9] [,10] [,11] [,12] #&gt; [1,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;Conv. SJF&quot; #&gt; [2,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;Sentenced&quot; #&gt; [3,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;to Co. Jail&quot; #&gt; [4,] &quot;Bench&quot; &quot;&quot; &quot;Pretrial&quot; &quot;&quot; #&gt; [5,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;Time&quot; #&gt; [6,] &quot;Warrants&quot; &quot;Federal&quot; &quot;SJF&quot; &quot;&quot; #&gt; [,13] [,14] [,15] [,16] #&gt; [1,] &quot;Conv.&quot; &quot;&quot; &quot;&quot; &quot;&quot; #&gt; [2,] &quot;SJF&quot; &quot;&quot; &quot;&quot; &quot;&quot; #&gt; [3,] &quot;Sentenced&quot; &quot;&quot; &quot;&quot; &quot;&quot; #&gt; [4,] &quot;&quot; &quot;Total&quot; &quot;Total&quot; &quot;Total&quot; #&gt; [5,] &quot;to State Jail&quot; &quot;&quot; &quot;&quot; &quot;&quot; #&gt; [6,] &quot;&quot; &quot;Others&quot; &quot;Local&quot; &quot;Contract&quot; #&gt; [,17] [,18] [,19] [,20] #&gt; [1,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; #&gt; [2,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; #&gt; [3,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; #&gt; [4,] &quot;Total&quot; &quot;Total&quot; &quot;% of&quot; &quot;Available&quot; #&gt; [5,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; #&gt; [6,] &quot;Population&quot; &quot;Capacity&quot; &quot;Capacity&quot; &quot;Beds&quot; head(data[[2]]) #&gt; [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #&gt; [1,] &quot;Anderson&quot; &quot;81&quot; &quot;13&quot; &quot;3&quot; &quot;1&quot; &quot;5&quot; &quot;12&quot; &quot;1&quot; #&gt; [2,] &quot;Andrews&quot; &quot;23&quot; &quot;11&quot; &quot;0&quot; &quot;2&quot; &quot;4&quot; &quot;11&quot; &quot;0&quot; #&gt; [3,] &quot;Angelina&quot; &quot;79&quot; &quot;35&quot; &quot;4&quot; &quot;6&quot; &quot;0&quot; &quot;14&quot; &quot;0&quot; #&gt; [4,] &quot;Aransas&quot; &quot;23&quot; &quot;10&quot; &quot;0&quot; &quot;2&quot; &quot;6&quot; &quot;7&quot; &quot;0&quot; #&gt; [5,] &quot;Archer&quot; &quot;12&quot; &quot;3&quot; &quot;0&quot; &quot;0&quot; &quot;1&quot; &quot;3&quot; &quot;1&quot; #&gt; [6,] &quot;Armstrong&quot; &quot;1&quot; &quot;1&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; #&gt; [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] #&gt; [1,] &quot;0&quot; &quot;0&quot; &quot;21&quot; &quot;0&quot; &quot;1&quot; &quot;0&quot; &quot;138&quot; &quot;0&quot; #&gt; [2,] &quot;0&quot; &quot;0&quot; &quot;5&quot; &quot;0&quot; &quot;6&quot; &quot;0&quot; &quot;35&quot; &quot;0&quot; #&gt; [3,] &quot;3&quot; &quot;0&quot; &quot;23&quot; &quot;0&quot; &quot;3&quot; &quot;1&quot; &quot;168&quot; &quot;0&quot; #&gt; [4,] &quot;6&quot; &quot;73&quot; &quot;2&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;56&quot; &quot;73&quot; #&gt; [5,] &quot;1&quot; &quot;2&quot; &quot;5&quot; &quot;0&quot; &quot;0&quot; &quot;1&quot; &quot;26&quot; &quot;9&quot; #&gt; [6,] &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;2&quot; &quot;0&quot; #&gt; [,17] [,18] [,19] [,20] #&gt; [1,] &quot;138&quot; &quot;300&quot; &quot;46.00&quot; &quot;132&quot; #&gt; [2,] &quot;35&quot; &quot;50&quot; &quot;70.00&quot; &quot;10&quot; #&gt; [3,] &quot;168&quot; &quot;279&quot; &quot;60.22&quot; &quot;83&quot; #&gt; [4,] &quot;129&quot; &quot;212&quot; &quot;60.85&quot; &quot;62&quot; #&gt; [5,] &quot;35&quot; &quot;48&quot; &quot;72.92&quot; &quot;0&quot; #&gt; [6,] &quot;2&quot; &quot;8&quot; &quot;25.00&quot; &quot;0&quot; Above is scraping code and some output when running extract_tables() on our PDF using all of the default options in that function. The only parameter we put in the function is file = \"data/Abbreviated Pop Rpt Dec 2017.pdf\". This is just telling the function where to look for the PDF. I have the PDF in the data folder of my project; youll need to change this to have extract_tables() look in the right place for the PDF on your computer. You can see from the output that the scrape was successful - but our work isnt done yet. The results from is(data) say that the scrape returned a list, and from length(data) we learn that its a list of length 18. Why is this? We have 9 pages so it is reasonable that we would have 9 lists since we have one table per page, but we shouldnt have 19 tables. Lets look again at just the first table - as it is a list, well need double square brackets to pull just the first element in the list. data[[1]] #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;Conv. Felons&quot; #&gt; [2,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;Sentenced to&quot; #&gt; [3,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;County Jail&quot; #&gt; [4,] &quot;&quot; &quot;Pretrial&quot; &quot;Conv.&quot; &quot;&quot; #&gt; [5,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;time&quot; #&gt; [6,] &quot;County&quot; &quot;Felons&quot; &quot;Felons&quot; &quot;&quot; #&gt; [,5] [,6] [,7] [,8] #&gt; [1,] &quot;&quot; &quot;Parole&quot; &quot;&quot; &quot;&quot; #&gt; [2,] &quot;&quot; &quot;Violators&quot; &quot;&quot; &quot;&quot; #&gt; [3,] &quot;&quot; &quot;with a New&quot; &quot;&quot; &quot;&quot; #&gt; [4,] &quot;Parole&quot; &quot;&quot; &quot;Pretrial&quot; &quot;Conv.&quot; #&gt; [5,] &quot;&quot; &quot;Charge&quot; &quot;&quot; &quot;&quot; #&gt; [6,] &quot;Violators&quot; &quot;&quot; &quot;Misd.&quot; &quot;Misd.&quot; #&gt; [,9] [,10] [,11] [,12] #&gt; [1,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;Conv. SJF&quot; #&gt; [2,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;Sentenced&quot; #&gt; [3,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;to Co. Jail&quot; #&gt; [4,] &quot;Bench&quot; &quot;&quot; &quot;Pretrial&quot; &quot;&quot; #&gt; [5,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;Time&quot; #&gt; [6,] &quot;Warrants&quot; &quot;Federal&quot; &quot;SJF&quot; &quot;&quot; #&gt; [,13] [,14] [,15] [,16] #&gt; [1,] &quot;Conv.&quot; &quot;&quot; &quot;&quot; &quot;&quot; #&gt; [2,] &quot;SJF&quot; &quot;&quot; &quot;&quot; &quot;&quot; #&gt; [3,] &quot;Sentenced&quot; &quot;&quot; &quot;&quot; &quot;&quot; #&gt; [4,] &quot;&quot; &quot;Total&quot; &quot;Total&quot; &quot;Total&quot; #&gt; [5,] &quot;to State Jail&quot; &quot;&quot; &quot;&quot; &quot;&quot; #&gt; [6,] &quot;&quot; &quot;Others&quot; &quot;Local&quot; &quot;Contract&quot; #&gt; [,17] [,18] [,19] [,20] #&gt; [1,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; #&gt; [2,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; #&gt; [3,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; #&gt; [4,] &quot;Total&quot; &quot;Total&quot; &quot;% of&quot; &quot;Available&quot; #&gt; [5,] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; #&gt; [6,] &quot;Population&quot; &quot;Capacity&quot; &quot;Capacity&quot; &quot;Beds&quot; The results from data[[1]] provide some answers. It has the right number of columns but only 6 rows! This is our first table so should be the entire table we can see on page 1. Instead, it appears to be just the column names, with 6 rows because some column names are on multiple rows. Heres the issue, we can read the table and easily see that the column names may be on multiple rows but belong together, and that they are part of the table. tabulizer cant see this obvious fact as we can, it must rely on a series of rules to indicate what is part of a table and what isnt. For example, having white space between columns and thin black lines around rows tells it where each row and column is. Our issue is that the column names appear to just be text until there is a thick black line and (in tabulizer's mind) the table begins, so it keeps the column name part separate from the rest of the table. Now lets look closer at table 2 and see if it is correct for the table on page 1 of our PDF. head(data[[2]]) #&gt; [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #&gt; [1,] &quot;Anderson&quot; &quot;81&quot; &quot;13&quot; &quot;3&quot; &quot;1&quot; &quot;5&quot; &quot;12&quot; &quot;1&quot; #&gt; [2,] &quot;Andrews&quot; &quot;23&quot; &quot;11&quot; &quot;0&quot; &quot;2&quot; &quot;4&quot; &quot;11&quot; &quot;0&quot; #&gt; [3,] &quot;Angelina&quot; &quot;79&quot; &quot;35&quot; &quot;4&quot; &quot;6&quot; &quot;0&quot; &quot;14&quot; &quot;0&quot; #&gt; [4,] &quot;Aransas&quot; &quot;23&quot; &quot;10&quot; &quot;0&quot; &quot;2&quot; &quot;6&quot; &quot;7&quot; &quot;0&quot; #&gt; [5,] &quot;Archer&quot; &quot;12&quot; &quot;3&quot; &quot;0&quot; &quot;0&quot; &quot;1&quot; &quot;3&quot; &quot;1&quot; #&gt; [6,] &quot;Armstrong&quot; &quot;1&quot; &quot;1&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; #&gt; [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] #&gt; [1,] &quot;0&quot; &quot;0&quot; &quot;21&quot; &quot;0&quot; &quot;1&quot; &quot;0&quot; &quot;138&quot; &quot;0&quot; #&gt; [2,] &quot;0&quot; &quot;0&quot; &quot;5&quot; &quot;0&quot; &quot;6&quot; &quot;0&quot; &quot;35&quot; &quot;0&quot; #&gt; [3,] &quot;3&quot; &quot;0&quot; &quot;23&quot; &quot;0&quot; &quot;3&quot; &quot;1&quot; &quot;168&quot; &quot;0&quot; #&gt; [4,] &quot;6&quot; &quot;73&quot; &quot;2&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;56&quot; &quot;73&quot; #&gt; [5,] &quot;1&quot; &quot;2&quot; &quot;5&quot; &quot;0&quot; &quot;0&quot; &quot;1&quot; &quot;26&quot; &quot;9&quot; #&gt; [6,] &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;2&quot; &quot;0&quot; #&gt; [,17] [,18] [,19] [,20] #&gt; [1,] &quot;138&quot; &quot;300&quot; &quot;46.00&quot; &quot;132&quot; #&gt; [2,] &quot;35&quot; &quot;50&quot; &quot;70.00&quot; &quot;10&quot; #&gt; [3,] &quot;168&quot; &quot;279&quot; &quot;60.22&quot; &quot;83&quot; #&gt; [4,] &quot;129&quot; &quot;212&quot; &quot;60.85&quot; &quot;62&quot; #&gt; [5,] &quot;35&quot; &quot;48&quot; &quot;72.92&quot; &quot;0&quot; #&gt; [6,] &quot;2&quot; &quot;8&quot; &quot;25.00&quot; &quot;0&quot; tail(data[[2]]) #&gt; [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #&gt; [24,] &quot;Brooks&quot; &quot;15&quot; &quot;1&quot; &quot;1&quot; &quot;1&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; #&gt; [25,] &quot;Brooks (P)&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; #&gt; [26,] &quot;Brown&quot; &quot;70&quot; &quot;20&quot; &quot;0&quot; &quot;7&quot; &quot;20&quot; &quot;9&quot; &quot;0&quot; #&gt; [27,] &quot;Burleson&quot; &quot;19&quot; &quot;2&quot; &quot;0&quot; &quot;2&quot; &quot;0&quot; &quot;3&quot; &quot;0&quot; #&gt; [28,] &quot;Burnet&quot; &quot;57&quot; &quot;23&quot; &quot;1&quot; &quot;5&quot; &quot;9&quot; &quot;3&quot; &quot;0&quot; #&gt; [29,] &quot;Caldwell&quot; &quot;89&quot; &quot;4&quot; &quot;0&quot; &quot;3&quot; &quot;2&quot; &quot;26&quot; &quot;1&quot; #&gt; [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] #&gt; [24,] &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;18&quot; &quot;0&quot; #&gt; [25,] &quot;0&quot; &quot;164&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;408&quot; #&gt; [26,] &quot;2&quot; &quot;0&quot; &quot;0&quot; &quot;3&quot; &quot;0&quot; &quot;2&quot; &quot;133&quot; &quot;7&quot; #&gt; [27,] &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;1&quot; &quot;27&quot; &quot;0&quot; #&gt; [28,] &quot;1&quot; &quot;0&quot; &quot;10&quot; &quot;1&quot; &quot;0&quot; &quot;0&quot; &quot;110&quot; &quot;158&quot; #&gt; [29,] &quot;2&quot; &quot;19&quot; &quot;13&quot; &quot;0&quot; &quot;3&quot; &quot;0&quot; &quot;143&quot; &quot;21&quot; #&gt; [,17] [,18] [,19] [,20] #&gt; [24,] &quot;18&quot; &quot;36&quot; &quot;50.00&quot; &quot;14&quot; #&gt; [25,] &quot;408&quot; &quot;652&quot; &quot;62.58&quot; &quot;179&quot; #&gt; [26,] &quot;140&quot; &quot;196&quot; &quot;71.43&quot; &quot;36&quot; #&gt; [27,] &quot;27&quot; &quot;96&quot; &quot;28.13&quot; &quot;59&quot; #&gt; [28,] &quot;268&quot; &quot;595&quot; &quot;45.04&quot; &quot;268&quot; #&gt; [29,] &quot;164&quot; &quot;301&quot; &quot;54.49&quot; &quot;107&quot; Were looking just at the head() and tail() to get the first and 6 six rows as otherwise wed print out all 29 rows in that table. When you are exploring you own data, youll probably want to be more thorough and ensure that rows around the middle are also correct - but this is a good first pass. If you look at the output the table and compare it to the PDF, youll see that the scrape was successful. Every row is where it should be and the columns are correct - unlike using pdftools() we have the results already in proper columns. One thing to note is that this data isnt in a data.frame format, its in a matrix. Matrices are the default output of extract_tables() though you can set it to output a data.frame by setting the parameter output = \"data.frame\". In our case we actually wouldnt want that due to the issue of the column names. data &lt;- extract_tables(file = &quot;data/AbbreRptCurrent.pdf&quot;, output = &quot;data.frame&quot;) head(data[[2]]) #&gt; Anderson X81 X13 X3 X1 X5 X12 X1.1 X0 X0.1 X21 X0.2 #&gt; 1 Andrews 23 11 0 2 4 11 0 0 0 5 0 #&gt; 2 Angelina 79 35 4 6 0 14 0 3 0 23 0 #&gt; 3 Aransas 23 10 0 2 6 7 0 6 73 2 0 #&gt; 4 Archer 12 3 0 0 1 3 1 1 2 5 0 #&gt; 5 Armstrong 1 1 0 0 0 0 0 0 0 0 0 #&gt; 6 Atascosa 54 2 0 8 4 21 0 5 0 29 0 #&gt; X1.2 X0.3 X138 X0.4 X138.1 X300 X46.00 X132 #&gt; 1 6 0 35 0 35 50 70.00 10 #&gt; 2 3 1 168 0 168 279 60.22 83 #&gt; 3 0 0 56 73 129 212 60.85 62 #&gt; 4 0 1 26 9 35 48 72.92 0 #&gt; 5 0 0 2 0 2 8 25.00 0 #&gt; 6 4 0 127 29 156 250 62.40 69 Above we reran the extract_tables() code and just added a parameter to make the output a data.frame instead of a matrix. Now it sets the first row - which should be the columns - as the column name, which is not correct. Well have to fix the column names first before we can convert the result from a matrix to a data.frame. Well use the apply() function on our data to create column names from it. The apply() function is actual part of a family of similar function which essentially operate as quicker for loops - we could have done a for loop to solve this problem. The apply() function takes as an input a vector or matrix data set, and then performs some function on either its rows or its columns. Our first input is our data, the first element of the data list. Then we put the number 2 to indicate that we want it to perform our function on each column of the matrix - if we put 1, that would perform the function on each row. So now what function to use on this data? We want to combine each row together into a single string per column. To do that we can use the paste() function and use the collapse parameter to combine multiple strings to a single string. So after the 2 we enter paste, and then just add collapse = \"\" (the \"\" means that were not putting anything between the strings when combining them) separated by a comma. Lets see what it returns. apply(data[[1]], 2, paste, collapse = &quot;&quot;) #&gt; X #&gt; &quot;County&quot; #&gt; X.1 #&gt; &quot;PretrialFelons&quot; #&gt; X.2 #&gt; &quot;Conv.Felons&quot; #&gt; Conv..Felons #&gt; &quot;Sentenced toCounty Jailtime&quot; #&gt; X.3 #&gt; &quot;ParoleViolators&quot; #&gt; Parole #&gt; &quot;Violatorswith a NewCharge&quot; #&gt; X.4 #&gt; &quot;PretrialMisd.&quot; #&gt; X.5 #&gt; &quot;Conv.Misd.&quot; #&gt; X.6 #&gt; &quot;BenchWarrants&quot; #&gt; X.7 #&gt; &quot;Federal&quot; #&gt; X.8 #&gt; &quot;PretrialSJF&quot; #&gt; Conv..SJF #&gt; &quot;Sentencedto Co. JailTime&quot; #&gt; Conv. #&gt; &quot;SJFSentencedto State Jail&quot; #&gt; X.9 #&gt; &quot;TotalOthers&quot; #&gt; X.10 #&gt; &quot;TotalLocal&quot; #&gt; X.11 #&gt; &quot;TotalContract&quot; #&gt; X.12 #&gt; &quot;TotalPopulation&quot; #&gt; X.13 #&gt; &quot;TotalCapacity&quot; #&gt; X.14 #&gt; &quot;% ofCapacity&quot; #&gt; X.15 #&gt; &quot;AvailableBeds&quot; Now we have a vector of 20 strings, one per column in our data. We will use this to name the columns in our data set with the actual info from the scraped table. One helper function first. The column names dont follow conventional R style for column names - it has spaces, uppercase letters, punctuation other than the underscore. To easily fix this we can use the make_clean_names() function from the janitor package. If you dont have this package installed, install it using install.packages(\"janitor\"). Well first save the results of the above apply() function as a vector we can call column_names and then run the make_clean_names() function on it. The input to make_clean_names() is the vector of strings (our column names) and itll return that vector but now with names in Rs common style. library(janitor) #&gt; #&gt; Attaching package: &#39;janitor&#39; #&gt; The following objects are masked from &#39;package:stats&#39;: #&gt; #&gt; chisq.test, fisher.test column_names &lt;- apply(data[[1]], 2, paste, collapse = &quot;&quot;) column_names &lt;- make_clean_names(column_names) column_names #&gt; [1] &quot;county&quot; #&gt; [2] &quot;pretrial_felons&quot; #&gt; [3] &quot;conv_felons&quot; #&gt; [4] &quot;sentenced_to_county_jailtime&quot; #&gt; [5] &quot;parole_violators&quot; #&gt; [6] &quot;violatorswith_a_new_charge&quot; #&gt; [7] &quot;pretrial_misd&quot; #&gt; [8] &quot;conv_misd&quot; #&gt; [9] &quot;bench_warrants&quot; #&gt; [10] &quot;federal&quot; #&gt; [11] &quot;pretrial_sjf&quot; #&gt; [12] &quot;sentencedto_co_jail_time&quot; #&gt; [13] &quot;sjf_sentencedto_state_jail&quot; #&gt; [14] &quot;total_others&quot; #&gt; [15] &quot;total_local&quot; #&gt; [16] &quot;total_contract&quot; #&gt; [17] &quot;total_population&quot; #&gt; [18] &quot;total_capacity&quot; #&gt; [19] &quot;percent_of_capacity&quot; #&gt; [20] &quot;available_beds&quot; Now the column names are in the proper style. And notice the 19th value, it changed from the percent sign to the word percent. We can combine the results from the first table - the column names - with that of the second table - the actual data - to have a complete table from page 1 of our PDF. We do this simply by making table 2 a data.frame and using names() to rename the columns to the ones we made above. Since this is the table from page 1 of the PDF, well call the object page1_table. page1_table &lt;- data[[2]] page1_table &lt;- data.frame(page1_table) names(page1_table) &lt;- column_names head(page1_table) #&gt; county pretrial_felons conv_felons #&gt; 1 Andrews 23 11 #&gt; 2 Angelina 79 35 #&gt; 3 Aransas 23 10 #&gt; 4 Archer 12 3 #&gt; 5 Armstrong 1 1 #&gt; 6 Atascosa 54 2 #&gt; sentenced_to_county_jailtime parole_violators #&gt; 1 0 2 #&gt; 2 4 6 #&gt; 3 0 2 #&gt; 4 0 0 #&gt; 5 0 0 #&gt; 6 0 8 #&gt; violatorswith_a_new_charge pretrial_misd conv_misd #&gt; 1 4 11 0 #&gt; 2 0 14 0 #&gt; 3 6 7 0 #&gt; 4 1 3 1 #&gt; 5 0 0 0 #&gt; 6 4 21 0 #&gt; bench_warrants federal pretrial_sjf #&gt; 1 0 0 5 #&gt; 2 3 0 23 #&gt; 3 6 73 2 #&gt; 4 1 2 5 #&gt; 5 0 0 0 #&gt; 6 5 0 29 #&gt; sentencedto_co_jail_time sjf_sentencedto_state_jail #&gt; 1 0 6 #&gt; 2 0 3 #&gt; 3 0 0 #&gt; 4 0 0 #&gt; 5 0 0 #&gt; 6 0 4 #&gt; total_others total_local total_contract #&gt; 1 0 35 0 #&gt; 2 1 168 0 #&gt; 3 0 56 73 #&gt; 4 1 26 9 #&gt; 5 0 2 0 #&gt; 6 0 127 29 #&gt; total_population total_capacity percent_of_capacity #&gt; 1 35 50 70.00 #&gt; 2 168 279 60.22 #&gt; 3 129 212 60.85 #&gt; 4 35 48 72.92 #&gt; 5 2 8 25.00 #&gt; 6 156 250 62.40 #&gt; available_beds #&gt; 1 10 #&gt; 2 83 #&gt; 3 62 #&gt; 4 0 #&gt; 5 0 #&gt; 6 69 tail(page1_table) #&gt; county pretrial_felons conv_felons #&gt; 23 Brooks 15 1 #&gt; 24 Brooks (P) 0 0 #&gt; 25 Brown 70 20 #&gt; 26 Burleson 19 2 #&gt; 27 Burnet 57 23 #&gt; 28 Caldwell 89 4 #&gt; sentenced_to_county_jailtime parole_violators #&gt; 23 1 1 #&gt; 24 0 0 #&gt; 25 0 7 #&gt; 26 0 2 #&gt; 27 1 5 #&gt; 28 0 3 #&gt; violatorswith_a_new_charge pretrial_misd conv_misd #&gt; 23 0 0 0 #&gt; 24 0 0 0 #&gt; 25 20 9 0 #&gt; 26 0 3 0 #&gt; 27 9 3 0 #&gt; 28 2 26 1 #&gt; bench_warrants federal pretrial_sjf #&gt; 23 0 0 0 #&gt; 24 0 164 0 #&gt; 25 2 0 0 #&gt; 26 0 0 0 #&gt; 27 1 0 10 #&gt; 28 2 19 13 #&gt; sentencedto_co_jail_time sjf_sentencedto_state_jail #&gt; 23 0 0 #&gt; 24 0 0 #&gt; 25 3 0 #&gt; 26 0 0 #&gt; 27 1 0 #&gt; 28 0 3 #&gt; total_others total_local total_contract #&gt; 23 0 18 0 #&gt; 24 0 0 408 #&gt; 25 2 133 7 #&gt; 26 1 27 0 #&gt; 27 0 110 158 #&gt; 28 0 143 21 #&gt; total_population total_capacity percent_of_capacity #&gt; 23 18 36 50.00 #&gt; 24 408 652 62.58 #&gt; 25 140 196 71.43 #&gt; 26 27 96 28.13 #&gt; 27 268 595 45.04 #&gt; 28 164 301 54.49 #&gt; available_beds #&gt; 23 14 #&gt; 24 179 #&gt; 25 36 #&gt; 26 59 #&gt; 27 268 #&gt; 28 107 Looking at the results of head() and tail() (if this was data that you were using in your project youd want to look closer than just these checks) shows that weve done this correctly. The values are right and the column names are correct. Complete the rest of the PDF on your own. You can follow the same steps as above but now that weve made the column_names object you can reuse that for the other tables. This is only true because each page has the same column names. Otherwise youd have to fix the column names for each page of the PDF. So why did I choose this example when it highlights a limitation of an otherwise very effective R package? A lot of the work you do in R is going to be like the example we went through - there are tools to solve most of the data problems, but youll need to spend time fixing the extra issues. And since a lot of problems are fairly unique (at least insofar as there are differences in your exact problem even if problems are generally similar) theres usually not a R function to solve everything. Below is another (brief) example of the tabulizer package working perfectly - but with a few issues just due to how the data is arranged on the PDF. 24.1 Pregnant Women Incarcerated Well finish this lesson with another example of data from Texas - this time using data on the number of pregnant women booked in Texas county jails. This data has a unique challenge, it has 10 columns but we want to make it have only 2. In the data (shown below), it starts with a column of county names, then a column of the number of pregnant women booked into that countys jail. Next is another column of county names - instead of continuing onto another page, this data just makes new columns when it runs out of room. Well scrape this PDF using tabulizer() and then work to fix this multiple-column issue. The file is called PregnantFemaleReportingCurrent.pdf and is available on GitHub here. Make sure to download this file and put it in the proper working directory for the extract_tables() function we use below. Notice that this data doesnt even have column names. Whereas earlier in this chapter we have to combine multiple rows to form the column names, here we will have to create the names entirely ourselves. This is always a bit risky as maybe next month the table will change and if we hard-code any column names, well either have code that breaks or - much more dangerous - mislabel the columns without noticing. In cases like this we have no other choice, but if you intend to scrape something that recurring - that is, that youll scrape a future version of - be careful about situations like this. Well start scraping this PDF using the standard extract_tables() function without any parameters other than the file name. This is usually a good start since its quick and often works - and if it doesnt, we havent lost much time checking. Since we know extract_tables() will return a list by default, well save the result of extract_tables() as an object called data and then just pull the first element (i.e.Â the only element if this works) from that list. data &lt;- extract_tables(file = &quot;data/PregnantFemaleReportingCurrent.pdf&quot;) data &lt;- data[[1]] data #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] &quot;Anderson&quot; &quot;0&quot; &quot;Delta&quot; &quot;0&quot; #&gt; [2,] &quot;Andrews&quot; &quot;1&quot; &quot;Denton&quot; &quot;3&quot; #&gt; [3,] &quot;Angelina&quot; &quot;0&quot; &quot;DeWitt&quot; &quot;0&quot; #&gt; [4,] &quot;Aransas&quot; &quot;0&quot; &quot;Dickens&quot; &quot;0&quot; #&gt; [5,] &quot;Archer&quot; &quot;1&quot; &quot;Dickens (P)&quot; &quot;0&quot; #&gt; [6,] &quot;Armstrong&quot; &quot;0&quot; &quot;Dimmit&quot; &quot;0&quot; #&gt; [7,] &quot;Atascosa&quot; &quot;0&quot; &quot;Donley&quot; &quot;0&quot; #&gt; [8,] &quot;Austin&quot; &quot;0&quot; &quot;Duval&quot; &quot;0&quot; #&gt; [9,] &quot;Bailey&quot; &quot;0&quot; &quot;Eastland&quot; &quot;0&quot; #&gt; [10,] &quot;Bandera&quot; &quot;0&quot; &quot;Ector&quot; &quot;3&quot; #&gt; [11,] &quot;Bastrop&quot; &quot;0&quot; &quot;Edwards&quot; &quot;0&quot; #&gt; [12,] &quot;Baylor&quot; &quot;0&quot; &quot;El Paso&quot; &quot;8&quot; #&gt; [13,] &quot;Bee&quot; &quot;0&quot; &quot;Ellis&quot; &quot;0&quot; #&gt; [14,] &quot;Bell&quot; &quot;9&quot; &quot;Erath&quot; &quot;0&quot; #&gt; [15,] &quot;Bexar&quot; &quot;27&quot; &quot;Falls&quot; &quot;0&quot; #&gt; [16,] &quot;Blanco&quot; &quot;0&quot; &quot;Fannin 1(P)&quot; &quot;0&quot; #&gt; [17,] &quot;Borden&quot; &quot;0&quot; &quot;Fannin 2(P)&quot; &quot;2&quot; #&gt; [18,] &quot;Bosque&quot; &quot;0&quot; &quot;Fayette&quot; &quot;0&quot; #&gt; [19,] &quot;Bowie (P)&quot; &quot;0&quot; &quot;Fisher&quot; &quot;0&quot; #&gt; [20,] &quot;Brazoria&quot; &quot;2&quot; &quot;Floyd&quot; &quot;0&quot; #&gt; [21,] &quot;Brazos&quot; &quot;5&quot; &quot;Foard&quot; &quot;0&quot; #&gt; [22,] &quot;Brewster&quot; &quot;0&quot; &quot;Fort Bend&quot; &quot;4&quot; #&gt; [23,] &quot;Briscoe&quot; &quot;0&quot; &quot;Franklin&quot; &quot;0&quot; #&gt; [24,] &quot;Brooks&quot; &quot;0&quot; &quot;Freestone&quot; &quot;1&quot; #&gt; [25,] &quot;Brooks (P)&quot; &quot;1&quot; &quot;Frio (P)&quot; &quot;0&quot; #&gt; [26,] &quot;Brown&quot; &quot;1&quot; &quot;Gaines&quot; &quot;0&quot; #&gt; [27,] &quot;Burleson&quot; &quot;1&quot; &quot;Galveston&quot; &quot;5&quot; #&gt; [28,] &quot;Burnet 1(P)&quot; &quot;5&quot; &quot;Garza&quot; &quot;0&quot; #&gt; [29,] &quot;Caldwell&quot; &quot;0&quot; &quot;Gillespie&quot; &quot;0&quot; #&gt; [30,] &quot;Calhoun&quot; &quot;1&quot; &quot;Glasscock&quot; &quot;0&quot; #&gt; [31,] &quot;Callahan&quot; &quot;0&quot; &quot;Goliad&quot; &quot;0&quot; #&gt; [32,] &quot;Cameron&quot; &quot;6&quot; &quot;Gonzales&quot; &quot;1&quot; #&gt; [33,] &quot;Camp&quot; &quot;0&quot; &quot;Gray&quot; &quot;1&quot; #&gt; [34,] &quot;Carson&quot; &quot;0&quot; &quot;Grayson&quot; &quot;4&quot; #&gt; [35,] &quot;Cass&quot; &quot;0&quot; &quot;Gregg&quot; &quot;1&quot; #&gt; [36,] &quot;Castro&quot; &quot;0&quot; &quot;Grimes&quot; &quot;0&quot; #&gt; [37,] &quot;Chambers&quot; &quot;0&quot; &quot;Guadalupe&quot; &quot;6&quot; #&gt; [38,] &quot;Cherokee&quot; &quot;0&quot; &quot;Hale&quot; &quot;1&quot; #&gt; [39,] &quot;Childress&quot; &quot;0&quot; &quot;Hall&quot; &quot;0&quot; #&gt; [40,] &quot;Clay&quot; &quot;0&quot; &quot;Hamilton&quot; &quot;0&quot; #&gt; [41,] &quot;Cochran&quot; &quot;0&quot; &quot;Hansford&quot; &quot;0&quot; #&gt; [42,] &quot;Coke&quot; &quot;0&quot; &quot;Hardeman&quot; &quot;0&quot; #&gt; [43,] &quot;Coleman&quot; &quot;0&quot; &quot;Hardin&quot; &quot;0&quot; #&gt; [44,] &quot;Collin&quot; &quot;9&quot; &quot;Harris&quot; &quot;19&quot; #&gt; [45,] &quot;Collingsworth&quot; &quot;0&quot; &quot;Harrison&quot; &quot;0&quot; #&gt; [46,] &quot;Colorado&quot; &quot;0&quot; &quot;Haskell (P)&quot; &quot;2&quot; #&gt; [47,] &quot;Comal&quot; &quot;0&quot; &quot;Hays&quot; &quot;0&quot; #&gt; [48,] &quot;Comanche&quot; &quot;0&quot; &quot;Hemphill&quot; &quot;0&quot; #&gt; [49,] &quot;Concho&quot; &quot;0&quot; &quot;Henderson&quot; &quot;2&quot; #&gt; [50,] &quot;Cooke&quot; &quot;2&quot; &quot;Hidalgo&quot; &quot;6&quot; #&gt; [51,] &quot;Coryell&quot; &quot;1&quot; &quot;Hidalgo (P)&quot; &quot;0&quot; #&gt; [52,] &quot;Cottle&quot; &quot;0&quot; &quot;Hill&quot; &quot;0&quot; #&gt; [53,] &quot;Crane&quot; &quot;0&quot; &quot;Hockley&quot; &quot;1&quot; #&gt; [54,] &quot;Crockett&quot; &quot;0&quot; &quot;Hood&quot; &quot;3&quot; #&gt; [55,] &quot;Crosby&quot; &quot;0&quot; &quot;Hopkins&quot; &quot;1&quot; #&gt; [56,] &quot;Culberson&quot; &quot;0&quot; &quot;Houston&quot; &quot;0&quot; #&gt; [57,] &quot;Dallam&quot; &quot;0&quot; &quot;Howard&quot; &quot;2&quot; #&gt; [58,] &quot;Dallas&quot; &quot;22&quot; &quot;Hudspeth&quot; &quot;0&quot; #&gt; [59,] &quot;Dawson&quot; &quot;0&quot; &quot;Hunt&quot; &quot;2&quot; #&gt; [60,] &quot;Deaf Smith&quot; &quot;0&quot; &quot;Hutchinson&quot; &quot;0&quot; #&gt; [,5] [,6] [,7] [,8] #&gt; [1,] &quot;Irion&quot; &quot;0&quot; &quot;Motley&quot; &quot;0&quot; #&gt; [2,] &quot;Jack&quot; &quot;0&quot; &quot;Nacogdoches&quot; &quot;2&quot; #&gt; [3,] &quot;Jackson&quot; &quot;1&quot; &quot;Navarro&quot; &quot;2&quot; #&gt; [4,] &quot;Jasper&quot; &quot;0&quot; &quot;Newton&quot; &quot;0&quot; #&gt; [5,] &quot;Jeff Davis&quot; &quot;0&quot; &quot;Newton (P)&quot; &quot;0&quot; #&gt; [6,] &quot;Jefferson&quot; &quot;0&quot; &quot;Nolan&quot; &quot;2&quot; #&gt; [7,] &quot;Jefferson (P)&quot; &quot;0&quot; &quot;Nueces&quot; &quot;4&quot; #&gt; [8,] &quot;Jim Hogg&quot; &quot;0&quot; &quot;Ochiltree&quot; &quot;0&quot; #&gt; [9,] &quot;Jim Wells&quot; &quot;0&quot; &quot;Oldham&quot; &quot;0&quot; #&gt; [10,] &quot;Johnson&quot; &quot;2&quot; &quot;Orange&quot; &quot;0&quot; #&gt; [11,] &quot;Jones&quot; &quot;0&quot; &quot;Palo Pinto&quot; &quot;1&quot; #&gt; [12,] &quot;Karnes&quot; &quot;0&quot; &quot;Panola&quot; &quot;0&quot; #&gt; [13,] &quot;Karnes (P)&quot; &quot;0&quot; &quot;Parker&quot; &quot;1&quot; #&gt; [14,] &quot;Kaufman&quot; &quot;3&quot; &quot;Parmer&quot; &quot;0&quot; #&gt; [15,] &quot;Kendall&quot; &quot;1&quot; &quot;Pecos&quot; &quot;0&quot; #&gt; [16,] &quot;Kenedy&quot; &quot;0&quot; &quot;Polk&quot; &quot;0&quot; #&gt; [17,] &quot;Kent&quot; &quot;0&quot; &quot;Polk (P)&quot; &quot;0&quot; #&gt; [18,] &quot;Kerr&quot; &quot;1&quot; &quot;Potter&quot; &quot;4&quot; #&gt; [19,] &quot;Kimble&quot; &quot;0&quot; &quot;Presidio&quot; &quot;0&quot; #&gt; [20,] &quot;King&quot; &quot;0&quot; &quot;Rains&quot; &quot;0&quot; #&gt; [21,] &quot;Kinney&quot; &quot;0&quot; &quot;Randall&quot; &quot;0&quot; #&gt; [22,] &quot;Kleberg&quot; &quot;1&quot; &quot;Reagan&quot; &quot;0&quot; #&gt; [23,] &quot;Knox&quot; &quot;0&quot; &quot;Real&quot; &quot;0&quot; #&gt; [24,] &quot;La Salle&quot; &quot;0&quot; &quot;Red River&quot; &quot;0&quot; #&gt; [25,] &quot;Lamar&quot; &quot;0&quot; &quot;Reeves&quot; &quot;0&quot; #&gt; [26,] &quot;Lamb&quot; &quot;0&quot; &quot;Refugio&quot; &quot;1&quot; #&gt; [27,] &quot;Lampasas&quot; &quot;0&quot; &quot;Roberts&quot; &quot;0&quot; #&gt; [28,] &quot;Lavaca&quot; &quot;0&quot; &quot;Robertson&quot; &quot;0&quot; #&gt; [29,] &quot;Lee&quot; &quot;0&quot; &quot;Rockwall&quot; &quot;0&quot; #&gt; [30,] &quot;Leon&quot; &quot;0&quot; &quot;Runnels&quot; &quot;0&quot; #&gt; [31,] &quot;Liberty (P)&quot; &quot;3&quot; &quot;Rusk&quot; &quot;0&quot; #&gt; [32,] &quot;Limestone&quot; &quot;0&quot; &quot;Sabine&quot; &quot;0&quot; #&gt; [33,] &quot;Lipscomb&quot; &quot;0&quot; &quot;San Augustine&quot; &quot;0&quot; #&gt; [34,] &quot;Live Oak&quot; &quot;0&quot; &quot;San Jacinto&quot; &quot;0&quot; #&gt; [35,] &quot;Llano&quot; &quot;1&quot; &quot;San Patricio&quot; &quot;0&quot; #&gt; [36,] &quot;Loving&quot; &quot;0&quot; &quot;San Saba&quot; &quot;0&quot; #&gt; [37,] &quot;Lubbock&quot; &quot;9&quot; &quot;Schleicher&quot; &quot;0&quot; #&gt; [38,] &quot;Lynn&quot; &quot;0&quot; &quot;Scurry&quot; &quot;0&quot; #&gt; [39,] &quot;Madison&quot; &quot;0&quot; &quot;Shackelford&quot; &quot;0&quot; #&gt; [40,] &quot;Marion&quot; &quot;0&quot; &quot;Shelby&quot; &quot;0&quot; #&gt; [41,] &quot;Martin&quot; &quot;0&quot; &quot;Sherman&quot; &quot;0&quot; #&gt; [42,] &quot;Mason&quot; &quot;0&quot; &quot;Smith&quot; &quot;9&quot; #&gt; [43,] &quot;Matagorda&quot; &quot;0&quot; &quot;Somervell&quot; &quot;0&quot; #&gt; [44,] &quot;Maverick&quot; &quot;1&quot; &quot;Starr&quot; &quot;0&quot; #&gt; [45,] &quot;Maverick (P)&quot; &quot;0&quot; &quot;Stephens&quot; &quot;1&quot; #&gt; [46,] &quot;McCulloch&quot; &quot;0&quot; &quot;Sterling&quot; &quot;0&quot; #&gt; [47,] &quot;McLennan&quot; &quot;6&quot; &quot;Stonewall&quot; &quot;0&quot; #&gt; [48,] &quot;McLennan 1(P)&quot; &quot;0&quot; &quot;Sutton&quot; &quot;0&quot; #&gt; [49,] &quot;McLennan 2(P)&quot; &quot;0&quot; &quot;Swisher&quot; &quot;0&quot; #&gt; [50,] &quot;McMullen&quot; &quot;0&quot; &quot;Tarrant&quot; &quot;34&quot; #&gt; [51,] &quot;Medina&quot; &quot;0&quot; &quot;Taylor&quot; &quot;6&quot; #&gt; [52,] &quot;Menard&quot; &quot;0&quot; &quot;Terrell&quot; &quot;0&quot; #&gt; [53,] &quot;Midland&quot; &quot;2&quot; &quot;Terry&quot; &quot;1&quot; #&gt; [54,] &quot;Milam&quot; &quot;0&quot; &quot;Throckmorton&quot; &quot;0&quot; #&gt; [55,] &quot;Mills&quot; &quot;0&quot; &quot;Titus&quot; &quot;0&quot; #&gt; [56,] &quot;Mitchell&quot; &quot;0&quot; &quot;Tom Green&quot; &quot;2&quot; #&gt; [57,] &quot;Montague&quot; &quot;0&quot; &quot;Travis&quot; &quot;10&quot; #&gt; [58,] &quot;Montgomery&quot; &quot;9&quot; &quot;Trinity&quot; &quot;0&quot; #&gt; [59,] &quot;Moore&quot; &quot;0&quot; &quot;Tyler&quot; &quot;0&quot; #&gt; [60,] &quot;Morris&quot; &quot;0&quot; &quot;Upshur&quot; &quot;0&quot; #&gt; [,9] [,10] #&gt; [1,] &quot;Upton&quot; &quot;0&quot; #&gt; [2,] &quot;Uvalde&quot; &quot;0&quot; #&gt; [3,] &quot;Val Verde (P)&quot; &quot;1&quot; #&gt; [4,] &quot;Van Zandt&quot; &quot;0&quot; #&gt; [5,] &quot;Victoria&quot; &quot;1&quot; #&gt; [6,] &quot;Walker&quot; &quot;1&quot; #&gt; [7,] &quot;Waller&quot; &quot;0&quot; #&gt; [8,] &quot;Ward&quot; &quot;0&quot; #&gt; [9,] &quot;Washington&quot; &quot;0&quot; #&gt; [10,] &quot;Webb&quot; &quot;3&quot; #&gt; [11,] &quot;Wharton&quot; &quot;1&quot; #&gt; [12,] &quot;Wheeler&quot; &quot;0&quot; #&gt; [13,] &quot;Wichita&quot; &quot;3&quot; #&gt; [14,] &quot;Wilbarger&quot; &quot;0&quot; #&gt; [15,] &quot;Willacy&quot; &quot;0&quot; #&gt; [16,] &quot;Williamson&quot; &quot;2&quot; #&gt; [17,] &quot;Wilson&quot; &quot;0&quot; #&gt; [18,] &quot;Winkler&quot; &quot;0&quot; #&gt; [19,] &quot;Wise&quot; &quot;1&quot; #&gt; [20,] &quot;Wood&quot; &quot;0&quot; #&gt; [21,] &quot;Yoakum&quot; &quot;0&quot; #&gt; [22,] &quot;Young&quot; &quot;0&quot; #&gt; [23,] &quot;Zapata&quot; &quot;0&quot; #&gt; [24,] &quot;Zavala&quot; &quot;0&quot; #&gt; [25,] &quot;Zavala (P)&quot; &quot;0&quot; #&gt; [26,] &quot;&quot; &quot;&quot; #&gt; [27,] &quot;&quot; &quot;&quot; #&gt; [28,] &quot;&quot; &quot;&quot; #&gt; [29,] &quot;&quot; &quot;&quot; #&gt; [30,] &quot;&quot; &quot;&quot; #&gt; [31,] &quot;&quot; &quot;&quot; #&gt; [32,] &quot;&quot; &quot;&quot; #&gt; [33,] &quot;&quot; &quot;&quot; #&gt; [34,] &quot;&quot; &quot;&quot; #&gt; [35,] &quot;&quot; &quot;&quot; #&gt; [36,] &quot;&quot; &quot;&quot; #&gt; [37,] &quot;&quot; &quot;&quot; #&gt; [38,] &quot;&quot; &quot;&quot; #&gt; [39,] &quot;&quot; &quot;&quot; #&gt; [40,] &quot;&quot; &quot;&quot; #&gt; [41,] &quot;&quot; &quot;&quot; #&gt; [42,] &quot;&quot; &quot;&quot; #&gt; [43,] &quot;&quot; &quot;&quot; #&gt; [44,] &quot;&quot; &quot;&quot; #&gt; [45,] &quot;&quot; &quot;&quot; #&gt; [46,] &quot;&quot; &quot;&quot; #&gt; [47,] &quot;&quot; &quot;&quot; #&gt; [48,] &quot;&quot; &quot;&quot; #&gt; [49,] &quot;&quot; &quot;&quot; #&gt; [50,] &quot;&quot; &quot;&quot; #&gt; [51,] &quot;&quot; &quot;&quot; #&gt; [52,] &quot;&quot; &quot;&quot; #&gt; [53,] &quot;&quot; &quot;&quot; #&gt; [54,] &quot;&quot; &quot;&quot; #&gt; [55,] &quot;&quot; &quot;&quot; #&gt; [56,] &quot;&quot; &quot;&quot; #&gt; [57,] &quot;&quot; &quot;&quot; #&gt; [58,] &quot;&quot; &quot;&quot; #&gt; [59,] &quot;&quot; &quot;&quot; #&gt; [60,] &quot;&quot; &quot;&quot; If we check the output from the above code to the PDF, we can see that it worked. Every column in the PDF is in our output and the values were scraped correctly. This is great! Now we want to make two columns - county and pregnant_females_booked (or whatever youd like to call it) - from these 10. As usual with R, there are a few ways we can do this. Well just do two ways. First, since there are only 10 columns, we can just do it manually. We can use square bracket [] notation to grab specific columns using the column number (since the data is a matrix and not a data.frame we cant use dollar sign notation even if we wanted to). Lets print out the head of all the county columns. We can see from the PDF that these are columns 1, 3, 5, 7, and 9. So can use a vector of numbers to get that c(1, 3, 5, 7, 9). head(data[, c(1, 3, 5, 7, 9)]) #&gt; [,1] [,2] [,3] #&gt; [1,] &quot;Anderson&quot; &quot;Delta&quot; &quot;Irion&quot; #&gt; [2,] &quot;Andrews&quot; &quot;Denton&quot; &quot;Jack&quot; #&gt; [3,] &quot;Angelina&quot; &quot;DeWitt&quot; &quot;Jackson&quot; #&gt; [4,] &quot;Aransas&quot; &quot;Dickens&quot; &quot;Jasper&quot; #&gt; [5,] &quot;Archer&quot; &quot;Dickens (P)&quot; &quot;Jeff Davis&quot; #&gt; [6,] &quot;Armstrong&quot; &quot;Dimmit&quot; &quot;Jefferson&quot; #&gt; [,4] [,5] #&gt; [1,] &quot;Motley&quot; &quot;Upton&quot; #&gt; [2,] &quot;Nacogdoches&quot; &quot;Uvalde&quot; #&gt; [3,] &quot;Navarro&quot; &quot;Val Verde (P)&quot; #&gt; [4,] &quot;Newton&quot; &quot;Van Zandt&quot; #&gt; [5,] &quot;Newton (P)&quot; &quot;Victoria&quot; #&gt; [6,] &quot;Nolan&quot; &quot;Walker&quot; Now again for the pregnant_females_booked column. head(data[, c(2, 4, 6, 8, 10)]) #&gt; [,1] [,2] [,3] [,4] [,5] #&gt; [1,] &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; #&gt; [2,] &quot;1&quot; &quot;3&quot; &quot;0&quot; &quot;2&quot; &quot;0&quot; #&gt; [3,] &quot;0&quot; &quot;0&quot; &quot;1&quot; &quot;2&quot; &quot;1&quot; #&gt; [4,] &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; #&gt; [5,] &quot;1&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;1&quot; #&gt; [6,] &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;2&quot; &quot;1&quot; These results look right so we can make a data.frame using the data.frame() and having the input be from the above code - removing the head() function since we want every now. Conveniently, data.frame() allows us to name the columns we are making so well name the two columns county and pregnant_females_booked. Well save the result as data and check out the head() and tail() of that data.frame. data &lt;- data.frame(county = c(data[, c(1, 3, 5, 7, 9)]), pregnant_females_booked = c(data[, c(2, 4, 6, 8, 10)])) head(data) #&gt; county pregnant_females_booked #&gt; 1 Anderson 0 #&gt; 2 Andrews 1 #&gt; 3 Angelina 0 #&gt; 4 Aransas 0 #&gt; 5 Archer 1 #&gt; 6 Armstrong 0 tail(data) #&gt; county pregnant_females_booked #&gt; 295 #&gt; 296 #&gt; 297 #&gt; 298 #&gt; 299 #&gt; 300 These results look good! We now have only two columns and the fix six rows (from head()) look right. Why are the last six rows all empty? Look back at the PDF. The final two columns are shorter than the others, so extract_tables() interprets them as empty strings \"\". We can subset those away using a conditional statement remove any row with an empty string in either column. Since we know that if theres an empty string in one of the columns it will also be there in the other, we only need to run this once. data &lt;- data[data$county != &quot;&quot;, ] head(data) #&gt; county pregnant_females_booked #&gt; 1 Anderson 0 #&gt; 2 Andrews 1 #&gt; 3 Angelina 0 #&gt; 4 Aransas 0 #&gt; 5 Archer 1 #&gt; 6 Armstrong 0 tail(data) #&gt; county pregnant_females_booked #&gt; 260 Wood 0 #&gt; 261 Yoakum 0 #&gt; 262 Young 0 #&gt; 263 Zapata 0 #&gt; 264 Zavala 0 #&gt; 265 Zavala (P) 0 Now the results from tail() look right. First, Im rerunning the code to scrape the PDF since now our data data set is already cleaned from above. data &lt;- extract_tables(file = &quot;data/PregnantFemaleReportingCurrent.pdf&quot;) data &lt;- data[[1]] Well use a toy example now with a vector of numbers from 1 to 10 1:10 which we can call x. x &lt;- 1:10 x #&gt; [1] 1 2 3 4 5 6 7 8 9 10 Now say we want every value of x and want to use Booleans (true or false value) to get it. Since we need a vector of 10 values since wed need one for every element in x. Specifically, wed be using square bracket [] notation to subset (in this case not really a true subset since wed return all the original values) and write ten TRUEs in the square brackets []. x[c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)] #&gt; [1] 1 2 3 4 5 6 7 8 9 10 If youre reading the code carefully, you might have notices that I only wrote nine TRUE values. Since R was expecting 10 values, when I only gave it nine, it started again from the beginning and used the first value in place of the expected tenth value. If we only wrote one TRUEs, R would just repeat that all 10 times. x[TRUE] #&gt; [1] 1 2 3 4 5 6 7 8 9 10 What happens when the value isnt always TRUE? Itll recycle it the exact same way. Lets try using now a vector c(TRUE, FALSE). x[c(TRUE, FALSE)] #&gt; [1] 1 3 5 7 9 It returns only the odd numbers. Thats because the first value in our vector is TRUE so it returns the first value of x which is 1. The next value is FALSE so it does not return the second value of x which is 2. R then recycles our vector and uses the first value in our vector (TRUE) to interpret how to subset the third value of x (3). Since its TRUE, it returns 3. But now the value for 4 is FALSE so it doesnt return it. The process repeats again until the end of the subset. Since every other value is returned, it returns only the odd numbers. We can use Rs method of recycling a vector that is shorter than it expects to solve our pregnant females booked issue. Indeed we can use this exact c(TRUE, FALSE) vector to select only the odd columns. Reversing it to c(FALSE, TRUE) gives us only the even columns. So well copy over the code that made the data.frame last time and change the c(data[, c(1, 3, 5, 7, 9)] to c(data[, c(TRUE, FALSE)]) and the c(data[, c(2, 4, 6, 8, 10)]) to c(data[, c(FALSE, TRUE)]). Since the issue of empty strings is still there, well reuse the data &lt;- data[data$county != \"\", ] we made above to fix it. data &lt;- data.frame(county = c(data[, c(TRUE, FALSE)]), pregnant_females_booked = c(data[, c(FALSE, TRUE)])) data &lt;- data[data$county != &quot;&quot;, ] head(data) #&gt; county pregnant_females_booked #&gt; 1 Anderson 0 #&gt; 2 Andrews 1 #&gt; 3 Angelina 0 #&gt; 4 Aransas 0 #&gt; 5 Archer 1 #&gt; 6 Armstrong 0 tail(data) #&gt; county pregnant_females_booked #&gt; 260 Wood 0 #&gt; 261 Yoakum 0 #&gt; 262 Young 0 #&gt; 263 Zapata 0 #&gt; 264 Zavala 0 #&gt; 265 Zavala (P) 0 24.2 Making PDF-scraped data available to others Youve now seen two examples of scraping tables from PDFs using the tabulizer() package and a few more from the pdftools package in Chapter 23. These lessons should get you started on most PDF scraping, but every PDF is different so dont rely on the functions alone to do all of the work. Youll still likely have to spend some time cleaning up the data afterwards to make it usable. This chapter is being written in 2020 which should be long after we ever need to get data from PDFs - it should be available in much easier to access formats. However, often we still need to scrape PDFs to get data necessary for research. Given the effort youll spend in scraping a PDF - and the relative rarity of this skill in criminology - I recommend that you help others by making your data available to the public. There are several current websites that let you do this but I recommend openICPSR. openICPSR is the version of ICPSR (Inter-university Consortium for Political and Social Research) which is essentially a massive repository of data. openICPSR lets people submit data for free (under a certain limit, 3GB per submission as of mid-2020) and has a number of features to make it easier to store and document the data. This includes a section to describe your data in text form, fill out tags to help people search for the data, and answer (optional) questions on how the data collection and the geographic and temporal scope of the data. If you decide to update the data, itll keep a link to your older submission so you essentially have versions of the data. When you update the data, I recommend having a section on the submission description describing the changes in each version. This is useful for record-keeping and (though be careful because the link to the submission also changes when you update it so youll need to change that if you have links on any document such as a CV). Below are a few images showing the submission page for one of my submissions that has many versions (and corresponding version notes). "],["geocoding.html", "25 Geocoding 25.1 Geocoding a single address 25.2 Geocoding San Francisco marijuana dispensary locations", " 25 Geocoding For this chapter youll need the following file, which is available for download here: san_francisco_active_marijuana_retailers.csv. Several recent studies have looked at the effect of marijuana dispensaries on crime around the dispensary. For these analyses they find the coordinates of each crime in the city and see if it occurred in a certain distance from the dispensary. Many crime data sets provide the coordinates of where each occurred, however sometimes the coordinates are missing - and other data such as marijuana dispensary locations give only the address - meaning that we need a way to find the coordinates of these locations. 25.1 Geocoding a single address In this chapter we will cover how to geocode addresses. Geocoding is the process of taking an address (e.g.Â 123 Main Street, Somewhere, CA, 12345) and getting the longitude and latitude coordinates of that address. With these coordinates we can then do spatial analyses on the data ranging from simply making a map and showing where each address is to merging these coordinates with some other spatial data (such as seeing which police district the address is in) and seeing how it relates to other variables, such as crime. To do our geocoding, were going to use the package tidygeocoder which greatly simplifies the work of geocoding addresses in R. For more information about this package, please see the packages site here. If youve never used this package before youll need to install it using install.packages(\"tidygeocoder\") install.packages(&quot;tidygeocoder&quot;) Now we need to tell R that we want to use this package by running library(tidygeocoder). library(tidygeocoder) To geocode our addresses well use the helpfully named geocode() function inside of tidygeocoder. For geocode() we input an address and it returns the coordinates for that address. For our address well use 750 Race St.Â Philadelphia, PA 19106 which is the address of the Philadelphia Police Department headquarters. geocode(&quot;750 Race St. Philadelphia, PA 19106&quot;) #&gt; Error: .tbl is not a dataframe. See ?geocode As shown above, running geocode(\"750 Race St. Philadelphia, PA 19106\") gives us an error that tells us that .tbl is not a dataframe. The issue is that geocode() expects a data.frame (and .tbl is an abbreviation for tibble which is a kind of data.frame), but we entered only the string with our one address, not a data.frame. For this function to work we need to enter two parameters into geocode(): a data.frame (or something similar such as a tibble) and the name of the column which has the addresses.15 Since we need a data.frame, well make one below. Im calling it address_to_geocode and calling the column with the address address, but you can call both the data.frame and the column whatever name you want. address_to_geocode &lt;- data.frame(address = &quot;750 Race St. Philadelphia, PA 19106&quot;) Now lets try again. Well enter our data.frame address_to_geocode first and then the name of our column which is address. geocode(address_to_geocode, address) #&gt; # A tibble: 1 x 3 #&gt; address lat long #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 750 Race St. Philadelphia, PA 19106 40.0 -75.2 It worked, returning the same data.frame but with two additional columns with the latitude and longitude of that address. You might be wondering why we put address into geocode() without quotes when usually when we talk about a column we need to do so in quotes. The simple answer is that the authors of the tidygeocoder package spent the time allowing users to input the column name either with or without quotes. Trying it again and now having address in quotes gives us the same result. geocode(address_to_geocode, &quot;address&quot;) #&gt; # A tibble: 1 x 3 #&gt; address lat long #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 750 Race St. Philadelphia, PA 19106 40.0 -75.2 There are two additional parameters which are important to talk about for this function, especially when you encounter an address not geocoding. First, there are actually multiple sources where you can enter an address and get the coordinates for that address. Just think about the big mapping apps or sites, such as Google Maps and Apple Maps. For these sources you can enter in the same address and youll get different results. In most cases youll get extremely similar coordinates, usually off only after a few decimals points, so they are functionally identical. But occasionally youll have some addresses that can be geocoded through some sources but not others. This is because some sources have a more comprehensive list of addresses than others. At the time of this writing the tidygeocoder package can handle geocoding from 13 different sources. For 10 of these, however, you need to setup an API key and some also require paying money (usually after a set number of addresses that itll geocode for free each day). So here Ill just cover the three sources of geocoding that dont require any setup: osm (Open Street Map or OSM is similar to Google Maps), census (the US Census Bureaus geocoder), and arcgis (ArcGIS is a clunky mapping software that nonetheless has an excellent geocoder that R can use). To select which of these to use (osm is the default), you add the parameter method and set that equal to which one you want to use. As osm is the default we actually dont need to set it explicitly, but well do so anyways here as an example of the three geocoding sources we want to use. geocode(address_to_geocode, &quot;address&quot;, method = &quot;osm&quot;) #&gt; # A tibble: 1 x 3 #&gt; address lat long #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 750 Race St. Philadelphia, PA 19106 40.0 -75.2 geocode(address_to_geocode, &quot;address&quot;, method = &quot;census&quot;) #&gt; # A tibble: 1 x 3 #&gt; address lat long #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 750 Race St. Philadelphia, PA 19106 40.0 -75.2 geocode(address_to_geocode, &quot;address&quot;, method = &quot;arcgis&quot;) #&gt; # A tibble: 1 x 3 #&gt; address lat long #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 750 Race St. Philadelphia, PA 19106 40.0 -75.2 If you compare the longitude and latitudes from these three sources youll notice that theyre all different but only slightly so. By default this function returns a tibble instead of a normal data.frame so it only shows one decimal point by default - though it doesnt actually round the number, merely shorten what it shows us. We can change the output back into a data.frame by using the data.frame() function. example &lt;- geocode(address_to_geocode, &quot;address&quot;, method = &quot;arcgis&quot;) example &lt;- data.frame(example) example #&gt; address lat #&gt; 1 750 Race St. Philadelphia, PA 19106 39.95488 #&gt; long #&gt; 1 -75.15205 Given how similar the coordinates are, you really only need to set the source of the geocoder in cases where one geocoder fails to find a match for the address. The second important parameter is full_results which is by default set to FALSE. When set to TRUE it gives more columns in the returning data.frame than just the longitude and latitude of that address. These columns differ for each geocoder source so well look at all three. geocode(address_to_geocode, &quot;address&quot;, method = &quot;osm&quot;, full_results = TRUE) #&gt; # A tibble: 1 x 12 #&gt; address lat long place_id licence osm_type osm_id #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; #&gt; 1 750 Rac~ 40.0 -75.2 2.88e8 Data Â© ~ way 6.22e7 #&gt; # ... with 5 more variables: boundingbox &lt;list&gt;, #&gt; # display_name &lt;chr&gt;, class &lt;chr&gt;, type &lt;chr&gt;, #&gt; # importance &lt;dbl&gt; For OSM as a source we also get information about the address such as what type of place it is, a bounding box which is a geographic area right around this coordinate, the address for those coordinates in the OSM database, and a bunch of other variables that dont seem very useful for our purposes such as the importance of the address. Its interesting that OSM classifies this address as a house as the police headquarters for a major police department is quite a bit bigger than a house, so this is likely an misclassification of the type of address. The most important extra variable here is the address, called the display_name. Sometimes geocoders will be quite a bit off in their geocoding because they match the address you inputted incorrectly to one in their database. For example, if you input 123 Main Street and the geocoder thinks you mean 123 Maine Street you may be quite a bit off in the resulting coordinates. When you only get coordinates returns you wont know that the coordinates are wrong. Even if you know where an address is supposed to be its hard to catch errors like this. If youre geocoding addresses in a single city and one point is in a different city (or completely different part of the world), then its pretty clear that theres an error. But if the coordinates are simply in a wrong part of the city, but near other coordinates, then its very hard to notice a problem. So having an address to check against the one you inputted is a very useful way of validate the geocoding. geocode(address_to_geocode, &quot;address&quot;, method = &quot;census&quot;, full_results = TRUE) #&gt; # A tibble: 1 x 18 #&gt; address lat long matchedAddress tigerLine.tiger~ #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 750 Race~ 40.0 -75.2 750 RACE ST, P~ 131423677 #&gt; # ... with 13 more variables: tigerLine.side &lt;chr&gt;, #&gt; # addressComponents.fromAddress &lt;chr&gt;, #&gt; # addressComponents.toAddress &lt;chr&gt;, #&gt; # addressComponents.preQualifier &lt;chr&gt;, #&gt; # addressComponents.preDirection &lt;chr&gt;, #&gt; # addressComponents.preType &lt;chr&gt;, #&gt; # addressComponents.streetName &lt;chr&gt;, ... These results are similar to the OSM results and also have the matched address to compare your inputted address to. Most of the columns are just the address broken into different pieces (street, city, state, etc.) so are mostly repeating the address again in multiple columns. geocode(address_to_geocode, &quot;address&quot;, method = &quot;arcgis&quot;, full_results = TRUE) #&gt; # A tibble: 1 x 11 #&gt; address lat long arcgis_address score location.x #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; #&gt; 1 750 Race~ 40.0 -75.2 750 Race St, P~ 100 -75.2 #&gt; # ... with 5 more variables: location.y &lt;dbl&gt;, #&gt; # extent.xmin &lt;dbl&gt;, extent.ymin &lt;dbl&gt;, #&gt; # extent.xmax &lt;dbl&gt;, extent.ymax &lt;dbl&gt; For the ArcGIS results we have the matched address again, and then an important variable called score which is basically a measure of how confidence ArcGIS is that it matched the right address. Higher values are more confidence, but in my experience anything under 90-95 confidence is an incorrect address. These results also repeat the longitude and latitude columns as location.x and location.y columns, and Im not sure why they do so. 25.2 Geocoding San Francisco marijuana dispensary locations So now that we can use the geocoder() function well, we can geocode every location in our marijuana dispersary data. Lets read in the marijuana dispensary data which is called san_francisco_active_marijuana_retailers.csv and call the object marijuana. Note the data/ part in front of the name of the .csv file. This is to tell R that the file we want is in the data folder of our working directory. Doing this is essentially a shortcut to changing the working directory directly. library(readr) marijuana &lt;- read_csv(&quot;data/san_francisco_active_marijuana_retailers.csv&quot;) #&gt; Rows: 33 Columns: 11 #&gt; -- Column specification -------------------------------- #&gt; Delimiter: &quot;,&quot; #&gt; chr (11): License Number, License Type, Business Own... #&gt; #&gt; i Use `spec()` to retrieve the full column specification for this data. #&gt; i Specify the column types or set `show_col_types = FALSE` to quiet this message. marijuana &lt;- as.data.frame(marijuana) Lets look at the top 6 rows. head(marijuana) #&gt; License Number License Type #&gt; 1 C10-0000614-LIC Cannabis - Retailer License #&gt; 2 C10-0000586-LIC Cannabis - Retailer License #&gt; 3 C10-0000587-LIC Cannabis - Retailer License #&gt; 4 C10-0000539-LIC Cannabis - Retailer License #&gt; 5 C10-0000522-LIC Cannabis - Retailer License #&gt; 6 C10-0000523-LIC Cannabis - Retailer License #&gt; Business Owner #&gt; 1 Terry Muller #&gt; 2 Jeremy Goodin #&gt; 3 Justin Jarin #&gt; 4 Ondyn Herschelle #&gt; 5 Ryan Hudson #&gt; 6 Ryan Hudson #&gt; Business Contact Information #&gt; 1 OUTER SUNSET HOLDINGS, LLC : Barbary Coast Sunset : Email- terry@barbarycoastsf.com : Phone- 5107173246 #&gt; 2 URBAN FLOWERS : Urban Pharm : Email- hilary@urbanpharmsf.com : Phone- 9168335343 : Website- www.up415.com #&gt; 3 CCPC, INC. : The Green Door : Email- alicia@greendoorsf.com : Phone- 4155419590 : Website- www.greendoorsf.com #&gt; 4 SEVENTY SECOND STREET : Flower Power SF : Email- flowerpowersf@hotmail.com : Phone- 5103681262 : Website- flowerpowerdispensary.com #&gt; 5 HOWARD STREET PARTNERS, LLC : The Apothecarium : Email- Ryan@apothecarium.com : Phone- 4157469001 : Website- www.apothecarium.com #&gt; 6 DEEP THOUGHT, LLC : The Apothecarium : Email- ryan@pothecarium.com : Phone- 4157469001 : Website- www.Apothecarium.com #&gt; Business Structure #&gt; 1 Limited Liability Company #&gt; 2 Corporation #&gt; 3 Corporation #&gt; 4 Corporation #&gt; 5 Limited Liability Company #&gt; 6 Limited Liability Company #&gt; Premise Address #&gt; 1 2165 IRVING ST san francisco, CA 94122 County: SAN FRANCISCO #&gt; 2 122 10TH ST SAN FRANCISCO, CA 941032605 County: SAN FRANCISCO #&gt; 3 843 Howard ST SAN FRANCISCO, CA 94103 County: SAN FRANCISCO #&gt; 4 70 SECOND ST SAN FRANCISCO, CA 94105 County: SAN FRANCISCO #&gt; 5 527 Howard ST San Francisco, CA 94105 County: SAN FRANCISCO #&gt; 6 2414 Lombard ST San Francisco, CA 94123 County: SAN FRANCISCO #&gt; Status Issue Date Expiration Date #&gt; 1 Active 9/13/2019 9/12/2020 #&gt; 2 Active 8/26/2019 8/25/2020 #&gt; 3 Active 8/26/2019 8/25/2020 #&gt; 4 Active 8/5/2019 8/4/2020 #&gt; 5 Active 7/29/2019 7/28/2020 #&gt; 6 Active 7/29/2019 7/28/2020 #&gt; Activities Adult-Use/Medicinal #&gt; 1 N/A for this license type BOTH #&gt; 2 N/A for this license type BOTH #&gt; 3 N/A for this license type BOTH #&gt; 4 N/A for this license type BOTH #&gt; 5 N/A for this license type BOTH #&gt; 6 N/A for this license type BOTH So the column with the address is called Premise Address. Since its easier to deal with columns that dont have spacing in the name, we will be using gsub() to remove spacing from the column names. Each address also ends with County: followed by that addresss county, which in this case is always San Francisco. That isnt normal in an address so it may affect our geocode. We need to gsub() that column to remove that part of the address. names(marijuana) &lt;- gsub(&quot; &quot;, &quot;_&quot;, names(marijuana)) Since the address issue is always \" County: SAN FRANCISCO\" we can just gsub() out that entire string. marijuana$Premise_Address &lt;- gsub(&quot; County: SAN FRANCISCO&quot;, &quot;&quot;, marijuana$Premise_Address) Now lets make sure we did it right. names(marijuana) #&gt; [1] &quot;License_Number&quot; #&gt; [2] &quot;License_Type&quot; #&gt; [3] &quot;Business_Owner&quot; #&gt; [4] &quot;Business_Contact_Information&quot; #&gt; [5] &quot;Business_Structure&quot; #&gt; [6] &quot;Premise_Address&quot; #&gt; [7] &quot;Status&quot; #&gt; [8] &quot;Issue_Date&quot; #&gt; [9] &quot;Expiration_Date&quot; #&gt; [10] &quot;Activities&quot; #&gt; [11] &quot;Adult-Use/Medicinal&quot; head(marijuana$Premise_Address) #&gt; [1] &quot;2165 IRVING ST san francisco, CA 94122&quot; #&gt; [2] &quot;122 10TH ST SAN FRANCISCO, CA 941032605&quot; #&gt; [3] &quot;843 Howard ST SAN FRANCISCO, CA 94103&quot; #&gt; [4] &quot;70 SECOND ST SAN FRANCISCO, CA 94105&quot; #&gt; [5] &quot;527 Howard ST San Francisco, CA 94105&quot; #&gt; [6] &quot;2414 Lombard ST San Francisco, CA 94123&quot; To do the geocoding well just tell geocode our data.frame name and the name of the column with the addresses. Well save the results back into the marijuana object. As noted earlier, we dont need to put the name of our column in quotes, but I like to do so because it is consistent with some other functions that require it. Running this code may take up to a minute because its geocoding 33 different addresses. marijuana &lt;- geocode(marijuana, &quot;Premise_Address&quot;) Now it appears that we have longitude and latitude for every dispensary. We should check that they all look sensible. summary(marijuana$long) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s #&gt; -122.5 -122.4 -122.4 -122.4 -122.4 -122.4 10 summary(marijuana$lat) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s #&gt; 37.71 37.75 37.78 37.77 37.78 37.80 10 The minimum and maximum are very similar to each other for both longitude and latitude so thats a sign that it geocoded correctly. The 10 NA values mean that it didnt find a match for 10 of the addresses. Lets try again and now set method to arcgis which generally has a very high match rate. Before we do this lets just remove the entire latitude and longitude columns from our data. How the geocode() function works is that if we keep the long and lat columns that are currently in the data from when we just geocoded, when we run it again itll make new columns that have nearly identical names. We usually want as few columns in our data as possible so theres no point having the lat column from the last geocode run with the 10 NAs and another lat (though slightly different, automatically chosen name) column from this time we run geocode(). We could also just geocode the 10 addresses that failed on the first run, but given that well only geocoding a small number of addresses it wont take much extra time to have ArcGIS run it all. Running this function on just the NA rows requires a bit more work than just rerunning them all. In general, when the choice is between you spending time writing code and letting the computer do more work, let the computer do the work. And in general Id recommend starting with ArcGIS as it is more reliable for geocoding. Well remove the current coordinate columns by setting them each to NULL. marijuana$long &lt;- NULL marijuana$lat &lt;- NULL marijuana &lt;- geocode(marijuana, &quot;Premise_Address&quot;, method = &quot;arcgis&quot;) And lets do the summary() check again. summary(marijuana$long) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; -122.5 -122.4 -122.4 -122.4 -122.4 -122.4 summary(marijuana$lat) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; 37.71 37.76 37.77 37.77 37.78 37.80 No more NAs which means that we successfully geocoded our addresses. Another check is to make a simple scatterplot of the data. Since all the data is from San Francisco, they should be relatively close to each other. If there are dots far from the rest, that is probably a geocoding issue. plot(marijuana$long, marijuana$lat) Most points are within a very narrow range so it appears that our geocoding worked properly. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
