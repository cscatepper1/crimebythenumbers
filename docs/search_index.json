[
["ois-graphs.html", "7 More graphing with ggplot 7.1 Density plot 7.2 Histogram 7.3 Bar graph 7.4 Time Series", " 7 More graphing with ggplot In this lesson we will continue to explore graphing using ggplot(). While the Philadelphia Police website does have a number of variables available in a table on the site for shootings since 2013, since we did not scrape them initially we’ll turn to a new data set. The data we will use is a database of officer-involved shootings that result in a death in the United States since January 1st, 2015. This data has been compiled and released by the Washington Post so it will be a useful exercise in exploring data from non-government sources. This data is useful for our purposes as it has a number of variables related to the person who was shot, allowing us to practice making many types of graphs. To explore the data on their website, see here. To examine their methodology, see here. The data initially comes as a .csv file so we’ll use the read_csv() function from the readr package. library(readr) shootings &lt;- read_csv(&quot;data/fatal-police-shootings-data.csv&quot;) #&gt; Parsed with column specification: #&gt; cols( #&gt; id = col_double(), #&gt; name = col_character(), #&gt; date = col_date(format = &quot;&quot;), #&gt; manner_of_death = col_character(), #&gt; armed = col_character(), #&gt; age = col_double(), #&gt; gender = col_character(), #&gt; race = col_character(), #&gt; city = col_character(), #&gt; state = col_character(), #&gt; signs_of_mental_illness = col_logical(), #&gt; threat_level = col_character(), #&gt; flee = col_character(), #&gt; body_camera = col_logical() #&gt; ) Since read_csv() reads files into a tibble object, we’ll turn it into a data.frame just for simplicity. shootings &lt;- as.data.frame(shootings) Now that we have the data read in, let’s look at it. nrow(shootings) #&gt; [1] 4371 ncol(shootings) #&gt; [1] 14 The data has 14 variables and covers over 4,000 shootings. Let’s check out some of the variables, first using head() then using summary() and table(). head(shootings) #&gt; id name date manner_of_death armed age gender race #&gt; 1 3 Tim Elliot 2015-01-02 shot gun 53 M A #&gt; 2 4 Lewis Lee Lembke 2015-01-02 shot gun 47 M W #&gt; 3 5 John Paul Quintero 2015-01-03 shot and Tasered unarmed 23 M H #&gt; 4 8 Matthew Hoffman 2015-01-04 shot toy weapon 32 M W #&gt; 5 9 Michael Rodriguez 2015-01-04 shot nail gun 39 M H #&gt; 6 11 Kenneth Joe Brown 2015-01-04 shot gun 18 M W #&gt; city state signs_of_mental_illness threat_level flee #&gt; 1 Shelton WA TRUE attack Not fleeing #&gt; 2 Aloha OR FALSE attack Not fleeing #&gt; 3 Wichita KS FALSE other Not fleeing #&gt; 4 San Francisco CA TRUE attack Not fleeing #&gt; 5 Evans CO FALSE attack Not fleeing #&gt; 6 Guthrie OK FALSE attack Not fleeing #&gt; body_camera #&gt; 1 FALSE #&gt; 2 FALSE #&gt; 3 FALSE #&gt; 4 FALSE #&gt; 5 FALSE #&gt; 6 FALSE Each row is a single shooting and it includes variables such as the victim’s name, the date of the shooting, demographic information about that person, the shooting city and state, and some information about the incident. It is clear from these first 6 rows that most variables are categorical so we can’t use summary() on them. Let’s use summary() on the date and age columns and then use table() for the rest. summary(shootings$date) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; &quot;2015-01-02&quot; &quot;2016-02-07&quot; &quot;2017-03-16&quot; &quot;2017-03-18&quot; &quot;2018-04-11&quot; &quot;2019-06-25&quot; summary(shootings$age) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s #&gt; 6.00 27.00 35.00 36.84 45.00 91.00 182 From this we can see that the data is from January 1st through the middle of 2019 (The Washington Post is continuously updating their data but I downloaded it on June 27th, 2019 which is why June 2019 is the end of our data). From the age column we can see that the average age is about 35 with most people around that range. However, the youngest person is 6 years old while the oldest is 91. Additionally, 182 rows have missing values for this variable. Now we can use table() to see how often each value appears in each variable. We don’t want to do this for city or name as there would be too many values, but it will work for the other columns. Let’s start with manner_of_death. table(shootings$manner_of_death) #&gt; #&gt; shot shot and Tasered #&gt; 4146 225 To turn these counts into percentages we can divide the results by the number of rows in our data and multiply by 100. table(shootings$manner_of_death) / nrow(shootings) * 100 #&gt; #&gt; shot shot and Tasered #&gt; 94.852437 5.147563 Now it is clear to see that in 95% of shootings, officers used a gun and in 5% of shootings they also used a Taser. As this is data on officer shooting deaths, this is unsurprising. Let’s take a look at whether the victim was armed. table(shootings$armed) / nrow(shootings) * 100 #&gt; #&gt; air conditioner ax #&gt; 0.02287806 0.48043926 #&gt; barstool baseball bat #&gt; 0.02287806 0.27453672 #&gt; baseball bat and bottle baseball bat and fireplace poker #&gt; 0.02287806 0.02287806 #&gt; baton bayonet #&gt; 0.09151224 0.02287806 #&gt; BB gun bean-bag gun #&gt; 0.06863418 0.02287806 #&gt; beer bottle blunt object #&gt; 0.06863418 0.11439030 #&gt; bow and arrow box cutter #&gt; 0.02287806 0.22878060 #&gt; brick carjack #&gt; 0.04575612 0.02287806 #&gt; chain chain saw #&gt; 0.04575612 0.04575612 #&gt; chainsaw chair #&gt; 0.02287806 0.04575612 #&gt; claimed to be armed contractor&#39;s level #&gt; 0.02287806 0.02287806 #&gt; cordless drill crossbow #&gt; 0.02287806 0.20590254 #&gt; crowbar fireworks #&gt; 0.06863418 0.02287806 #&gt; flagpole flashlight #&gt; 0.02287806 0.02287806 #&gt; garden tool glass shard #&gt; 0.02287806 0.06863418 #&gt; gun gun and car #&gt; 55.43353924 0.11439030 #&gt; gun and knife gun and sword #&gt; 0.34317090 0.02287806 #&gt; gun and vehicle guns and explosives #&gt; 0.04575612 0.06863418 #&gt; hammer hand torch #&gt; 0.22878060 0.02287806 #&gt; hatchet hatchet and gun #&gt; 0.18302448 0.04575612 #&gt; incendiary device knife #&gt; 0.04575612 14.96225120 #&gt; lawn mower blade machete #&gt; 0.04575612 0.86936628 #&gt; machete and gun meat cleaver #&gt; 0.02287806 0.06863418 #&gt; metal hand tool metal object #&gt; 0.02287806 0.09151224 #&gt; metal pipe metal pole #&gt; 0.25165866 0.04575612 #&gt; metal rake metal stick #&gt; 0.02287806 0.06863418 #&gt; motorcycle nail gun #&gt; 0.02287806 0.02287806 #&gt; oar pellet gun #&gt; 0.02287806 0.02287806 #&gt; pen pepper spray #&gt; 0.02287806 0.02287806 #&gt; pick-axe piece of wood #&gt; 0.06863418 0.06863418 #&gt; pipe pitchfork #&gt; 0.13726836 0.04575612 #&gt; pole pole and knife #&gt; 0.04575612 0.04575612 #&gt; rock samurai sword #&gt; 0.09151224 0.02287806 #&gt; scissors screwdriver #&gt; 0.06863418 0.18302448 #&gt; sharp object shovel #&gt; 0.11439030 0.06863418 #&gt; spear stapler #&gt; 0.02287806 0.02287806 #&gt; straight edge razor sword #&gt; 0.06863418 0.34317090 #&gt; Taser tire iron #&gt; 0.41180508 0.02287806 #&gt; toy weapon unarmed #&gt; 3.54609929 6.36010066 #&gt; undetermined unknown weapon #&gt; 4.30107527 1.25829330 #&gt; vehicle vehicle and gun #&gt; 1.57858614 0.02287806 #&gt; walking stick wrench #&gt; 0.02287806 0.02287806 This is fairly hard to interpret as it is sorted alphabetically when we’d prefer it to be sorted by most common weapon. It also doesn’t round the percents. Let’s solve these two issues using sort() and round(). We could just wrap our initial code inside each of these functions but to avoid making too complicated code, we save the results in a temp object and incrementally use sort() and round() on that. We’ll round to two decimal places by setting the parameter digits to 2. temp &lt;- table(shootings$armed) / nrow(shootings) * 100 temp &lt;- sort(temp) temp &lt;- round(temp, digits = 2) temp #&gt; #&gt; air conditioner barstool #&gt; 0.02 0.02 #&gt; baseball bat and bottle baseball bat and fireplace poker #&gt; 0.02 0.02 #&gt; bayonet bean-bag gun #&gt; 0.02 0.02 #&gt; bow and arrow carjack #&gt; 0.02 0.02 #&gt; chainsaw claimed to be armed #&gt; 0.02 0.02 #&gt; contractor&#39;s level cordless drill #&gt; 0.02 0.02 #&gt; fireworks flagpole #&gt; 0.02 0.02 #&gt; flashlight garden tool #&gt; 0.02 0.02 #&gt; gun and sword hand torch #&gt; 0.02 0.02 #&gt; machete and gun metal hand tool #&gt; 0.02 0.02 #&gt; metal rake motorcycle #&gt; 0.02 0.02 #&gt; nail gun oar #&gt; 0.02 0.02 #&gt; pellet gun pen #&gt; 0.02 0.02 #&gt; pepper spray samurai sword #&gt; 0.02 0.02 #&gt; spear stapler #&gt; 0.02 0.02 #&gt; tire iron vehicle and gun #&gt; 0.02 0.02 #&gt; walking stick wrench #&gt; 0.02 0.02 #&gt; brick chain #&gt; 0.05 0.05 #&gt; chain saw chair #&gt; 0.05 0.05 #&gt; gun and vehicle hatchet and gun #&gt; 0.05 0.05 #&gt; incendiary device lawn mower blade #&gt; 0.05 0.05 #&gt; metal pole pitchfork #&gt; 0.05 0.05 #&gt; pole pole and knife #&gt; 0.05 0.05 #&gt; BB gun beer bottle #&gt; 0.07 0.07 #&gt; crowbar glass shard #&gt; 0.07 0.07 #&gt; guns and explosives meat cleaver #&gt; 0.07 0.07 #&gt; metal stick pick-axe #&gt; 0.07 0.07 #&gt; piece of wood scissors #&gt; 0.07 0.07 #&gt; shovel straight edge razor #&gt; 0.07 0.07 #&gt; baton metal object #&gt; 0.09 0.09 #&gt; rock blunt object #&gt; 0.09 0.11 #&gt; gun and car sharp object #&gt; 0.11 0.11 #&gt; pipe hatchet #&gt; 0.14 0.18 #&gt; screwdriver crossbow #&gt; 0.18 0.21 #&gt; box cutter hammer #&gt; 0.23 0.23 #&gt; metal pipe baseball bat #&gt; 0.25 0.27 #&gt; gun and knife sword #&gt; 0.34 0.34 #&gt; Taser ax #&gt; 0.41 0.48 #&gt; machete unknown weapon #&gt; 0.87 1.26 #&gt; vehicle toy weapon #&gt; 1.58 3.55 #&gt; undetermined unarmed #&gt; 4.30 6.36 #&gt; knife gun #&gt; 14.96 55.43 Now it is a little easier to interpret. In over half of the cases the victim was carrying a gun. 15% of the time they had a knife. And 6% of the time they were unarmed. In 4% of cases there is no data on any weapon. That leaves about 20% of cases where one of the many rare weapons were used, including some that overlap with one of the more common categories. Think about how you’d graph this data. There are 85 unique values in this column though only 7 of them are common enough to appear more than 1% of the time. Should we graph all of them? No, that would overwhelm any graph. For a useful graph we would need to combine many of these into a single category - possibly called “other weapons.” And how do we deal with values where they could meet multiple larger categories? There is not always a clear answer for these types of questions. It depends on what data you’re interested in, the goal of the graph, the target audience, and personal preference. Let’s keep exploring the data by looking at gender and race. table(shootings$gender) / nrow(shootings) * 100 #&gt; #&gt; F M #&gt; 4.667124 95.218485 Nearly all of the shootings are of a man. Given that we saw most shootings involved a person with a weapon and that most violent crimes are committed by men, this shouldn’t be too surprising. temp &lt;- table(shootings$race) / nrow(shootings) * 100 temp &lt;- sort(temp) temp &lt;- round(temp, digits = 2) temp #&gt; #&gt; O N A H B W #&gt; 0.87 1.46 1.62 16.45 22.90 44.89 White people are the most likely to be killed by police followed by Black people and Hispanic people. We can do a simple cross-tab to see if there the relationship between gender and race. table(shootings$gender, shootings$race) #&gt; #&gt; A B H N O W #&gt; F 3 42 21 5 3 107 #&gt; M 68 959 697 59 35 1853 One annoying thing with these two variables is that it doesn’t spell out the name. Instead of “Female”, for example, it has “F”. For our graphs we want to spell out the words so it is clear to viewers. We’ll fix this issue, and the issue of having many weapon categories, as we graph each variable. We’ve spent some time looking at the data so now we’re ready to make the graphs. We need to load the ggplot2 package. library(ggplot2) 7.1 Density plot As a reminder, the benefit of using ggplot() is we can start with a simple plot and build our way up to more complicated graphs. ggplot(shootings, aes(x = age)) + geom_density() #&gt; Warning: Removed 182 rows containing non-finite values (stat_density). 7.2 Histogram ggplot(shootings, aes(x = age)) + geom_histogram() #&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. #&gt; Warning: Removed 182 rows containing non-finite values (stat_bin). 7.3 Bar graph ggplot(shootings, aes(x = race)) + geom_bar() race_order &lt;- names(sort(table(shootings$race), decreasing = TRUE)) ggplot(shootings, aes(x = race)) + geom_bar() + scale_x_discrete(limits = race_order) #&gt; Warning: Removed 516 rows containing non-finite values (stat_count). For bar graphs it is often useful to flip the graph so each value is a row in the graph rather than a column. This also makes it much easier to read the value name. race_order &lt;- names(sort(table(shootings$race))) ggplot(shootings, aes(x = race)) + geom_bar(aes(y = (..count..)/sum(..count..))) + coord_flip() + scale_x_discrete(limits = race_order) #&gt; Warning: Removed 516 rows containing non-finite values (stat_count). race_order &lt;- names(sort(table(shootings$race))) ggplot(shootings, aes(x = race)) + geom_bar(aes(y = (..count..)/sum(..count..))) + coord_flip() + scale_x_discrete(limits = race_order) + scale_y_continuous(labels = scales::percent) #&gt; Warning: Removed 516 rows containing non-finite values (stat_count). We can reuse this code to make a similar graph for the gender variable. race_order &lt;- names(sort(table(shootings$gender))) ggplot(shootings, aes(x = gender)) + geom_bar(aes(y = (..count..)/sum(..count..))) + coord_flip() + scale_x_discrete(limits = race_order) + scale_y_continuous(labels = scales::percent) #&gt; Warning: Removed 5 rows containing non-finite values (stat_count). 7.4 Time Series library(lubridate) #&gt; #&gt; Attaching package: &#39;lubridate&#39; #&gt; The following objects are masked from &#39;package:base&#39;: #&gt; #&gt; date, intersect, setdiff, union shootings$dummy &lt;- 1 shootings$month_year &lt;- floor_date(shootings$date, unit = &quot;month&quot;) shootings$year &lt;- year(shootings$date) monthly_shootings &lt;- aggregate(dummy ~ month_year, data = shootings, FUN = sum) ggplot(monthly_shootings, aes(x = month_year, y = dummy)) + geom_line() yearly_shootings &lt;- aggregate(dummy ~ year, data = shootings, FUN = sum) ggplot(yearly_shootings, aes(x = year, y = dummy)) + geom_line() ggplot(yearly_shootings[yearly_shootings$year != 2019, ], aes(x = year, y = dummy)) + geom_line() yearly_shootings &lt;- aggregate(dummy ~ month_year, data = shootings[shootings$armed == &quot;unarmed&quot;, ], FUN = sum) ggplot(yearly_shootings, aes(x = month_year, y = dummy)) + geom_line() "]
]
