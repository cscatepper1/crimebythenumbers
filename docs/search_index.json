[
["index.html", "Crime by the Numbers Welcome Why learn to program? What you will learn What you won’t learn Simple vs Easy How to Contribute", " Crime by the Numbers Jacob Kaplan 2019-12-12 Welcome This book introduces the programming language R and is meant for undergrads or graduate students studying criminology. R is a programming language that is well-suited to the type of work frequently done in criminology - taking messy data and turning it into useful information. While R is a useful tool for many fields of study, this book focuses on the skills criminologists should know and uses crime data for the example data sets. For this book you should have the latest version of R installed and be running it through RStudio Desktop (The free version) . We’ll get into what R and RStudio are soon but please have them installed to be able to follow along with each chapter. I highly recommend following along with the code for each lesson and then try to use the lessons learned on a data set you are interested in. To download the data used in this book please see here. Why learn to program? With the exception of some more advanced techniques like scraping data from websites or from PDFs, nearly everything we do here can be done through Excel, a software you’re probably more familiar with. The basic steps for research projects are generally: Open up a data set - which frequently comes as an Excel file! Change some values - misspellings or too specific categories for our purposes are very common in crime data Delete some values - such as states you won’t be studying Make some graphs Calculate some values - such as number of crimes per year Sometimes do a statistical analysis depending on the type of project Write up what you find R can do all of this but why should you want (or have) to learn a entirely new skill just to do something you can already do? R is useful for two main reasons: scale and reproducibility. Scale If you do a one-off project in your career such as downloading some data and making a graph out of it, it makes sense to stick with software like Excel. The cost (in time and effort) of learning R is certainly not worth it for a single (or even several) project - even one perfectly suited for using R. R (and many programming languages more generally, such as Python) has its strength in doing something fairly simple many many times. For example, it may be quicker to download one file yourself than it is to write the code in R to download that file. But when it comes to downloading hundreds of files, writing the R code becomes very quickly the better option than doing it by hand. For most tasks you do in criminology when dealing with data you will end up them doing many times (including doing the same task in future projects). So R offers the trade-off of spending time upfront by learning the code with the benefit of that code being able to do work at a large scale with little extra work from you. Please keep in mind this trade-off - you need to front-load the costs of learning R for the rewards of making your life easier when dealing with data - when feeling discouraged about the small returns you get early in learning R. Reproducibility The second major benefit of using R over something like Excel is that R is reproducible. Every action you take is written down. This is useful when collaborating with others (including your future self) as they can look at your code and follow along what you did without you having to show them every click you made as you frequently would on Excel. Your collaborator can look at your code to help you figure out a bug in the code or to add their own code to yours. In the research context specifically you want to have code to give to people to ensure that your research was done correctly and there aren’t bugs in the code. Additionally, if you build a tool to, for example, interpret raw crime data from an agency and turn it into a map, being able to share the code so others can modify it for their own city saves these people a lot of time and effort. What you will learn For many of the lessons we will be working through real research questions and working from start to finish as you would on your own project. This involves thinking about what you want to accomplish from the data you have and what steps you need to take to reach that goal. This involves more than just knowing what code to write - it includes figuring out what your data has, whether it can answer the question you’re asking, and planning out (without writing any code yet) what you need to do when you start coding. Skills There is a large range of skills in criminological research - far too large to cover in a single book. Here we will attempt to teach fundamental skills to build a solid foundation for future work. We’ll be focusing on the following skills and trying to reinforce our skills with each lesson. Subsetting - Taking only certain rows or columns from a data set Graphing Regular expressions - Essentially R’s “Find and Replace” function for text Getting data from websites (webscraping) Getting data from PDFs Mapping Writing documents through R Data Criminology has a large - and growing - number of data sets publicly available for us to use. In this book we will focus on a few prominent ones including the following: Uniform Crime Report (UCR) - A FBI data set with agency-level crime data for nearly every agency in the United States We’ll also cover a number of other data sets such as local police data and government data on alcohol consumption in the United States. What you won’t learn This book is not a statistics book so we will not be covering any statistical techniques. Though some data sets we handle are fairly large, this book does not discuss how to deal with Big Data. While the lessons you learn in this book can apply to larger data sets, Big Data (which I tend to define loosely as data that are too large for my computer to handle) requires special skills that are outside the realm of this book. If you do intend to deal with huge data sets I recommend you look at the R package data.table which is an excellent resource for it. While we briefly cover mapping, this book will not cover working with geographic data in detail. For a comprehensive look at geographic data please see this book. Simple vs Easy In the course of this book we will cover things that are very simple. For example, we’ll take a data set (think of it like an Excel file) with crime for nearly every agency in the United States and keep only data from Colorado for a small number of years. We’ll then find out how many murders happened in Colorado each year. This is a fairly simple task - it can be expressed in two sentences. You’ll find that most of what you do is simple like this - it is quick to talk about what you are doing and the concepts are not complicated. What it isn’t is easy. To actually write the R code to do this takes knowing a number of interrelated concepts in R and several lines of code to implement each step. While this distinction may seem minor, I think it is important for newer programmers to understand that what they are doing may be simple to talk about but hard to implement. It is easy to feel like a bad programmer because something that can be articulated in 10 seconds may take hours to do. So during times when you are working with R try to keep in mind that even though a project may be simple to articulate, it may be hard to code and that there is often very little correlation between the two. How to Contribute If you have any questions, suggestions, or find any issues please email me at jacob@crimedatatool.com. If this book has helped you, also email me so I can try to measure the book’s impact and who is using it. "],
["about-the-author.html", "About the author", " About the author Jacob Kaplan is a PhD candidate in criminology at the University of Pennsylvania. He holds a master’s degree in criminology from the University of Pennsylvania and a bachelor’s degree in criminal justice from California State University, Sacramento. His research focuses on Crime Prevention Through Environmental Design (CPTED), specifically on the effect of outdoor lighting on crime. He is the author of several R packages that make it easier to work with data, including fastDummies and asciiSetupReader. His website allows easy analysis of crime-related data and he has released over a dozen crime data sets (primarily FBI UCR data) on openICPSR that he has compiled, cleaned, and made available to the public. He is currently on the job market. For a list of papers he has written (including working papers), please see here. For a list of data sets he has cleaned, aggregated, and made public, please see here. "],
["introduction-to-r-and-rstudio.html", "1 Introduction to R and RStudio 1.1 Using RStudio 1.2 Reading data into R 1.3 First steps to exploring data 1.4 Finding help about functions", " 1 Introduction to R and RStudio 1.1 Using RStudio In this lesson we’ll start by looking at RStudio then write some brief code to load in some crime data and start exploring it. This lesson will cover code that you won’t understand completely yet. That is fine, we’ll cover everything in more detail as the lessons progress. RStudio is the interface we use to work with R. It has a number of features to make it easier for us to work with R - while not strictly necessary to use, most people who use R do so through RStudio. We’ll spend some time right now looking at RStudio and the options you can change to make it easier to use (and to suit your personal preferences with appearance) as this will make all of the work we do in this book easier. When you open up RStudio you’ll see four panels, each of which plays an important role in RStudio. Your RStudio may not look like the setup I have in the image below - that is fine, we’ll learn how to change the appearance of RStudio soon. At the top right is the Console panel. Here you can write code, hit enter/return, and R will run that code. If you write 2+2 it will return (in this case that just mean it will print an answer) 4. This is useful for doing something simple like using R as a calculator or quickly looking at data. In most cases during research this is where you’d do something that you don’t care to keep. This is because when you restart R it won’t save anything written in the Console. To do reproducible research or to be able to collaborate with others you need a way to keep the code you’ve written. The way to keep the code you’ve written in a file that you can open later or share with someone else is by writing code in an R Script (if you’re familiar with Stata, an R Script is just like a .do file). An R Script is essentially a text file (similar to a Word document) where you write code. To run code in an R Script just click on a line of code or highlight several lines and hit enter/return or click the “Run” button on the top right of the Source panel. You’ll see the lines of code run in the Console and any output (if your code has an output) will be shown there too (making a plot will be shown in a different panel as we’ll see soon). For code that you don’t want to run, called comments, start the line with a pound sign # and that line will not be run (it will still print in the console if you run it but it won’t do anything). These comments should explain the code you wrote (if not otherwise obvious). The Source panel is where the R Scripts will be and is located at the top left on the image below. It is good practice to do all of your code writing in an R Script - even if you delete some lines of code later - as it eliminates the possibility of losing code or forgetting what you wrote. Having all the code in front of you in a text file also makes it easier to understand the flow of code from start to finish to a task - an issue we’ll discuss more in later lessons. While the Source and Console panels are the ones that are of most use, there are two other panels worth discussing. As these two panels let you interchange which tabs are available in them, we’ll return to them shortly in the discussion of the options RStudio has to customize it. 1.1.1 Opening an R Script When you want to open up a new R Script you can click File on the very top left, then R Script. It will open up the script in a new tab inside of the Source panel. There are also a number of other file options available: R Presentation which can make Powerpoints, R Markdown which can make Word Documents or PDFs that incorporate R code used to make tables or graphs (and which we’ll cover in Chapter 10), and Shiny Web App to make websites using R. There is too much to cover for an introductory book such as this but keep in mind the wide capabilities of R if you have another task to do. 1.1.2 Setting the working directory Many research projects incorporate data that someone else (such as the FBI or a local police agency) has put together. In these cases we need to load the data into R to be able to use it. In a little bit we’ll load a data set into R and start working on it but let’s take a step back now and think about how to even load data. First we’ll need to get the data onto our computer somehow, probably by downloading it from an agency’s website. Let’s be specific - we don’t download it to our computer, we download it to a specific folder on our computer (usually defaulted to the Downloads folder on a Windows machine). So let’s say you wanted to load a file called “data” into R. If you have a file called “data” in both your Desktop and your Downloads folder, R wouldn’t know which one you wanted. And unless your data was in the folder R searches by default (which may not be where the file is downloaded by default), R won’t know which file to load. We need to tell R explicitly which folder has the data to load. We do this by setting the “Working Directory” (or the “Folders where I want you, R, to look for my data” in more simple terms). To set a working directory in R click the Session tab on the top menu, scroll to Set Working Directory, then click Choose Directory. This will open a window where you can navigate to the folder you want. After clicking Open in that window you’ll see a new line of code in the Console starting with setwd() and inside of the parentheses is the route your computer takes to get to the folder you selected. And now R knows which folder to look in for the data you want. It is good form to start your R Script with setwd() to make sure you can load the data. So copy that line of code that says setwd() (which stands for “set working directory”), including everything in the parentheses, to your R Script when you start working. 1.1.3 Changing RStudio Your RStudio looks different than my RStudio because I changed a number of settings to suit my preferences. To do so yourself click the Tools tab on the top menu and then click Global Options. This opens up a window with a number of different tabs to change how R behaves and how it looks. 1.1.3.1 General Under Workspace in the General tab make sure to uncheck the “Restore .RData into workspace at startup” and to set “Save workspace to .RData on exit:” to Never. What this does is make sure that every time you open R it starts fresh with no objects (essentially data loaded into R or made in R) from previous sessions. This may be annoying at times, especially when it comes to loading large files, but the benefits far outweigh the costs. You want your code to run from start to finish without any errors. Something I’ve seen many students do is write some code in the Console (or in their R Script but out of order of how it should be run) to fix an issue with the data. This means their data is how it should be but when the R session restarts (such as if the computer restarts) they won’t be able to get back to that point. Making sure your code handles everything from start to finish is well-worth the avoided headache of trying to remember what code you did to fix the issue previously. 1.1.3.2 Code The Code tab lets you specify how you want the code to be displayed. The important section for us is to make sure to check the “Soft-wrap R source files” check-box. If you write a very long line of code it gets too big to view all at once and you must scroll to the right to read it all. That can be annoying as you won’t be able to see all the code at once. Setting “Soft-wrap” makes it so if a line is too long it will just be shown on multiple lines which solves that issue. In practice it is best to avoid long lines of codes as it makes it hard to read but that isn’t always possible. 1.1.3.3 Appearance The Appearance tab lets you change the background, color, and size of text. Change it to your preferences. 1.1.3.4 Pane Layout The final tab we’ll look at is Pane Layout. This lets you move around the Source, Console, and the other two panels. There are a number of different tabs to select for the panels (unchecking one just moves it to the other panel, it doesn’t remove it from RStudio) and we’ll talk about three of them. The Environment tab shows every object you load into R or make in R. So if you load a file called “data” you can check the Environment tab. If it is there, you have loaded the file correctly. As we’ll discuss more in Section 1.4, the Help tab will open up to show you a help page for a function you want more information on. The Plots tab will display any plot you make. It also keeps all plots you’ve made (until restarting R) so you can scroll through the plots. 1.1.4 Helpful cheatsheets RStudio also includes a number of links to helpful cheatsheets for a few important topics. To get to it click Help, then Cheatsheets and click on whichever one you need. 1.2 Reading data into R For many research projects you’ll have data produced by some outside group (FBI, local police agencies) and you want to take that data and put it inside R to work on it. We call that reading data into R. R is capable of reading a number of different formats of data which we will discuss in more detail in Chapter 5. Here, we will talk about the standard R data file only. 1.2.1 Loading data As we learned above in Section 1.1.2 we need to set our working directory to the folder where the data is. For my own setup, R is already defaulted to the folder with this data so I do not need to set a working directory. For those following along on your own computer, make sure to set your working directory now. The load() function lets us load data already in the R format. These files will end in the extension “.rda” or sometimes “.Rda” or “.RData”. Since we are telling R to load a specific file we need to have that file name in quotes and include the file extension “.rda”. With R data, the object inside the data already has a name so we don’t need to assign (something we will discuss in detail in Section 2.2) a name to the data. With other forms of data such as .csv files we will need to do that as we’ll see in Chapter 5. load(&quot;data/ucr2017.rda&quot;) 1.3 First steps to exploring data The object we loaded is called ucr2017. We’ll explore this data more thoroughly in the Chapter 3 but for now let’s use four simple (and important) functions to get a sense of what the data holds. For each of these functions write the name of the data set (without quotes since we don’t need quotes for an object already made in R) inside the (). head() summary() plot() View() Note that the first three functions are lowercase while View() is capitalized. That is simply because older functions in R were often capitalized while newer ones use all lowercase letters. R is case sensitive so using view() will not work. The head() function prints the first 6 rows of each column of the data to the console. This is useful to get a quick glance at the data but has some important drawbacks. When using data with a large number of columns it can be quickly overwhelming by printing too much. There may also be differences in the first 6 rows with other rows. For example if the rows are ordered chronologically (as is the case with most crime data) the first 6 rows will be the most recent. If data collection methods or the quality of collection changed over time, these 6 rows won’t be representative of the data. head(ucr2017) #&gt; ori year agency_name state population actual_murder #&gt; 1 AK00101 2017 anchorage alaska 296188 27 #&gt; 2 AK00102 2017 fairbanks alaska 32937 10 #&gt; 3 AK00103 2017 juneau alaska 32344 1 #&gt; 4 AK00104 2017 ketchikan alaska 8230 1 #&gt; 5 AK00105 2017 kodiak alaska 6198 0 #&gt; 6 AK00106 2017 nome alaska 3829 0 #&gt; actual_rape_total actual_robbery_total actual_assault_aggravated #&gt; 1 391 778 2368 #&gt; 2 24 40 131 #&gt; 3 50 46 206 #&gt; 4 19 0 14 #&gt; 5 15 4 41 #&gt; 6 7 0 52 The summary() function gives a six number summary of each numeric or Date column in the data. For other types of data, such as “character” types (which are just columns with words rather than numbers or dates), it’ll say what type of data it is. The six values it returns for numeric and Date columns are The minimum value The value at the 1st quartile The median value The mean value The value at the 3rd quartile The max value In cases where there are NAs, it will say how many NAs there are. An NA value is a missing value. Think of it like an empty cell in an Excel file. NA values will cause issues when doing math such as finding the mean of a column as R doesn’t know how to handle a NA value in these situations. We’ll learn how to deal with this later. summary(ucr2017) #&gt; ori year agency_name state #&gt; Length:15764 Min. :2017 Length:15764 Length:15764 #&gt; Class :character 1st Qu.:2017 Class :character Class :character #&gt; Mode :character Median :2017 Mode :character Mode :character #&gt; Mean :2017 #&gt; 3rd Qu.:2017 #&gt; Max. :2017 #&gt; population actual_murder actual_rape_total #&gt; Min. : 0 Min. : 0.000 Min. : -2.000 #&gt; 1st Qu.: 914 1st Qu.: 0.000 1st Qu.: 0.000 #&gt; Median : 4460 Median : 0.000 Median : 1.000 #&gt; Mean : 19872 Mean : 1.069 Mean : 8.262 #&gt; 3rd Qu.: 15390 3rd Qu.: 0.000 3rd Qu.: 5.000 #&gt; Max. :8616333 Max. :653.000 Max. :2455.000 #&gt; actual_robbery_total actual_assault_aggravated #&gt; Min. : -1.00 Min. : -1.00 #&gt; 1st Qu.: 0.00 1st Qu.: 1.00 #&gt; Median : 0.00 Median : 5.00 #&gt; Mean : 19.85 Mean : 49.98 #&gt; 3rd Qu.: 4.00 3rd Qu.: 21.00 #&gt; Max. :13995.00 Max. :29771.00 The plot() function allows us to graph our data. For criminology research we generally want to make scatterplots to show the relationship between two numeric variables, time-series graphs to see how a variable (or variables) change over time, or barplots comparing categorical variables. Here we’ll make a scatterplot seeing the relationship between a city’s number of murders and their number of aggravated assaults (assault with a weapon or that causes serious bodily injury). To do so we must specify which column is displayed on the x-axis and which one is displayed on the y-axis. In Section 2.5.1 we’ll talk explicitly about how to select specific columns from our data. For now all you need to know is to select a column you write the data set name followed by dollar sign $ followed by the column name. Do not include any quotations or spaces (technically spaces can be included but make it a bit harder to read and are against conventional style when writing R code so we’ll exclude them). Inside of plot() we say that “x = ucr2017$actual_murder” so that column goes on the x-axis and “y = ucr2017$actual_assault_aggravated” so aggravated assault goes on the y-axis. And that’s all it takes to make a simple graph. plot(x = ucr2017$actual_murder, y = ucr2017$actual_assault_aggravated) Finally, View() opens essentially an Excel file of the data set you put inside the (). This allows you to look at the data as if it were in Excel and is a good way to start to understand the data. View(ucr2017) 1.4 Finding help about functions If you are having trouble understanding what a function does or how to use it, you can ask R for help and it will open up a page explaining what the function does, what options it has, and examples of how to use it. To do so we write help(function) or ?function in the console and it will open up that function’s help page. If we wrote help(plot) to figure out what the plot() function does, it will open up this page. For finding the help page of a function the parentheses (e.g. plot()) are optional. "],
["subsetting-intro.html", "2 Subsetting: Making big things small 2.1 Select specific values 2.2 Assignment values to objects (Making “things”) 2.3 Vectors (collections of “things”) 2.4 Logical values and operations 2.5 Subsetting a data.frame", " 2 Subsetting: Making big things small Subsetting data is a way to take a large data set and reduce it to a smaller one that is better suited for answering a specific question. This is useful when you have a lot of data in the data set that isn’t relevant to your research - for example, if you are studying crime in Colorado and have every state in your data, you’d subset it to keep only the Colorado data. Reducing it to a smaller data set makes it easier to manage, both in understanding your data and avoiding have a huge file that could slow down R. 2.1 Select specific values animals &lt;- c(&quot;cat&quot;, &quot;dog&quot;, &quot;gorilla&quot;, &quot;buffalo&quot;, &quot;lion&quot;, &quot;snake&quot;) animals #&gt; [1] &quot;cat&quot; &quot;dog&quot; &quot;gorilla&quot; &quot;buffalo&quot; &quot;lion&quot; &quot;snake&quot; Here we have made an object called animals with a number of different animals in it (we’ll explain what it really means to “make an object” soon). In R, we will use square brackets [] to select specific values in that object, something called “indexing”. Put a number (or numbers) in the square bracket and it will return the value at that “index”. The index is just the place number where each value is. “cat” is the first value in animals so it is at the first index, “dog” is the second value so it is the second index or index 2. “snake” is our last value and is the 6th value in animals so it is index 6 (some languages use “zero indexing” which means the first index is index 0, the second is index 1. So in our example “cat” would be index 0. R does not do that and the first value is index 1, the second is index 2 and so on.). The syntax (how the code is written) goes object[index] First we have the object and then we put the square bracket []. We need both the object and the [] for subsetting to work. Let’s say we wanted to choose just the “snake” from our animals object. In normal language we say \"I want the 6th value from animals. We say where we’re looking and which value we want. animals[6] #&gt; [1] &quot;snake&quot; Now let’s get the third value. animals[3] #&gt; [1] &quot;gorilla&quot; If we want multiple values we can enter multiple numbers. If you have multiple values, you need to make a vector using c() and put the numbers inside the parentheses separated by a comma. We’ll learn more about vectors and using c() in Section 2.3 shortly. If we wanted values 1-3 we could use c(1, 2, 3), with each number separated by a comma. animals[c(1, 2, 3)] #&gt; [1] &quot;cat&quot; &quot;dog&quot; &quot;gorilla&quot; When making a vector of sequential integers, instead of writing them all out manually we can use first_number:last_number like so 1:3 #&gt; [1] 1 2 3 To use it in subsetting we can treat 1:3 as if we wrote c(1, 2, 3). animals[1:3] #&gt; [1] &quot;cat&quot; &quot;dog&quot; &quot;gorilla&quot; The order we enter the numbers determines the order of the values it returns. Let’s get the third index, the fourth index, and the first index, in that order. animals[c(3, 4, 1)] #&gt; [1] &quot;gorilla&quot; &quot;buffalo&quot; &quot;cat&quot; Putting a negative number inside the [] will return all values except for that index, essentially deleting it. Let’s remove “cat” from animals. Since it is the 1st item in animals we can remove it like this animals[-1] #&gt; [1] &quot;dog&quot; &quot;gorilla&quot; &quot;buffalo&quot; &quot;lion&quot; &quot;snake&quot; Now let’s remove multiple values, the first 3. animals[-c(1, 2, 3)] #&gt; [1] &quot;buffalo&quot; &quot;lion&quot; &quot;snake&quot; 2.2 Assignment values to objects (Making “things”) Earlier we wrote animals &lt;- c(\"cat\", \"dog\", \"gorilla\", \"buffalo\", \"lion\", \"snake\") to make the object animals with the value of each of the different animals we wrote. We say&lt;- as “gets”. So above “animals gets the values cat, dog, etc.”. This is read from left to right as thing on left (the name of the object) “gets” the value of the thing on the right of the &lt;-. The proper terminology is that the “thing” on the left is an “object”. So if we had x &lt;- 5 the object x gets the value 5. We could also say “five was assigned to x”. The terminology is “object gets value” or “value assigned to object”, both work. You can use the = instead of &lt;-. Again, the thing on the left gets the value of the thing on the right even when using =. x = 2 x now has the value of the number 2. x #&gt; [1] 2 It is the convention in R to use &lt;- instead of = and in some cases the = will not work properly. For those reasons we will use &lt;- for this class. Earlier I said we can remove values with using a negative number and that index will be removed from the object. For example, animals[-1] prints every value in th animals except for the first value. animals[-1] #&gt; [1] &quot;dog&quot; &quot;gorilla&quot; &quot;buffalo&quot; &quot;lion&quot; &quot;snake&quot; However, it doesn’t actually remove anything from animals. Let’s print animals and see which values it returns. animals #&gt; [1] &quot;cat&quot; &quot;dog&quot; &quot;gorilla&quot; &quot;buffalo&quot; &quot;lion&quot; &quot;snake&quot; Now the first value, “cats”, is back. Why? To make changes in R you need to tell R very explicitly that you are making the change. If you don’t save the result of your code (by assigning an object to it), R will run that code and simply print the results in the console panel without making any changes. This is an important point that a lot of students struggle with. R doesn’t know when you want to save (in this context I am referring to creating or updating an object that is entirely in R, not saving a file to your computer) a value or update an object. If x is an object with a value of 2, and you write x + 2, it would print out 4 because 2 + 2 = 4. But that won’t change the value of x. x will remain as 2 until you explicitly tell R to change it’s value. If you want to update x you need to run x &lt;- somevalue where “somevalue” is whatever you want to change x to. So to return to our animals example, if we wanted to delete the first value and keep it removed, we’d need to write animals &lt;- animals[-1]. Which is essentially making a new object, also called animals (to avoid having many, slightly different objects that are hard to keep track of we’ll reuse the name) with the same values as the original animals except this time excluding the first value, “cats”. 2.3 Vectors (collections of “things”) When we made x we wrote x &lt;- 2 while when we made animals we wrote animals &lt;- c(\"cat\", \"dog\", \"gorilla\", \"buffalo\", \"lion\", \"snake\"). The important difference is that when assigning multiple values to an object we must use the function c() which combines them together. With multiple values we follow the same pattern of object &lt;- value but put the value inside of c() and separate each value by a comma. x &lt;- c(1, 2, 3) The result of the c() is called a vector and you can think of it as a collection of values. Note that vectors take values that are the same type, so all values included must be the same type such as a number or a string (a character type such as words or values with letters. In R they are put in quotes.). If they aren’t the same type R will automatically convert it. c(&quot;cat&quot;, &quot;dog&quot;, 2) #&gt; [1] &quot;cat&quot; &quot;dog&quot; &quot;2&quot; Above we made a vector with the values “cat”, “dog” and 2 (without quotes) and it added quotes to the 2. Since everything must be the same type, R automatically converted the 2 to a string of “2”. 2.4 Logical values and operations We also frequently want to conditionally select certain values. Earlier we selected values indexing specific numbers, but that requires us to know exactly which values we want. We can conditionally select values by having some conditional statement (e.g. “this value is lower than the number 100”) and keeping only values where that condition is true. When we talk about logical values we mean TRUE and FALSE - in R you must spell it in all capital letters. First we will discuss conditionals abstractly and then we will use a real example using data from the FBI to make a data set tailored to answer a specific question. We can use these TRUE and FALSE values to index and it will return every element which we say is TRUE. animals[c(TRUE, TRUE, FALSE, FALSE, FALSE, FALSE)] #&gt; [1] &quot;cat&quot; &quot;dog&quot; This is the basis of conditional subsetting. If we have a large data set and only want a small chunk based on some condition (data in a single state (or multiple states), at a certain time, at least a certain population) we need to make a conditional statement that returns TRUE if it matches what we want and FALSE if it doesn’t. There are a number of different ways to make conditional statements. First let’s go through some special characters involved and then show examples of each one. For each case you are asking: does the thing on the left of the conditional statement return TRUE or FALSE compared to the thing on the right. == Equals (compared to a single value) %in% Equals (one value match out of multiple comparisons) != Does not equal &lt; Less than &gt; Greater than &lt;= Less than or equal to &gt;= Greater than or equal to Since many conditionals involve numbers (especially in criminology), let’s make a new object called numbers with the numbers 1-10. numbers &lt;- 1:10 2.4.1 Matching a single value The conditional == asks if the thing on the left equals the thing on the right. Note that it uses two equal signs. If we used only one equal sign it would assign the thing on the left the value of the thing on the right (as if we did &lt;-). 2 == 2 #&gt; [1] TRUE This gives TRUE as we know that 2 does equal 2. If we change either value, it would give us FALSE. 2 == 3 #&gt; [1] FALSE And it works when we have multiple numbers on the left side, such as our object called numbers. numbers == 2 #&gt; [1] FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE This also works with characters such as the animals in the object we made earlier. “gorilla” is the third animal in our object, so if we check animals == “gorilla” we expect the third value to be TRUE and all others to be FALSE. Make sure that the match is spelled correctly (including capitalization) and is in quotes. animals == &quot;gorilla&quot; #&gt; [1] FALSE FALSE TRUE FALSE FALSE FALSE The == only works when there is one thing on the right hand side. In criminology we often want to know if there is a match for multiple things - is the crime one of the following crimes…, did the crime happen in one of these months…, is the victim a member of these demographic groups…? So we need a way to check if a value is one of many values. 2.4.2 Matching multiple values The R operator %in% asks each value on the left whether or not it is a member of the set on the right. It asks, is the single value on the left hand side (even when there are multiple values such as our animals object, it goes through them one at a time) a match with any of the values on the right hand side? It only has to match with one of the right hand side values to be a match. 2 %in% c(1, 2, 3) #&gt; [1] TRUE For our animals object, if we check if they are in the vector c(\"cat\", \"dog\", \"gorilla\"), now all three of those animals will return TRUE. animals %in% c(&quot;cat&quot;, &quot;dog&quot;, &quot;gorilla&quot;) #&gt; [1] TRUE TRUE TRUE FALSE FALSE FALSE 2.4.3 Does not match Sometimes it is easier to ask what is not a match. For example, if you wanted to get every month except January, instead of writing the other 11 months, you just ask for any month that does not equal “January”. We can use !=, which means “not equal”. When we wanted an exact match we used ==, if we want a not match we can use != (this time it is only a single equals sign). 2 != 3 #&gt; [1] TRUE &quot;cat&quot; != &quot;gorilla&quot; #&gt; [1] TRUE Note that for matching multiple values with %in%, we cannot write !%in% but have to put the ! before the values on the left. !animals %in% c(&quot;cat&quot;, &quot;dog&quot;, &quot;gorilla&quot;) #&gt; [1] FALSE FALSE FALSE TRUE TRUE TRUE 2.4.4 Greater than or less than We can use R to compare values using greater than or less than symbols. We can also express “greater than or equal to” or “less than or equal to.” 6 &gt; 5 #&gt; [1] TRUE 6 &lt; 5 #&gt; [1] FALSE 6 &gt;= 5 #&gt; [1] TRUE 5 &lt;= 5 #&gt; [1] TRUE When used on our object numbers it will return 10 values (since numbers is 10 elements long) with a TRUE if the condition is true for the element and FALSE otherwise. Let’s run numbers &gt; 3. We expect the first 3 values to be FALSE as 1, 2, and 3 are not larger than 3. numbers &gt; 3 #&gt; [1] FALSE FALSE FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE 2.4.5 Combining conditional statements - or, and In many cases when you are subsetting you will want to subset based on more than one condition. For example, let’s say you have crime data from every state between 1960 and 2017. Your research question is “did Colorado’s marijuana legalization affect crime in the state?” In that case you want only data from Colorado. Since legalization began in January 2014, you wouldn’t need every year, only years some period of time before and after legalization to be able to measure its effect. So you would need to subset based on the state and the year. To make conditional statements with multiple conditions we use | for “or” and &amp; for “and”. Condition 1 | Condition 2 2 == 3 | 2 &gt; 1 #&gt; [1] TRUE As it sounds, when using | as long as at least one condition is true (we can include as many conditions as we like) it will return TRUE. Condition 1 &amp; Condition 2 2 == 3 &amp; 2 &gt; 1 #&gt; [1] FALSE For &amp;, all of the conditions must be true. If even one condition is not true it will return FALSE. 2.5 Subsetting a data.frame Earlier we were using a simple vector (collection of values). In this class - and in your own work - you will usually work on an entire data set. These generally come in the form called a “data.frame” which you can imagine as being like an Excel file with multiple rows and columns. Let’s load in data from the Uniform Crime Report (UCR), an FBI data set that we’ll work on in a later lesson. This data has crime data every year from 1960-2017 and for nearly every agency in the country. load(&quot;data/offenses_known_yearly_1960_2017.rda&quot;) Let’s peak at the first 6 rows and 6 columns using the square bracket notation [] for data.frames which we’ll explain more below. offenses_known_yearly_1960_2017[1:6, 1:6] #&gt; ori ori9 agency_name state state_abb year #&gt; 1 AK00101 AK0010100 anchorage alaska AK 2017 #&gt; 2 AK00101 AK0010100 anchorage alaska AK 2016 #&gt; 3 AK00101 AK0010100 anchorage alaska AK 2015 #&gt; 4 AK00101 AK0010100 anchorage alaska AK 2014 #&gt; 5 AK00101 AK0010100 anchorage alaska AK 2013 #&gt; 6 AK00101 AK0010100 anchorage alaska AK 2012 The first 6 rows appear to be agency identification info for Anchorage, Alaska from 2017-2012. For good measure let’s check how many rows and columns are in this data. This will give us some guidance on subsetting which we’ll see below. nrow() gives us the number of rows and ncol() gives us the number of columns. nrow(offenses_known_yearly_1960_2017) #&gt; [1] 959010 ncol(offenses_known_yearly_1960_2017) #&gt; [1] 159 This is a large file with 159 columns and nearly a million rows. Normally we wouldn’t want to print out the names of all 159 columns but let’s do this here as we want to know the variables available to subset. names(offenses_known_yearly_1960_2017) #&gt; [1] &quot;ori&quot; &quot;ori9&quot; #&gt; [3] &quot;agency_name&quot; &quot;state&quot; #&gt; [5] &quot;state_abb&quot; &quot;year&quot; #&gt; [7] &quot;number_of_months_reported&quot; &quot;fips_state_code&quot; #&gt; [9] &quot;fips_county_code&quot; &quot;fips_state_county_code&quot; #&gt; [11] &quot;fips_place_code&quot; &quot;fips_state_place_code&quot; #&gt; [13] &quot;agency_type&quot; &quot;agency_subtype_1&quot; #&gt; [15] &quot;agency_subtype_2&quot; &quot;crosswalk_agency_name&quot; #&gt; [17] &quot;census_name&quot; &quot;population&quot; #&gt; [19] &quot;population_group&quot; &quot;country_division&quot; #&gt; [21] &quot;juvenile_age&quot; &quot;core_city_indication&quot; #&gt; [23] &quot;last_update&quot; &quot;fbi_field_office&quot; #&gt; [25] &quot;followup_indication&quot; &quot;zip_code&quot; #&gt; [27] &quot;covered_by_ori&quot; &quot;agency_count&quot; #&gt; [29] &quot;date_of_last_update&quot; &quot;month_included_in&quot; #&gt; [31] &quot;special_mailing_group&quot; &quot;special_mailing_address&quot; #&gt; [33] &quot;first_line_of_mailing_address&quot; &quot;second_line_of_mailing_address&quot; #&gt; [35] &quot;third_line_of_mailing_address&quot; &quot;fourth_line_of_mailing_address&quot; #&gt; [37] &quot;officers_killed_by_felony&quot; &quot;officers_killed_by_accident&quot; #&gt; [39] &quot;officers_assaulted&quot; &quot;actual_murder&quot; #&gt; [41] &quot;actual_manslaughter&quot; &quot;actual_rape_total&quot; #&gt; [43] &quot;actual_rape_by_force&quot; &quot;actual_rape_attempted&quot; #&gt; [45] &quot;actual_robbery_total&quot; &quot;actual_robbery_with_a_gun&quot; #&gt; [47] &quot;actual_robbery_with_a_knife&quot; &quot;actual_robbery_other_weapon&quot; #&gt; [49] &quot;actual_robbery_unarmed&quot; &quot;actual_assault_total&quot; #&gt; [51] &quot;actual_assault_with_a_gun&quot; &quot;actual_assault_with_a_knife&quot; #&gt; [53] &quot;actual_assault_other_weapon&quot; &quot;actual_assault_unarmed&quot; #&gt; [55] &quot;actual_assault_simple&quot; &quot;actual_burg_total&quot; #&gt; [57] &quot;actual_burg_force_entry&quot; &quot;actual_burg_nonforce_entry&quot; #&gt; [59] &quot;actual_burg_attempted&quot; &quot;actual_theft_total&quot; #&gt; [61] &quot;actual_mtr_veh_theft_total&quot; &quot;actual_mtr_veh_theft_car&quot; #&gt; [63] &quot;actual_mtr_veh_theft_truck&quot; &quot;actual_mtr_veh_theft_other&quot; #&gt; [65] &quot;actual_all_crimes&quot; &quot;actual_assault_aggravated&quot; #&gt; [67] &quot;actual_index_violent&quot; &quot;actual_index_property&quot; #&gt; [69] &quot;actual_index_total&quot; &quot;tot_clr_murder&quot; #&gt; [71] &quot;tot_clr_manslaughter&quot; &quot;tot_clr_rape_total&quot; #&gt; [73] &quot;tot_clr_rape_by_force&quot; &quot;tot_clr_rape_attempted&quot; #&gt; [75] &quot;tot_clr_robbery_total&quot; &quot;tot_clr_robbery_with_a_gun&quot; #&gt; [77] &quot;tot_clr_robbery_with_a_knife&quot; &quot;tot_clr_robbery_other_weapon&quot; #&gt; [79] &quot;tot_clr_robbery_unarmed&quot; &quot;tot_clr_assault_total&quot; #&gt; [81] &quot;tot_clr_assault_with_a_gun&quot; &quot;tot_clr_assault_with_a_knife&quot; #&gt; [83] &quot;tot_clr_assault_other_weapon&quot; &quot;tot_clr_assault_unarmed&quot; #&gt; [85] &quot;tot_clr_assault_simple&quot; &quot;tot_clr_burg_total&quot; #&gt; [87] &quot;tot_clr_burg_force_entry&quot; &quot;tot_clr_burg_nonforce_entry&quot; #&gt; [89] &quot;tot_clr_burg_attempted&quot; &quot;tot_clr_theft_total&quot; #&gt; [91] &quot;tot_clr_mtr_veh_theft_total&quot; &quot;tot_clr_mtr_veh_theft_car&quot; #&gt; [93] &quot;tot_clr_mtr_veh_theft_truck&quot; &quot;tot_clr_mtr_veh_theft_other&quot; #&gt; [95] &quot;tot_clr_all_crimes&quot; &quot;tot_clr_assault_aggravated&quot; #&gt; [97] &quot;tot_clr_index_violent&quot; &quot;tot_clr_index_property&quot; #&gt; [99] &quot;tot_clr_index_total&quot; &quot;clr_18_murder&quot; #&gt; [101] &quot;clr_18_manslaughter&quot; &quot;clr_18_rape_total&quot; #&gt; [103] &quot;clr_18_rape_by_force&quot; &quot;clr_18_rape_attempted&quot; #&gt; [105] &quot;clr_18_robbery_total&quot; &quot;clr_18_robbery_with_a_gun&quot; #&gt; [107] &quot;clr_18_robbery_with_a_knife&quot; &quot;clr_18_robbery_other_weapon&quot; #&gt; [109] &quot;clr_18_robbery_unarmed&quot; &quot;clr_18_assault_total&quot; #&gt; [111] &quot;clr_18_assault_with_a_gun&quot; &quot;clr_18_assault_with_a_knife&quot; #&gt; [113] &quot;clr_18_assault_other_weapon&quot; &quot;clr_18_assault_unarmed&quot; #&gt; [115] &quot;clr_18_assault_simple&quot; &quot;clr_18_burg_total&quot; #&gt; [117] &quot;clr_18_burg_force_entry&quot; &quot;clr_18_burg_nonforce_entry&quot; #&gt; [119] &quot;clr_18_burg_attempted&quot; &quot;clr_18_theft_total&quot; #&gt; [121] &quot;clr_18_mtr_veh_theft_total&quot; &quot;clr_18_mtr_veh_theft_car&quot; #&gt; [123] &quot;clr_18_mtr_veh_theft_truck&quot; &quot;clr_18_mtr_veh_theft_other&quot; #&gt; [125] &quot;clr_18_all_crimes&quot; &quot;clr_18_assault_aggravated&quot; #&gt; [127] &quot;clr_18_index_violent&quot; &quot;clr_18_index_property&quot; #&gt; [129] &quot;clr_18_index_total&quot; &quot;unfound_murder&quot; #&gt; [131] &quot;unfound_manslaughter&quot; &quot;unfound_rape_total&quot; #&gt; [133] &quot;unfound_rape_by_force&quot; &quot;unfound_rape_attempted&quot; #&gt; [135] &quot;unfound_robbery_total&quot; &quot;unfound_robbery_with_a_gun&quot; #&gt; [137] &quot;unfound_robbery_with_a_knife&quot; &quot;unfound_robbery_other_weapon&quot; #&gt; [139] &quot;unfound_robbery_unarmed&quot; &quot;unfound_assault_total&quot; #&gt; [141] &quot;unfound_assault_with_a_gun&quot; &quot;unfound_assault_with_a_knife&quot; #&gt; [143] &quot;unfound_assault_other_weapon&quot; &quot;unfound_assault_unarmed&quot; #&gt; [145] &quot;unfound_assault_simple&quot; &quot;unfound_burg_total&quot; #&gt; [147] &quot;unfound_burg_force_entry&quot; &quot;unfound_burg_nonforce_entry&quot; #&gt; [149] &quot;unfound_burg_attempted&quot; &quot;unfound_theft_total&quot; #&gt; [151] &quot;unfound_mtr_veh_theft_total&quot; &quot;unfound_mtr_veh_theft_car&quot; #&gt; [153] &quot;unfound_mtr_veh_theft_truck&quot; &quot;unfound_mtr_veh_theft_other&quot; #&gt; [155] &quot;unfound_all_crimes&quot; &quot;unfound_assault_aggravated&quot; #&gt; [157] &quot;unfound_index_violent&quot; &quot;unfound_index_property&quot; #&gt; [159] &quot;unfound_index_total&quot; Now let’s discuss how to subset this data into a smaller data set to answer a specific question. Let’s subset the data to answer our above question of “did Colorado’s marijuana legalization affect crime in the state?” Like mentioned above, we need data just from Colorado and just for years around the legalization year - we can do 2011-2017 for simplicity. We also don’t need all 159 columns in the current data. Let’s say we’re only interested in if murder changes. We’d need the column called actual_murder, the state column (as a check to make sure we subset only Colorado), the year column, the population column, the ori column, and the agency_name column (a real analysis would likely grab geographic variables too to see if changes depended on location but here we’re just using it as an example). The last two columns - ori and agency_name - aren’t strictly necessary but would be useful if checking if an agency’s values are reasonable when checking for outliers, a step we won’t do here. Before explaining how to subset from a data.frame, let’s write pseudocode (essentially a description of what we are going to do that is readable to people but isn’t real code) for our subset. We want Only rows where the state equals Colorado Only rows where the year is 2011-2017 Only the following columns: actual_murder, state, year, population, ori, agency_name 2.5.1 Select specific columns The way to select a specific column in R is called the dollar sign notation. data$column We write the data name followed by a $ and then the column name. Make sure there are no spaces, quotes, or misspellings (or capitalization issues). Just the data$column exactly as it is spelled. Since we are referring to data already read into R, there should not be any quotes for either the data or the column name. We can do this for the column agency_name in our UCR data. If we wrote this in the console it would print out every single row in the column. Because this data is large (nearly a million rows), I am going to wrap this in head() so it only displays the first 6 rows of the column rather than printing the entire column. head(offenses_known_yearly_1960_2017$agency_name) #&gt; [1] &quot;anchorage&quot; &quot;anchorage&quot; &quot;anchorage&quot; &quot;anchorage&quot; &quot;anchorage&quot; &quot;anchorage&quot; They’re all the same name because Anchorage Police reported many times and are in the data set multiple times. Let’s look at the column actual_murder which shows the annual number of murders in that agency. head(offenses_known_yearly_1960_2017$actual_murder) #&gt; [1] 27 28 26 12 14 15 One hint is to write out the data set name in the console and hit the Tab key. Wait a couple of seconds and a popup will appear listing every column in the data set. You can scroll through this and then hit enter to select that column. 2.5.2 Select specific rows In the earlier examples we used square bracket notation [] and just put a number or several numbers in the []. When dealing with data.frames, however, you need an extra step to tell R which columns to keep. The syntax in the square bracket is [row, column] As we did earlier, we start in the square bracket by saying which row we want. Now, since we also have to consider the columns, we need to tell it the number or name (in a vector using c() if more than one name and putting column names in quotes) of the column or columns we want. The exception to this is when we use the dollar sign notation to select a single column. In that case we don’t need a comma (and indeed it will give us an error!). Let’s see a few examples and then explain why this works the way it does. offenses_known_yearly_1960_2017[1, 1] #&gt; [1] &quot;AK00101&quot; If we input multiple numbers we can get multiple rows and columns. offenses_known_yearly_1960_2017[1:6, 1:6] #&gt; ori ori9 agency_name state state_abb year #&gt; 1 AK00101 AK0010100 anchorage alaska AK 2017 #&gt; 2 AK00101 AK0010100 anchorage alaska AK 2016 #&gt; 3 AK00101 AK0010100 anchorage alaska AK 2015 #&gt; 4 AK00101 AK0010100 anchorage alaska AK 2014 #&gt; 5 AK00101 AK0010100 anchorage alaska AK 2013 #&gt; 6 AK00101 AK0010100 anchorage alaska AK 2012 The column section also accepts a vector of the names of the columns. These names must be spelled correctly and in quotes. offenses_known_yearly_1960_2017[1:6, c(&quot;ori&quot;, &quot;year&quot;)] #&gt; ori year #&gt; 1 AK00101 2017 #&gt; 2 AK00101 2016 #&gt; 3 AK00101 2015 #&gt; 4 AK00101 2014 #&gt; 5 AK00101 2013 #&gt; 6 AK00101 2012 In cases where we want every row or every column, we just don’t put a number. By default R will return every row/column if you don’t specify which ones you want. However you will still need to include the comma. Here is every column in the first row. offenses_known_yearly_1960_2017[1, ] #&gt; ori ori9 agency_name state state_abb year #&gt; 1 AK00101 AK0010100 anchorage alaska AK 2017 #&gt; number_of_months_reported fips_state_code fips_county_code #&gt; 1 12 02 020 #&gt; fips_state_county_code fips_place_code fips_state_place_code #&gt; 1 02020 03000 0203000 #&gt; agency_type agency_subtype_1 agency_subtype_2 #&gt; 1 local police department not applicable not applicable #&gt; crosswalk_agency_name census_name population #&gt; 1 anchorage police department anchorage municipality 296188 #&gt; population_group country_division juvenile_age #&gt; 1 city 250,000 thru 499,999 pacific 18 #&gt; core_city_indication last_update fbi_field_office followup_indication #&gt; 1 core city of msa 42094 3030 send a follow-up #&gt; zip_code covered_by_ori agency_count date_of_last_update #&gt; 1 99507 &lt;NA&gt; 1 120717 #&gt; month_included_in #&gt; 1 0 #&gt; special_mailing_group #&gt; 1 the agency is a contributor but not on the mailing list,they are not sent forms. #&gt; special_mailing_address first_line_of_mailing_address #&gt; 1 not a special mailing address chief of police #&gt; second_line_of_mailing_address third_line_of_mailing_address #&gt; 1 anchorage police department 4501 elmore rd #&gt; fourth_line_of_mailing_address officers_killed_by_felony #&gt; 1 anchorage, ak 0 #&gt; officers_killed_by_accident officers_assaulted actual_murder #&gt; 1 0 426 27 #&gt; actual_manslaughter actual_rape_total actual_rape_by_force #&gt; 1 3 391 350 #&gt; actual_rape_attempted actual_robbery_total actual_robbery_with_a_gun #&gt; 1 41 778 249 #&gt; actual_robbery_with_a_knife actual_robbery_other_weapon #&gt; 1 69 116 #&gt; actual_robbery_unarmed actual_assault_total actual_assault_with_a_gun #&gt; 1 344 6448 621 #&gt; actual_assault_with_a_knife actual_assault_other_weapon #&gt; 1 392 704 #&gt; actual_assault_unarmed actual_assault_simple actual_burg_total #&gt; 1 651 4080 2216 #&gt; actual_burg_force_entry actual_burg_nonforce_entry actual_burg_attempted #&gt; 1 1537 521 158 #&gt; actual_theft_total actual_mtr_veh_theft_total actual_mtr_veh_theft_car #&gt; 1 10721 3104 1934 #&gt; actual_mtr_veh_theft_truck actual_mtr_veh_theft_other actual_all_crimes #&gt; 1 971 199 23688 #&gt; actual_assault_aggravated actual_index_violent actual_index_property #&gt; 1 2368 3564 16041 #&gt; actual_index_total tot_clr_murder tot_clr_manslaughter #&gt; 1 19605 28 0 #&gt; tot_clr_rape_total tot_clr_rape_by_force tot_clr_rape_attempted #&gt; 1 58 48 10 #&gt; tot_clr_robbery_total tot_clr_robbery_with_a_gun #&gt; 1 216 47 #&gt; tot_clr_robbery_with_a_knife tot_clr_robbery_other_weapon #&gt; 1 22 37 #&gt; tot_clr_robbery_unarmed tot_clr_assault_total tot_clr_assault_with_a_gun #&gt; 1 110 3576 249 #&gt; tot_clr_assault_with_a_knife tot_clr_assault_other_weapon #&gt; 1 250 413 #&gt; tot_clr_assault_unarmed tot_clr_assault_simple tot_clr_burg_total #&gt; 1 436 2228 250 #&gt; tot_clr_burg_force_entry tot_clr_burg_nonforce_entry #&gt; 1 129 114 #&gt; tot_clr_burg_attempted tot_clr_theft_total tot_clr_mtr_veh_theft_total #&gt; 1 7 1358 497 #&gt; tot_clr_mtr_veh_theft_car tot_clr_mtr_veh_theft_truck #&gt; 1 335 145 #&gt; tot_clr_mtr_veh_theft_other tot_clr_all_crimes #&gt; 1 17 5983 #&gt; tot_clr_assault_aggravated tot_clr_index_violent tot_clr_index_property #&gt; 1 1348 1650 2105 #&gt; tot_clr_index_total clr_18_murder clr_18_manslaughter clr_18_rape_total #&gt; 1 3755 1 0 5 #&gt; clr_18_rape_by_force clr_18_rape_attempted clr_18_robbery_total #&gt; 1 4 1 9 #&gt; clr_18_robbery_with_a_gun clr_18_robbery_with_a_knife #&gt; 1 1 1 #&gt; clr_18_robbery_other_weapon clr_18_robbery_unarmed clr_18_assault_total #&gt; 1 0 7 277 #&gt; clr_18_assault_with_a_gun clr_18_assault_with_a_knife #&gt; 1 37 17 #&gt; clr_18_assault_other_weapon clr_18_assault_unarmed clr_18_assault_simple #&gt; 1 19 17 187 #&gt; clr_18_burg_total clr_18_burg_force_entry clr_18_burg_nonforce_entry #&gt; 1 8 4 2 #&gt; clr_18_burg_attempted clr_18_theft_total clr_18_mtr_veh_theft_total #&gt; 1 2 107 22 #&gt; clr_18_mtr_veh_theft_car clr_18_mtr_veh_theft_truck #&gt; 1 17 2 #&gt; clr_18_mtr_veh_theft_other clr_18_all_crimes clr_18_assault_aggravated #&gt; 1 3 429 90 #&gt; clr_18_index_violent clr_18_index_property clr_18_index_total #&gt; 1 105 137 242 #&gt; unfound_murder unfound_manslaughter unfound_rape_total #&gt; 1 5 0 16 #&gt; unfound_rape_by_force unfound_rape_attempted unfound_robbery_total #&gt; 1 16 0 1 #&gt; unfound_robbery_with_a_gun unfound_robbery_with_a_knife #&gt; 1 1 0 #&gt; unfound_robbery_other_weapon unfound_robbery_unarmed #&gt; 1 0 0 #&gt; unfound_assault_total unfound_assault_with_a_gun #&gt; 1 6 0 #&gt; unfound_assault_with_a_knife unfound_assault_other_weapon #&gt; 1 1 1 #&gt; unfound_assault_unarmed unfound_assault_simple unfound_burg_total #&gt; 1 0 4 0 #&gt; unfound_burg_force_entry unfound_burg_nonforce_entry #&gt; 1 0 0 #&gt; unfound_burg_attempted unfound_theft_total unfound_mtr_veh_theft_total #&gt; 1 0 40 70 #&gt; unfound_mtr_veh_theft_car unfound_mtr_veh_theft_truck #&gt; 1 53 16 #&gt; unfound_mtr_veh_theft_other unfound_all_crimes #&gt; 1 1 138 #&gt; unfound_assault_aggravated unfound_index_violent unfound_index_property #&gt; 1 2 24 110 #&gt; unfound_index_total #&gt; 1 134 Since there are 159 columns in our data, normally we’d want to avoid printing out all of them. And in most cases we would save the output of subsets to a new object to be used later rather than just printing the output in the console. What happens if we forget the comma? If we put in numbers for both rows and columns but don’t include a comma between them it will have an error. offenses_known_yearly_1960_2017[1 1] #&gt; Error: &lt;text&gt;:1:35: unexpected numeric constant #&gt; 1: offenses_known_yearly_1960_2017[1 1 #&gt; ^ If we only put in a single number and no comma, it will return the column that matches that number. Here we have number 1 and it will return the first column. We’ll wrap it in head() so it doesn’t print out a million rows. head(offenses_known_yearly_1960_2017[1]) #&gt; ori #&gt; 1 AK00101 #&gt; 2 AK00101 #&gt; 3 AK00101 #&gt; 4 AK00101 #&gt; 5 AK00101 #&gt; 6 AK00101 Since R thinks you are requesting a column, and we only have 159 columns in the data, asking for any number above 159 will return an error. head(offenses_known_yearly_1960_2017[1000]) #&gt; Error in `[.data.frame`(offenses_known_yearly_1960_2017, 1000): undefined columns selected If you already specify a column using dollar sign notation $, you do not need to indicate any column in the square brackets[]. All you need to do is say which row or rows you want. offenses_known_yearly_1960_2017$agency_name[15] #&gt; [1] &quot;anchorage&quot; So make sure when you want a row from a data.frame you always include the comma! 2.5.3 Subset Colorado data Finally we have the tools to subset our UCR data to just be Colorado from 2011-2017. There are three conditional statements we need to make, two for rows and one for columns. Only rows where the state equals Colorado Only rows where the year is 2011-2017 Only the following columns: actual_murder, state, year, population, ori, agency_name We could use the &amp; operator to say rows must meet condition 1 and condition 2. Since this is an intro lesson we will do them as two separate conditional statements. For the first step we want to get all rows in the data where the state equals “colorado” (in this data all state names are lowercase). And at this point we want keep all columns in the data. So let’s make a new object called colorado to save the result of this subset. Remember that we want to put the object to the left of the [] (and touching the []) to make sure it returns the data. Just having the conditional statement will only return TRUE or FALSE values. Since we want all columns we don’t need to put anything after the comma (but we must include the comma!). colorado &lt;- offenses_known_yearly_1960_2017[offenses_known_yearly_1960_2017$state == &quot;colorado&quot;, ] Now we want to get all the rows where the year is 2011-2017. Since we want to check if the year is one of the years 2011-2017, we will use %in% and put the years in a vector 2011:2017. This time our primary data set is colorado, not offenses_known_yearly_1960_2017 since colorado has already subsetted to just the state we want. This is how subsetting generally works. You take a large data set, subset it to a smaller one and continue to subset the smaller one to only the data you want. colorado &lt;- colorado[colorado$year %in% 2011:2017, ] Finally we want the columns stated above and to keep every row in the current data. Since the format is [row, column] in this case we keep the “row” part blank to indicate that we want every row. colorado &lt;- colorado[ , c(&quot;actual_murder&quot;, &quot;state&quot;, &quot;year&quot;, &quot;population&quot;, &quot;ori&quot;, &quot;agency_name&quot;)] We can do a quick check using the unique() function. The unique() prints all the unique values in a category, such as a column. We will use it on the state and year columns to make sure only the values that we want are present. unique(colorado$state) #&gt; [1] &quot;colorado&quot; unique(colorado$year) #&gt; [1] 2017 2016 2015 2014 2013 2012 2011 The only state is Colorado and the only years are 2011-2017 so our subset worked! This data shows the number of murders in each agency. We want to look at state trends so in Section 3.3 we will sum up all the murders per year and see if marijuana legalization affected it. "],
["explore.html", "3 Exploratory data analysis 3.1 Summary and Table 3.2 Graphing 3.3 Aggregating (summaries of groups)", " 3 Exploratory data analysis When you first start working on new data it is important to spend some time getting familiar with the data. This includes understanding how many rows and columns it has, what each row means (is each row an offender? a victim? crime in a city over a day/month/year?, etc.), and what columns it has. Basically you want to know if the data is capable of answering the question you are asking. While not a comprehensive list, the following is a good start for exploratory data analysis of new data sets. What are the units (what does each row represent?)? What variables are available? What time period does it cover? Are there outliers? How many? Are there missing values? How many? For this lesson we will use a data set of FBI Uniform Crime Reporting (UCR) data for 2017. This data includes every agency that reported their data for all 12 months of the year. Throughout this lesson we will look at some summary statistics for the variables we are interested in and make some basic graphs to visualize the data. We’ll return to UCR data in Chapter 17 when focusing on what the UCR is and how to use it. First we need to load the data. Make sure your working directory is set to the folder where the data is. load(&quot;data/ucr2017.rda&quot;) As a first step, let’s see how many rows and columns are in the data, and glance at the first several rows from each column. nrow() and ncol() tell us the number of rows and columns it has, respectively. Like most functions, what you need to do is put the data set name inside the () (exactly as it is spelled without any quotes). nrow(ucr2017) #&gt; [1] 15764 ncol(ucr2017) #&gt; [1] 9 The function head() will print out the first 6 rows of every column in the data. Since we only have 9 columns, we will use this function. Be careful when you have many columns (100+) as printing all of them out makes it read to read. head(ucr2017) #&gt; ori year agency_name state population actual_murder #&gt; 1 AK00101 2017 anchorage alaska 296188 27 #&gt; 2 AK00102 2017 fairbanks alaska 32937 10 #&gt; 3 AK00103 2017 juneau alaska 32344 1 #&gt; 4 AK00104 2017 ketchikan alaska 8230 1 #&gt; 5 AK00105 2017 kodiak alaska 6198 0 #&gt; 6 AK00106 2017 nome alaska 3829 0 #&gt; actual_rape_total actual_robbery_total actual_assault_aggravated #&gt; 1 391 778 2368 #&gt; 2 24 40 131 #&gt; 3 50 46 206 #&gt; 4 19 0 14 #&gt; 5 15 4 41 #&gt; 6 7 0 52 From these results it appears that each row is a single agency’s annual data for 2017 and the columns show the number of crimes for four crime categories included (the full UCR data contains many more crimes which we’ll see in a later lesson). Finally, we can run names() to print out every column name. We can already see every name from head() but this is useful when we have many columns and don’t want to use head(). names(ucr2017) #&gt; [1] &quot;ori&quot; &quot;year&quot; #&gt; [3] &quot;agency_name&quot; &quot;state&quot; #&gt; [5] &quot;population&quot; &quot;actual_murder&quot; #&gt; [7] &quot;actual_rape_total&quot; &quot;actual_robbery_total&quot; #&gt; [9] &quot;actual_assault_aggravated&quot; 3.1 Summary and Table An important function in understanding the data you have is summary() which, as discussed in Section 1.3, provides summary statistics on the numeric columns you have. Let’s take a look at the results before seeing how to do something similar for categorical columns. summary(ucr2017) #&gt; ori year agency_name state #&gt; Length:15764 Min. :2017 Length:15764 Length:15764 #&gt; Class :character 1st Qu.:2017 Class :character Class :character #&gt; Mode :character Median :2017 Mode :character Mode :character #&gt; Mean :2017 #&gt; 3rd Qu.:2017 #&gt; Max. :2017 #&gt; population actual_murder actual_rape_total #&gt; Min. : 0 Min. : 0.000 Min. : -2.000 #&gt; 1st Qu.: 914 1st Qu.: 0.000 1st Qu.: 0.000 #&gt; Median : 4460 Median : 0.000 Median : 1.000 #&gt; Mean : 19872 Mean : 1.069 Mean : 8.262 #&gt; 3rd Qu.: 15390 3rd Qu.: 0.000 3rd Qu.: 5.000 #&gt; Max. :8616333 Max. :653.000 Max. :2455.000 #&gt; actual_robbery_total actual_assault_aggravated #&gt; Min. : -1.00 Min. : -1.00 #&gt; 1st Qu.: 0.00 1st Qu.: 1.00 #&gt; Median : 0.00 Median : 5.00 #&gt; Mean : 19.85 Mean : 49.98 #&gt; 3rd Qu.: 4.00 3rd Qu.: 21.00 #&gt; Max. :13995.00 Max. :29771.00 The table() function returns every unique value in a category and how often that value appears. Unlike summary() we can’t just put the entire data set into the (), we need to specify a single column. To specify a column you use the dollar sign notation which is data$column. For most functions we use to examine the data as a whole, you can do the same for a specific column. head(ucr2017$agency_name) #&gt; [1] &quot;anchorage&quot; &quot;fairbanks&quot; &quot;juneau&quot; &quot;ketchikan&quot; &quot;kodiak&quot; &quot;nome&quot; There are only two columns in our data with categorical values that we can use - year and state so let’s use table() on both of them. The columns ori and agency_name are also categorical but as each row of data has a unique ORI and name, running table() on those columns would not be helpful. table(ucr2017$year) #&gt; #&gt; 2017 #&gt; 15764 We can see that every year in our data is 2017, as expected based on the data name. year is a numerical column so why can we use table() on it? R doesn’t differentiate between numbers and characters when seeing how often each value appears. If we ran table() on the column “actual_murder” it would tell us how many times each unique value in the column appeared in the data. That wouldn’t be very useful as we don’t really care how many times an agency has 7 murders, for example (though looking for how often a numeric column has the value 0 can be helpful in finding likely erroneous data). As numeric variables often have many more unique values than character variables, it also leads to many values being printed, making it harder to understand. For columns where the number of categories is important to us, such as years, states, neighborhoods, we should use table(). table(ucr2017$state) #&gt; #&gt; alabama alaska arizona #&gt; 305 32 107 #&gt; arkansas california colorado #&gt; 273 732 213 #&gt; connecticut delaware district of columbia #&gt; 107 63 3 #&gt; florida georgia guam #&gt; 603 522 1 #&gt; hawaii idaho illinois #&gt; 4 95 696 #&gt; indiana iowa kansas #&gt; 247 216 309 #&gt; kentucky louisiana maine #&gt; 352 192 135 #&gt; maryland massachusetts michigan #&gt; 152 346 625 #&gt; minnesota mississippi missouri #&gt; 397 71 580 #&gt; montana nebraska nevada #&gt; 108 225 59 #&gt; new hampshire new jersey new mexico #&gt; 176 576 116 #&gt; new york north carolina north dakota #&gt; 532 310 108 #&gt; ohio oklahoma oregon #&gt; 532 409 172 #&gt; pennsylvania rhode island south carolina #&gt; 1473 49 427 #&gt; south dakota tennessee texas #&gt; 92 466 999 #&gt; utah vermont virginia #&gt; 125 85 407 #&gt; washington west virginia wisconsin #&gt; 250 200 433 #&gt; wyoming #&gt; 57 This shows us how many times each state is present in the data. States with a larger population tend to appear more often, this makes sense as those states have more agencies to report. Right now the results are in alphabetical order, but when knowing how frequently something appears we usually want it order by frequency. We can use the sort() function to order the results from table(). Just put the entire table() function inside of the () in sort(). sort(table(ucr2017$state)) #&gt; #&gt; guam district of columbia hawaii #&gt; 1 3 4 #&gt; alaska rhode island wyoming #&gt; 32 49 57 #&gt; nevada delaware mississippi #&gt; 59 63 71 #&gt; vermont south dakota idaho #&gt; 85 92 95 #&gt; arizona connecticut montana #&gt; 107 107 108 #&gt; north dakota new mexico utah #&gt; 108 116 125 #&gt; maine maryland oregon #&gt; 135 152 172 #&gt; new hampshire louisiana west virginia #&gt; 176 192 200 #&gt; colorado iowa nebraska #&gt; 213 216 225 #&gt; indiana washington arkansas #&gt; 247 250 273 #&gt; alabama kansas north carolina #&gt; 305 309 310 #&gt; massachusetts kentucky minnesota #&gt; 346 352 397 #&gt; virginia oklahoma south carolina #&gt; 407 409 427 #&gt; wisconsin tennessee georgia #&gt; 433 466 522 #&gt; new york ohio new jersey #&gt; 532 532 576 #&gt; missouri florida michigan #&gt; 580 603 625 #&gt; illinois california texas #&gt; 696 732 999 #&gt; pennsylvania #&gt; 1473 And if we want to sort it in decreasing order of frequency, we can use the parameter decreasing in sort() and set it to TRUE. A parameter is just an option used in an R function to change the way the function is used or what output it gives. Almost all functions have these parameters and they are useful if you don’t want to use the default setting in the function. This parameter, decreasing changes the sort() output to print from largest to smallest. By default this parameter is set to FALSE and here we say it is equal to TRUE. sort(table(ucr2017$state), decreasing = TRUE) #&gt; #&gt; pennsylvania texas california #&gt; 1473 999 732 #&gt; illinois michigan florida #&gt; 696 625 603 #&gt; missouri new jersey new york #&gt; 580 576 532 #&gt; ohio georgia tennessee #&gt; 532 522 466 #&gt; wisconsin south carolina oklahoma #&gt; 433 427 409 #&gt; virginia minnesota kentucky #&gt; 407 397 352 #&gt; massachusetts north carolina kansas #&gt; 346 310 309 #&gt; alabama arkansas washington #&gt; 305 273 250 #&gt; indiana nebraska iowa #&gt; 247 225 216 #&gt; colorado west virginia louisiana #&gt; 213 200 192 #&gt; new hampshire oregon maryland #&gt; 176 172 152 #&gt; maine utah new mexico #&gt; 135 125 116 #&gt; montana north dakota arizona #&gt; 108 108 107 #&gt; connecticut idaho south dakota #&gt; 107 95 92 #&gt; vermont mississippi delaware #&gt; 85 71 63 #&gt; nevada wyoming rhode island #&gt; 59 57 49 #&gt; alaska hawaii district of columbia #&gt; 32 4 3 #&gt; guam #&gt; 1 3.2 Graphing We often want to make quick plots of our data to get a visual understanding of the data. We will learn a more different way to make graphs in Chapter 6 but for now let’s use the function plot(). Let’s make a few scatterplots showing the relationship between two variables. With plot() the syntax (how you write the code) is plot(x_axis_variable, y_axis_variable). So all we need to do is give it the variable for the x- and y-axis. Each dot will represent a single agency (a single row in our data). plot(ucr2017$actual_murder, ucr2017$actual_robbery_total) Above we are telling R to plot the number of murders on the x-axis and the number of robberies on the y-axis. This shows the relationship between a city’s number of murders and number of robberies. We can see that there is a relationship where more murders is correlated with more robberies. However, there are a huge number of agencies in the bottom-left corner which have very few murders or robberies. This makes sense as - as we see in the summary() above - most agencies are small, with the median population under 5,000 people. To try to avoid that clump of small agencies at the bottom, let’s make a new data set of only agencies with a population over 1 million. We will use the square bracket [] notation to subset. Remember it is [rows, columns] where we either say exactly which rows or columns we want or give a conditional statement and it’ll return only those that meet the condition. We will use the condition that we only want rows where the population is over 1 million. [ucr2017$population &gt; 1000000, ] Now our row conditional is done. We want all the columns in the data so leave the section after the comma empty (don’t forget to include that comma!). Now our square bracket notation is done but we need to put it directly to the right of our data so that we take the rows from the right data set. ucr2017[ucr2017$population &gt; 1000000, ] And let’s save the results in a new object called “ucr2017_big_cities”. ucr2017_big_cities &lt;- ucr2017[ucr2017$population &gt; 1000000, ] Now we can do the same graph as above but using this new data set. plot(ucr2017_big_cities$actual_murder, ucr2017_big_cities$actual_robbery_total) The problem is somewhat solved. There is still a small clumping of agencies with few robberies or aggravated assaults but the issue is much better. And interestingly the trend is similar with this small subset of data as with all agencies included. To make our graph look better, we can add labels for the axes and a title (there are many options for changing the appears of this graph, we will just use these three). xlab - X-axis label ylab - Y-axis label main - Graph title Like all parameters, we add them in the () of plot() and separate each parameter by a comma. Since we are adding text to write in the plot, all of these parameter inputs must be in quotes. plot(ucr2017_big_cities$actual_murder, ucr2017_big_cities$actual_robbery_total, xlab = &quot;Murder&quot;, ylab = &quot;Robberies&quot;, main = &quot;Relationship between murder and robbery&quot;) 3.3 Aggregating (summaries of groups) Right now we have the number of crimes in each agency. For many policy analyses we’d be looking at the effect on the state as a whole, rather than at the agency-level. If we wanted to do this in our data we need to aggregate up to the state level. What the aggregate() function does is group values at some higher level than they currently are (e.g. from agency to state, from day to month, from city street to city neighborhood) and then do some mathematical operation of our choosing (in our case usually sum) to that group. In Section 2.5.3 we started to see if marijuana legalization affected murder in Colorado. We subsetted the data to only include agencies in Colorado from 2011-2017. Now we can continue to answer the question by aggregating to the state-level to see the total number of murders per year. Let’s think about how our data are and how we would (theoretically, before we write any code) find that out. Our data is a single row for each agency and we have a column indicating the year the agency reported. So how would be find out how many murders happened in Colorado for each year? Well, first we take all the agencies in 2011 (the first year available) and add up the murders for all agencies that reported that year. Then take all the rows in 2012 and add up their murders. And so on for all the years. That is essentially what aggregate() does. It takes each row and groups them according to the category we specify and then adds up (or does the mathematical operator we specify) each value in each group. The syntax (how we write the code) is as follows aggregate(numerical_column ~ category_column, FUN = math, data = data_set) The numerical column is the column that we are doing the mathematical operation (sum, mean, median) on. The category column is the one we are using to group (e.g. state, year). Note the ~ between the numerical and category columns. Unlike most functions where we specify a column name, in aggregate() we do not use quotes for the columns. FUN is the parameter where we tell aggregate() which mathematical operator to use. Note that FUN is all in capital letters. That is just how this function calls the parameter so we need to make sure we write it in capital letters. data_set is the name of the data set we are aggregating. In Chapter 2 we wanted to see if marijuana legalization in Colorado affected murder. To do this we need to have data showing the number of murders for a few years before and after legalization. We have subsetted UCR data to get all agencies in Colorado for the 3 years before and after 2014, the year of legalization. Let’s reload that data and rerun the subsetting code. load(&quot;data/offenses_known_yearly_1960_2017.rda&quot;) colorado &lt;- offenses_known_yearly_1960_2017[offenses_known_yearly_1960_2017$state == &quot;colorado&quot;, ] colorado &lt;- colorado[colorado$year %in% 2011:2017, ] colorado &lt;- colorado[ , c(&quot;actual_murder&quot;, &quot;state&quot;, &quot;year&quot;, &quot;population&quot;, &quot;ori&quot;, &quot;agency_name&quot;)] Now we can run aggregate() to get the number of murders per year. aggregate(actual_murder ~ year, FUN = sum, data = colorado) year actual_murder 1 2011 154 2 2012 163 3 2013 172 4 2014 148 5 2015 173 6 2016 203 7 2017 218 If we had more grouping categories would could add them by literally using + and then writing the next grouping variable name. In our case since all agencies are in the same state it doesn’t actually change the results. aggregate(actual_murder ~ year + state, FUN = sum, data = colorado) year state actual_murder 1 2011 colorado 154 2 2012 colorado 163 3 2013 colorado 172 4 2014 colorado 148 5 2015 colorado 173 6 2016 colorado 203 7 2017 colorado 218 If we want to aggregate multiple numeric columns we would use the cbind() function which binds together columns. Many times we care more about the crime rate (per 100,000 population usually) than the total number of crimes as a larger population tends to also mean more crime. We can aggregate both the population column and the actual_murder column to get totals for each year which we can use to make a murder rate column. Since we need the output of this aggregate saved somewhere to make that column, let’s call it colorado_agg. colorado_agg &lt;- aggregate(cbind(population, actual_murder) ~ year, FUN = sum, data = colorado) To make the murder rate we simply make a new column, which we can call murder_rate which is the number of murders divided by population multiplied by 100,000. colorado_agg$murder_rate &lt;- colorado_agg$actual_murder / colorado_agg$population * 100000 colorado_agg #&gt; year population actual_murder murder_rate #&gt; 1 2011 5155993 154 2.986816 #&gt; 2 2012 5227884 163 3.117896 #&gt; 3 2013 5308236 172 3.240248 #&gt; 4 2014 5402555 148 2.739445 #&gt; 5 2015 5505856 173 3.142109 #&gt; 6 2016 5590124 203 3.631404 #&gt; 7 2017 5661529 218 3.850550 Now we can see that the total number of murders increased as did the murder rate. So can we conclude that marijuana legalization increases murder? No, all this analysis shows is that the years following marijuana legalization, murders increased in Colorado. But that can be due to many reasons other than marijuana. For a proper analysis you’d need a comparison area that is similar to Colorado prior to legalization (and didn’t legalize marijuana) and see if the murder rates changes following Colorado’s legalization. We can also make a plot of this data showing the murder rate over time. With time-series graphs we want the time variable to be on the x-axis and the numeric variable we are measuring to the on the y-axis. plot(x = colorado_agg$year, y = colorado_agg$murder_rate) By default plot() makes a scatterplot. If we set the parameter type to “l” it will be a line plot. plot(x = colorado_agg$year, y = colorado_agg$murder_rate, type = &quot;l&quot;) We can add some labels and a title to make this graph easier to read. plot(x = colorado_agg$year, y = colorado_agg$murder_rate, type = &quot;l&quot;, xlab = &quot;Year&quot;, ylab = &quot;Murders per 100k Population&quot;, main = &quot;Murder Rate in Colorado, 2011-2017&quot;) "],
["regular-expressions.html", "4 Regular Expressions 4.1 Finding patterns in text with grep() 4.2 Finding and replacing patterns in text with gsub() 4.3 Useful special characters 4.4 Changing capitalization", " 4 Regular Expressions Many word processing programs like Microsoft Word or Google Docs let you search for a pattern - usually a word or phrase - and it will show you where on the page that pattern appears. It also lets you replace that word or phrase with something new. R does the same using the function grep() to search for a pattern and tell you where in the data it appears, and gsub() which lets you search for a pattern and then replace it with a new pattern. grep() - Find gsub() - Find and Replace The grep() function lets you find a pattern in the text and it will return a number saying which element has the pattern (in a data.frame this tells you which row has a match). gsub() lets you input a pattern to find and a pattern to replace it with, just like Find and Replace features elsewhere. You can remember the difference because gsub() has the word “sub” in it and what it does is substitute text with new text. A useful cheat sheet on regular expressions is available here. For this lesson we will use a vector of 50 crime categories. These are all of the crimes in San Francisco Police data. As we’ll see, there are some issues with the crime names that we need to fix. crimes &lt;- c( &quot;Arson&quot;, &quot;Assault&quot;, &quot;Burglary&quot;, &quot;Case Closure&quot;, &quot;Civil Sidewalks&quot;, &quot;Courtesy Report&quot;, &quot;Disorderly Conduct&quot;, &quot;Drug Offense&quot;, &quot;Drug Violation&quot;, &quot;Embezzlement&quot;, &quot;Family Offense&quot;, &quot;Fire Report&quot;, &quot;Forgery And Counterfeiting&quot;, &quot;Fraud&quot;, &quot;Gambling&quot;, &quot;Homicide&quot;, &quot;Human Trafficking (A), Commercial Sex Acts&quot;, &quot;Human Trafficking, Commercial Sex Acts&quot;, &quot;Juvenile Offenses&quot;, &quot;Larceny Theft&quot;, &quot;Liquor Laws&quot;, &quot;Lost Property&quot;, &quot;Malicious Mischief&quot;, &quot;Miscellaneous Investigation&quot;, &quot;Missing Person&quot;, &quot;Motor Vehicle Theft&quot;, &quot;Motor Vehicle Theft?&quot;, &quot;Non-Criminal&quot;, &quot;Offences Against The Family And Children&quot;, &quot;Other&quot;, &quot;Other Miscellaneous&quot;, &quot;Other Offenses&quot;, &quot;Prostitution&quot;, &quot;Rape&quot;, &quot;Recovered Vehicle&quot;, &quot;Robbery&quot;, &quot;Sex Offense&quot;, &quot;Stolen Property&quot;, &quot;Suicide&quot;, &quot;Suspicious&quot;, &quot;Suspicious Occ&quot;, &quot;Traffic Collision&quot;, &quot;Traffic Violation Arrest&quot;, &quot;Vandalism&quot;, &quot;Vehicle Impounded&quot;, &quot;Vehicle Misplaced&quot;, &quot;Warrant&quot;, &quot;Weapons Carrying Etc&quot;, &quot;Weapons Offence&quot;, &quot;Weapons Offense&quot; ) When looking closely at these crimes it is clear that some may overlap in certain categories such as theft, and there are several duplicates with slight differences in spelling. For example the last two crimes are “Weapons Offence” and “Weapons Offense”. These should be the same crime but the first one spelled “offense” wrong. And take a look at “motor vehicle theft”. There are two crimes here because one of them adds a question mark at the end for some reason. 4.1 Finding patterns in text with grep() We’ll start with grep() which allows us to search a vector of data (in R, columns in a data.frame operate the same as a vector) and find where there is a match for the pattern we want to look for. The syntax for grep() is grep(\"pattern\", data) Where pattern is the pattern you are searching for, such as “a” if you want to find all values with the letter a. The pattern must always be in quotes. data is a vector of strings (such as crimes we made above or a column in a data.frame) that you are searching in to find the pattern. The output of this function is a number which says which element(s) in the vector the pattern was found in. If it returns, for example, the numbers 1 and 3 you know that the first and third element in your vector has the pattern - and no other elements do. It is essentially returning the index where the conditional statement “is this pattern present” is true. So since our data is crimes our grep() function will be grep(\"\", crimes). What we put in the \"\" is the pattern we want to search for. Let’s start with the letter “a”. grep(&quot;a&quot;, crimes) #&gt; [1] 2 3 4 5 9 11 14 15 17 18 20 21 23 24 28 29 31 34 42 43 44 46 47 #&gt; [24] 48 49 50 It gives us a bunch of numbers where the letter “a” is present in that element of crimes. What this is useful for is subsetting. We can use grep() to find all values that match a pattern we want and subset to keep just those values. crimes[grep(&quot;a&quot;, crimes)] #&gt; [1] &quot;Assault&quot; #&gt; [2] &quot;Burglary&quot; #&gt; [3] &quot;Case Closure&quot; #&gt; [4] &quot;Civil Sidewalks&quot; #&gt; [5] &quot;Drug Violation&quot; #&gt; [6] &quot;Family Offense&quot; #&gt; [7] &quot;Fraud&quot; #&gt; [8] &quot;Gambling&quot; #&gt; [9] &quot;Human Trafficking (A), Commercial Sex Acts&quot; #&gt; [10] &quot;Human Trafficking, Commercial Sex Acts&quot; #&gt; [11] &quot;Larceny Theft&quot; #&gt; [12] &quot;Liquor Laws&quot; #&gt; [13] &quot;Malicious Mischief&quot; #&gt; [14] &quot;Miscellaneous Investigation&quot; #&gt; [15] &quot;Non-Criminal&quot; #&gt; [16] &quot;Offences Against The Family And Children&quot; #&gt; [17] &quot;Other Miscellaneous&quot; #&gt; [18] &quot;Rape&quot; #&gt; [19] &quot;Traffic Collision&quot; #&gt; [20] &quot;Traffic Violation Arrest&quot; #&gt; [21] &quot;Vandalism&quot; #&gt; [22] &quot;Vehicle Misplaced&quot; #&gt; [23] &quot;Warrant&quot; #&gt; [24] &quot;Weapons Carrying Etc&quot; #&gt; [25] &quot;Weapons Offence&quot; #&gt; [26] &quot;Weapons Offense&quot; Searching for the letter “a” isn’t that useful. Let’s say we want to subset the data to only include theft related crimes. From reading the list of crimes we can see there are multiple theft crimes - “Larceny Theft”, “Motor Vehicle Theft”, and “Motor Vehicle Theft?”. We may also want to include “Stolen Property” in this search but we’ll wait until later in this lesson for how to search for multiple patterns. Since those three crimes all have the word “Theft” in the name we can search for the pattern and it will return only those crimes grep(&quot;Theft&quot;, crimes) #&gt; [1] 20 26 27 crimes[grep(&quot;Theft&quot;, crimes)] #&gt; [1] &quot;Larceny Theft&quot; &quot;Motor Vehicle Theft&quot; &quot;Motor Vehicle Theft?&quot; A very useful parameter is value. When we set value to TRUE, it will print out the actual strings that are a match rather than the element number. While this prevents us from using it to subset (since R no longer knows which rows are a match), it is an excellent tool to check if the grep() was successful as we can visually confirm it returns what we want. When we start to learn about special characters which make the patterns more complicated, this will be important. grep(&quot;Theft&quot;, crimes, value = TRUE) #&gt; [1] &quot;Larceny Theft&quot; &quot;Motor Vehicle Theft&quot; &quot;Motor Vehicle Theft?&quot; Note that grep() (and gsub()) is case sensitive so you must capitalize properly. grep(&quot;theft&quot;, value = TRUE, crimes) #&gt; character(0) Setting the parameter ignore.case to be TRUE makes grep() ignore capitalization. grep(&quot;theft&quot;, crimes, value = TRUE, ignore.case = TRUE) #&gt; [1] &quot;Larceny Theft&quot; &quot;Motor Vehicle Theft&quot; &quot;Motor Vehicle Theft?&quot; If we want to find values which do not match with “theft”, we can set the parameter invert to TRUE. grep(&quot;theft&quot;, crimes, value = TRUE, ignore.case = TRUE, invert = TRUE) #&gt; [1] &quot;Arson&quot; #&gt; [2] &quot;Assault&quot; #&gt; [3] &quot;Burglary&quot; #&gt; [4] &quot;Case Closure&quot; #&gt; [5] &quot;Civil Sidewalks&quot; #&gt; [6] &quot;Courtesy Report&quot; #&gt; [7] &quot;Disorderly Conduct&quot; #&gt; [8] &quot;Drug Offense&quot; #&gt; [9] &quot;Drug Violation&quot; #&gt; [10] &quot;Embezzlement&quot; #&gt; [11] &quot;Family Offense&quot; #&gt; [12] &quot;Fire Report&quot; #&gt; [13] &quot;Forgery And Counterfeiting&quot; #&gt; [14] &quot;Fraud&quot; #&gt; [15] &quot;Gambling&quot; #&gt; [16] &quot;Homicide&quot; #&gt; [17] &quot;Human Trafficking (A), Commercial Sex Acts&quot; #&gt; [18] &quot;Human Trafficking, Commercial Sex Acts&quot; #&gt; [19] &quot;Juvenile Offenses&quot; #&gt; [20] &quot;Liquor Laws&quot; #&gt; [21] &quot;Lost Property&quot; #&gt; [22] &quot;Malicious Mischief&quot; #&gt; [23] &quot;Miscellaneous Investigation&quot; #&gt; [24] &quot;Missing Person&quot; #&gt; [25] &quot;Non-Criminal&quot; #&gt; [26] &quot;Offences Against The Family And Children&quot; #&gt; [27] &quot;Other&quot; #&gt; [28] &quot;Other Miscellaneous&quot; #&gt; [29] &quot;Other Offenses&quot; #&gt; [30] &quot;Prostitution&quot; #&gt; [31] &quot;Rape&quot; #&gt; [32] &quot;Recovered Vehicle&quot; #&gt; [33] &quot;Robbery&quot; #&gt; [34] &quot;Sex Offense&quot; #&gt; [35] &quot;Stolen Property&quot; #&gt; [36] &quot;Suicide&quot; #&gt; [37] &quot;Suspicious&quot; #&gt; [38] &quot;Suspicious Occ&quot; #&gt; [39] &quot;Traffic Collision&quot; #&gt; [40] &quot;Traffic Violation Arrest&quot; #&gt; [41] &quot;Vandalism&quot; #&gt; [42] &quot;Vehicle Impounded&quot; #&gt; [43] &quot;Vehicle Misplaced&quot; #&gt; [44] &quot;Warrant&quot; #&gt; [45] &quot;Weapons Carrying Etc&quot; #&gt; [46] &quot;Weapons Offence&quot; #&gt; [47] &quot;Weapons Offense&quot; 4.2 Finding and replacing patterns in text with gsub() gsub() takes patterns and replaces them with other patterns. An important use in criminology for gsub() is to fix spelling mistakes in the text such as the way “offense” was spelled wrong in our data. This will be a standard part of your data cleaning process and is important as a misspelled word can cause significant issues. For example if our previous example of marijuana legalization in Colorado had half of agencies misspelling the name “Colorado”, aggregating the data by the state (or simply subsetting to just Colorado agencies) would give completely different results as you’d lose half your data. gsub() is also useful when you want to take subcategories and change the value to larger categories. For example we could take any crime with the word “Theft” in it and change the whole crime name to “Theft”. In our data that would take 3 subcategories of thefts and turn it into a larger category we could aggregate to. This will be useful in city-level data where you may only care about a certain type of crime but it has many subcategories that you need to aggregate. The syntax of gsub() is similar to grep() with the addition of a pattern to replace the pattern we found. gsub(\"find_pattern\", \"replace_pattern\", data) Let’s start with a simple example of finding the letter “a” and replacing it with “z”. Our data will be the word “cat”. gsub(&quot;a&quot;, &quot;z&quot;, &quot;cat&quot;) #&gt; [1] &quot;czt&quot; Like grep(), gsub() is case sensitive and has the parameter ignore.case to ignore capitalization. gsub(&quot;A&quot;, &quot;z&quot;, &quot;cat&quot;) #&gt; [1] &quot;cat&quot; gsub(&quot;A&quot;, &quot;z&quot;, &quot;cat&quot;, ignore.case = TRUE) #&gt; [1] &quot;czt&quot; gsub() returns the same data you input but with the pattern already replaced. Above you can see that when using capital A, it returns “cat” unchanged as it never found the pattern. When ignore.case was set to TRUE it returned “czt” as it then matched to letter “A”. We can use gsub() to replace some issues in the crimes data such as “Offense” being spelled “Offence”. gsub(&quot;Offence&quot;, &quot;Offense&quot;, crimes) #&gt; [1] &quot;Arson&quot; #&gt; [2] &quot;Assault&quot; #&gt; [3] &quot;Burglary&quot; #&gt; [4] &quot;Case Closure&quot; #&gt; [5] &quot;Civil Sidewalks&quot; #&gt; [6] &quot;Courtesy Report&quot; #&gt; [7] &quot;Disorderly Conduct&quot; #&gt; [8] &quot;Drug Offense&quot; #&gt; [9] &quot;Drug Violation&quot; #&gt; [10] &quot;Embezzlement&quot; #&gt; [11] &quot;Family Offense&quot; #&gt; [12] &quot;Fire Report&quot; #&gt; [13] &quot;Forgery And Counterfeiting&quot; #&gt; [14] &quot;Fraud&quot; #&gt; [15] &quot;Gambling&quot; #&gt; [16] &quot;Homicide&quot; #&gt; [17] &quot;Human Trafficking (A), Commercial Sex Acts&quot; #&gt; [18] &quot;Human Trafficking, Commercial Sex Acts&quot; #&gt; [19] &quot;Juvenile Offenses&quot; #&gt; [20] &quot;Larceny Theft&quot; #&gt; [21] &quot;Liquor Laws&quot; #&gt; [22] &quot;Lost Property&quot; #&gt; [23] &quot;Malicious Mischief&quot; #&gt; [24] &quot;Miscellaneous Investigation&quot; #&gt; [25] &quot;Missing Person&quot; #&gt; [26] &quot;Motor Vehicle Theft&quot; #&gt; [27] &quot;Motor Vehicle Theft?&quot; #&gt; [28] &quot;Non-Criminal&quot; #&gt; [29] &quot;Offenses Against The Family And Children&quot; #&gt; [30] &quot;Other&quot; #&gt; [31] &quot;Other Miscellaneous&quot; #&gt; [32] &quot;Other Offenses&quot; #&gt; [33] &quot;Prostitution&quot; #&gt; [34] &quot;Rape&quot; #&gt; [35] &quot;Recovered Vehicle&quot; #&gt; [36] &quot;Robbery&quot; #&gt; [37] &quot;Sex Offense&quot; #&gt; [38] &quot;Stolen Property&quot; #&gt; [39] &quot;Suicide&quot; #&gt; [40] &quot;Suspicious&quot; #&gt; [41] &quot;Suspicious Occ&quot; #&gt; [42] &quot;Traffic Collision&quot; #&gt; [43] &quot;Traffic Violation Arrest&quot; #&gt; [44] &quot;Vandalism&quot; #&gt; [45] &quot;Vehicle Impounded&quot; #&gt; [46] &quot;Vehicle Misplaced&quot; #&gt; [47] &quot;Warrant&quot; #&gt; [48] &quot;Weapons Carrying Etc&quot; #&gt; [49] &quot;Weapons Offense&quot; #&gt; [50] &quot;Weapons Offense&quot; A useful pattern is an empty string \"\" which says replace whatever the find_pattern is with nothing, deleting it. Let’s delete the letter “a” (lowercase only) from the data. gsub(&quot;a&quot;, &quot;&quot;, crimes) #&gt; [1] &quot;Arson&quot; #&gt; [2] &quot;Assult&quot; #&gt; [3] &quot;Burglry&quot; #&gt; [4] &quot;Cse Closure&quot; #&gt; [5] &quot;Civil Sidewlks&quot; #&gt; [6] &quot;Courtesy Report&quot; #&gt; [7] &quot;Disorderly Conduct&quot; #&gt; [8] &quot;Drug Offense&quot; #&gt; [9] &quot;Drug Violtion&quot; #&gt; [10] &quot;Embezzlement&quot; #&gt; [11] &quot;Fmily Offense&quot; #&gt; [12] &quot;Fire Report&quot; #&gt; [13] &quot;Forgery And Counterfeiting&quot; #&gt; [14] &quot;Frud&quot; #&gt; [15] &quot;Gmbling&quot; #&gt; [16] &quot;Homicide&quot; #&gt; [17] &quot;Humn Trfficking (A), Commercil Sex Acts&quot; #&gt; [18] &quot;Humn Trfficking, Commercil Sex Acts&quot; #&gt; [19] &quot;Juvenile Offenses&quot; #&gt; [20] &quot;Lrceny Theft&quot; #&gt; [21] &quot;Liquor Lws&quot; #&gt; [22] &quot;Lost Property&quot; #&gt; [23] &quot;Mlicious Mischief&quot; #&gt; [24] &quot;Miscellneous Investigtion&quot; #&gt; [25] &quot;Missing Person&quot; #&gt; [26] &quot;Motor Vehicle Theft&quot; #&gt; [27] &quot;Motor Vehicle Theft?&quot; #&gt; [28] &quot;Non-Criminl&quot; #&gt; [29] &quot;Offences Aginst The Fmily And Children&quot; #&gt; [30] &quot;Other&quot; #&gt; [31] &quot;Other Miscellneous&quot; #&gt; [32] &quot;Other Offenses&quot; #&gt; [33] &quot;Prostitution&quot; #&gt; [34] &quot;Rpe&quot; #&gt; [35] &quot;Recovered Vehicle&quot; #&gt; [36] &quot;Robbery&quot; #&gt; [37] &quot;Sex Offense&quot; #&gt; [38] &quot;Stolen Property&quot; #&gt; [39] &quot;Suicide&quot; #&gt; [40] &quot;Suspicious&quot; #&gt; [41] &quot;Suspicious Occ&quot; #&gt; [42] &quot;Trffic Collision&quot; #&gt; [43] &quot;Trffic Violtion Arrest&quot; #&gt; [44] &quot;Vndlism&quot; #&gt; [45] &quot;Vehicle Impounded&quot; #&gt; [46] &quot;Vehicle Misplced&quot; #&gt; [47] &quot;Wrrnt&quot; #&gt; [48] &quot;Wepons Crrying Etc&quot; #&gt; [49] &quot;Wepons Offence&quot; #&gt; [50] &quot;Wepons Offense&quot; 4.3 Useful special characters So far we have just searched for a single character or word and expected a return only if an exact match was found. Now we’ll discuss a number of characters called “special characters” that allow us to make more complex grep() and gsub() pattern searches. 4.3.1 Multiple characters [] To search for multiple matches we can put the pattern we want to search for inside square brackets [] (note that we use the same square brackets for subsetting but they operate very differently in this context). For example, we can find all the crimes that contain the letters “x”, “y”, or “z”. The grep() searches if any of the letters inside of the [] are present in our crimes vector. grep(&quot;[xyz]&quot;, crimes, value = TRUE) #&gt; [1] &quot;Burglary&quot; #&gt; [2] &quot;Courtesy Report&quot; #&gt; [3] &quot;Disorderly Conduct&quot; #&gt; [4] &quot;Embezzlement&quot; #&gt; [5] &quot;Family Offense&quot; #&gt; [6] &quot;Forgery And Counterfeiting&quot; #&gt; [7] &quot;Human Trafficking (A), Commercial Sex Acts&quot; #&gt; [8] &quot;Human Trafficking, Commercial Sex Acts&quot; #&gt; [9] &quot;Larceny Theft&quot; #&gt; [10] &quot;Lost Property&quot; #&gt; [11] &quot;Offences Against The Family And Children&quot; #&gt; [12] &quot;Robbery&quot; #&gt; [13] &quot;Sex Offense&quot; #&gt; [14] &quot;Stolen Property&quot; #&gt; [15] &quot;Weapons Carrying Etc&quot; As it searches for any letter inside of the square brackets, the order does not matter. grep(&quot;[zyx]&quot;, crimes, value = TRUE) #&gt; [1] &quot;Burglary&quot; #&gt; [2] &quot;Courtesy Report&quot; #&gt; [3] &quot;Disorderly Conduct&quot; #&gt; [4] &quot;Embezzlement&quot; #&gt; [5] &quot;Family Offense&quot; #&gt; [6] &quot;Forgery And Counterfeiting&quot; #&gt; [7] &quot;Human Trafficking (A), Commercial Sex Acts&quot; #&gt; [8] &quot;Human Trafficking, Commercial Sex Acts&quot; #&gt; [9] &quot;Larceny Theft&quot; #&gt; [10] &quot;Lost Property&quot; #&gt; [11] &quot;Offences Against The Family And Children&quot; #&gt; [12] &quot;Robbery&quot; #&gt; [13] &quot;Sex Offense&quot; #&gt; [14] &quot;Stolen Property&quot; #&gt; [15] &quot;Weapons Carrying Etc&quot; This also works for numbers though we do not have any numbers in the data. grep(&quot;[01234567890]&quot;, crimes, value = TRUE) #&gt; character(0) If we wanted to search for a pattern, such as vowels, that is repeated we could put multiple [] patterns together. We will see another way to search for a repeated pattern soon. grep(&quot;[aeiou][aeiou][aeiou]&quot;, crimes, value = TRUE) #&gt; [1] &quot;Malicious Mischief&quot; &quot;Miscellaneous Investigation&quot; #&gt; [3] &quot;Other Miscellaneous&quot; &quot;Suspicious&quot; #&gt; [5] &quot;Suspicious Occ&quot; Inside the [] we can also use the - to make intervals between certain values. For numbers, n-m means any number between n and m (inclusive). For letters, a-z means all lowercase letters and A-Z means all uppercase letters in that range (inclusive). grep(&quot;[x-z]&quot;, crimes, value = TRUE) #&gt; [1] &quot;Burglary&quot; #&gt; [2] &quot;Courtesy Report&quot; #&gt; [3] &quot;Disorderly Conduct&quot; #&gt; [4] &quot;Embezzlement&quot; #&gt; [5] &quot;Family Offense&quot; #&gt; [6] &quot;Forgery And Counterfeiting&quot; #&gt; [7] &quot;Human Trafficking (A), Commercial Sex Acts&quot; #&gt; [8] &quot;Human Trafficking, Commercial Sex Acts&quot; #&gt; [9] &quot;Larceny Theft&quot; #&gt; [10] &quot;Lost Property&quot; #&gt; [11] &quot;Offences Against The Family And Children&quot; #&gt; [12] &quot;Robbery&quot; #&gt; [13] &quot;Sex Offense&quot; #&gt; [14] &quot;Stolen Property&quot; #&gt; [15] &quot;Weapons Carrying Etc&quot; 4.3.2 n-many of previous character {n} {n} means the preceding item will be matched exactly n times. We can use it to rewrite the above grep() to saw the values in the [] should be repeated three times. grep(&quot;[aeiou]{3}&quot;, crimes, value = TRUE) #&gt; [1] &quot;Malicious Mischief&quot; &quot;Miscellaneous Investigation&quot; #&gt; [3] &quot;Other Miscellaneous&quot; &quot;Suspicious&quot; #&gt; [5] &quot;Suspicious Occ&quot; 4.3.3 n-many to m-many of previous character {n,m} While {n} says “the previous character (or characters inside a []) must be present exactly n times”, we can allow a range by using {n,m}. Here the previous character must be present between n and m times. We can check for values where there are 2-3 vowels in a row. Note that there cannot be a space before or after the comma. grep(&quot;[aeiou]{2,3}&quot;, crimes, value = TRUE) #&gt; [1] &quot;Assault&quot; #&gt; [2] &quot;Courtesy Report&quot; #&gt; [3] &quot;Drug Violation&quot; #&gt; [4] &quot;Forgery And Counterfeiting&quot; #&gt; [5] &quot;Fraud&quot; #&gt; [6] &quot;Human Trafficking (A), Commercial Sex Acts&quot; #&gt; [7] &quot;Human Trafficking, Commercial Sex Acts&quot; #&gt; [8] &quot;Liquor Laws&quot; #&gt; [9] &quot;Malicious Mischief&quot; #&gt; [10] &quot;Miscellaneous Investigation&quot; #&gt; [11] &quot;Offences Against The Family And Children&quot; #&gt; [12] &quot;Other Miscellaneous&quot; #&gt; [13] &quot;Prostitution&quot; #&gt; [14] &quot;Suicide&quot; #&gt; [15] &quot;Suspicious&quot; #&gt; [16] &quot;Suspicious Occ&quot; #&gt; [17] &quot;Traffic Collision&quot; #&gt; [18] &quot;Traffic Violation Arrest&quot; #&gt; [19] &quot;Vehicle Impounded&quot; #&gt; [20] &quot;Weapons Carrying Etc&quot; #&gt; [21] &quot;Weapons Offence&quot; #&gt; [22] &quot;Weapons Offense&quot; If we wanted only crimes with exactly three vowels in a row we’d use {3,3}. grep(&quot;[aeiou]{3,3}&quot;, crimes, value = TRUE) #&gt; [1] &quot;Malicious Mischief&quot; &quot;Miscellaneous Investigation&quot; #&gt; [3] &quot;Other Miscellaneous&quot; &quot;Suspicious&quot; #&gt; [5] &quot;Suspicious Occ&quot; If we leave n blank, such as {,m} it says “previous character must be present up to m times”. grep(&quot;[aeiou]{,3}&quot;, crimes, value = TRUE) #&gt; [1] &quot;Arson&quot; #&gt; [2] &quot;Assault&quot; #&gt; [3] &quot;Burglary&quot; #&gt; [4] &quot;Case Closure&quot; #&gt; [5] &quot;Civil Sidewalks&quot; #&gt; [6] &quot;Courtesy Report&quot; #&gt; [7] &quot;Disorderly Conduct&quot; #&gt; [8] &quot;Drug Offense&quot; #&gt; [9] &quot;Drug Violation&quot; #&gt; [10] &quot;Embezzlement&quot; #&gt; [11] &quot;Family Offense&quot; #&gt; [12] &quot;Fire Report&quot; #&gt; [13] &quot;Forgery And Counterfeiting&quot; #&gt; [14] &quot;Fraud&quot; #&gt; [15] &quot;Gambling&quot; #&gt; [16] &quot;Homicide&quot; #&gt; [17] &quot;Human Trafficking (A), Commercial Sex Acts&quot; #&gt; [18] &quot;Human Trafficking, Commercial Sex Acts&quot; #&gt; [19] &quot;Juvenile Offenses&quot; #&gt; [20] &quot;Larceny Theft&quot; #&gt; [21] &quot;Liquor Laws&quot; #&gt; [22] &quot;Lost Property&quot; #&gt; [23] &quot;Malicious Mischief&quot; #&gt; [24] &quot;Miscellaneous Investigation&quot; #&gt; [25] &quot;Missing Person&quot; #&gt; [26] &quot;Motor Vehicle Theft&quot; #&gt; [27] &quot;Motor Vehicle Theft?&quot; #&gt; [28] &quot;Non-Criminal&quot; #&gt; [29] &quot;Offences Against The Family And Children&quot; #&gt; [30] &quot;Other&quot; #&gt; [31] &quot;Other Miscellaneous&quot; #&gt; [32] &quot;Other Offenses&quot; #&gt; [33] &quot;Prostitution&quot; #&gt; [34] &quot;Rape&quot; #&gt; [35] &quot;Recovered Vehicle&quot; #&gt; [36] &quot;Robbery&quot; #&gt; [37] &quot;Sex Offense&quot; #&gt; [38] &quot;Stolen Property&quot; #&gt; [39] &quot;Suicide&quot; #&gt; [40] &quot;Suspicious&quot; #&gt; [41] &quot;Suspicious Occ&quot; #&gt; [42] &quot;Traffic Collision&quot; #&gt; [43] &quot;Traffic Violation Arrest&quot; #&gt; [44] &quot;Vandalism&quot; #&gt; [45] &quot;Vehicle Impounded&quot; #&gt; [46] &quot;Vehicle Misplaced&quot; #&gt; [47] &quot;Warrant&quot; #&gt; [48] &quot;Weapons Carrying Etc&quot; #&gt; [49] &quot;Weapons Offence&quot; #&gt; [50] &quot;Weapons Offense&quot; This returns every crime as “up to m times” includes zero times. And the same works for leaving m blank but it will be “present at least n times”. grep(&quot;[aeiou]{3,}&quot;, crimes, value = TRUE) #&gt; [1] &quot;Malicious Mischief&quot; &quot;Miscellaneous Investigation&quot; #&gt; [3] &quot;Other Miscellaneous&quot; &quot;Suspicious&quot; #&gt; [5] &quot;Suspicious Occ&quot; 4.3.4 Start of string The ^ symbol (called a caret) signifies that what follows it is the start of the string. We put the ^ at the beginning of the quotes and then anything that follows it must be the very start of the string. As an example let’s search for “Family”. Our data has both the “Family Offense” crime and the “Offences Against The Family And Children” crime (which likely are the same crime written differently). If we use ^ then we should only have the first one returned. grep(&quot;^Family&quot;, crimes, value = TRUE) #&gt; [1] &quot;Family Offense&quot; 4.3.5 End of string $ The dollar sign $ acts similar to the caret ^ except that it signifies that the value before it is the end of the string. We put the $ at the very end of our search pattern and whatever character is before it is the end of the string. For example, let’s search for all crimes that end with the word “Theft”. grep(&quot;Theft$&quot;, crimes, value = TRUE) #&gt; [1] &quot;Larceny Theft&quot; &quot;Motor Vehicle Theft&quot; Note that the crime “Motor Vehicle Theft?” doesn’t get selected as it ends with a question mark. 4.3.6 Anything . The . symbol is a stand-in for any value. This is useful when you aren’t sure about every part of the pattern you are searching. It can also be used when there are slight differences in words such as our incorrect “Offence” and “Offense”. We can replace the “c” and “s” with the .. grep(&quot;Weapons Offen.e&quot;, crimes, value = TRUE) #&gt; [1] &quot;Weapons Offence&quot; &quot;Weapons Offense&quot; 4.3.7 One or more of previous + The + means that the character immediately before it is present at least one time. This is the same as writing {1,}. If we wanted to find all values with only two words we would start with some number of letters followed by a space followed by some more letters and the string would end. grep(&quot;^[A-Za-z]+ [A-Za-z]+$&quot;, crimes, value = TRUE) #&gt; [1] &quot;Case Closure&quot; &quot;Civil Sidewalks&quot; #&gt; [3] &quot;Courtesy Report&quot; &quot;Disorderly Conduct&quot; #&gt; [5] &quot;Drug Offense&quot; &quot;Drug Violation&quot; #&gt; [7] &quot;Family Offense&quot; &quot;Fire Report&quot; #&gt; [9] &quot;Juvenile Offenses&quot; &quot;Larceny Theft&quot; #&gt; [11] &quot;Liquor Laws&quot; &quot;Lost Property&quot; #&gt; [13] &quot;Malicious Mischief&quot; &quot;Miscellaneous Investigation&quot; #&gt; [15] &quot;Missing Person&quot; &quot;Other Miscellaneous&quot; #&gt; [17] &quot;Other Offenses&quot; &quot;Recovered Vehicle&quot; #&gt; [19] &quot;Sex Offense&quot; &quot;Stolen Property&quot; #&gt; [21] &quot;Suspicious Occ&quot; &quot;Traffic Collision&quot; #&gt; [23] &quot;Vehicle Impounded&quot; &quot;Vehicle Misplaced&quot; #&gt; [25] &quot;Weapons Offence&quot; &quot;Weapons Offense&quot; 4.3.8 Zero or more of previous * The * special character says match zero or more of the previous character and is the same as {0,}. Combining . with * is powerful when used in gsub() to delete text before or after a pattern. Let’s write a pattern that searches the text for the word “Weapons” and then deletes any text after that. Our pattern would be \"Weapons.*\" which is the word “Weapons” followed by anything zero or more times. gsub(&quot;Weapons.*&quot;, &quot;Weapons&quot;, crimes) #&gt; [1] &quot;Arson&quot; #&gt; [2] &quot;Assault&quot; #&gt; [3] &quot;Burglary&quot; #&gt; [4] &quot;Case Closure&quot; #&gt; [5] &quot;Civil Sidewalks&quot; #&gt; [6] &quot;Courtesy Report&quot; #&gt; [7] &quot;Disorderly Conduct&quot; #&gt; [8] &quot;Drug Offense&quot; #&gt; [9] &quot;Drug Violation&quot; #&gt; [10] &quot;Embezzlement&quot; #&gt; [11] &quot;Family Offense&quot; #&gt; [12] &quot;Fire Report&quot; #&gt; [13] &quot;Forgery And Counterfeiting&quot; #&gt; [14] &quot;Fraud&quot; #&gt; [15] &quot;Gambling&quot; #&gt; [16] &quot;Homicide&quot; #&gt; [17] &quot;Human Trafficking (A), Commercial Sex Acts&quot; #&gt; [18] &quot;Human Trafficking, Commercial Sex Acts&quot; #&gt; [19] &quot;Juvenile Offenses&quot; #&gt; [20] &quot;Larceny Theft&quot; #&gt; [21] &quot;Liquor Laws&quot; #&gt; [22] &quot;Lost Property&quot; #&gt; [23] &quot;Malicious Mischief&quot; #&gt; [24] &quot;Miscellaneous Investigation&quot; #&gt; [25] &quot;Missing Person&quot; #&gt; [26] &quot;Motor Vehicle Theft&quot; #&gt; [27] &quot;Motor Vehicle Theft?&quot; #&gt; [28] &quot;Non-Criminal&quot; #&gt; [29] &quot;Offences Against The Family And Children&quot; #&gt; [30] &quot;Other&quot; #&gt; [31] &quot;Other Miscellaneous&quot; #&gt; [32] &quot;Other Offenses&quot; #&gt; [33] &quot;Prostitution&quot; #&gt; [34] &quot;Rape&quot; #&gt; [35] &quot;Recovered Vehicle&quot; #&gt; [36] &quot;Robbery&quot; #&gt; [37] &quot;Sex Offense&quot; #&gt; [38] &quot;Stolen Property&quot; #&gt; [39] &quot;Suicide&quot; #&gt; [40] &quot;Suspicious&quot; #&gt; [41] &quot;Suspicious Occ&quot; #&gt; [42] &quot;Traffic Collision&quot; #&gt; [43] &quot;Traffic Violation Arrest&quot; #&gt; [44] &quot;Vandalism&quot; #&gt; [45] &quot;Vehicle Impounded&quot; #&gt; [46] &quot;Vehicle Misplaced&quot; #&gt; [47] &quot;Warrant&quot; #&gt; [48] &quot;Weapons&quot; #&gt; [49] &quot;Weapons&quot; #&gt; [50] &quot;Weapons&quot; And now our last three crimes are all identical. 4.3.9 Multiple patterns | The vertical bar | special character allows us to check for multiple patterns. It essentially functions as “pattern A or Pattern B” with the | symbol replacing the word “or” (and making sure to not have any space between patterns.). To check our crimes for the word “Drug” or the word “Weapons” we could write “Drug|Weapon” which searches for “Drug” or “Weapons” in the text. grep(&quot;Drug|Weapons&quot;, crimes, value = TRUE) #&gt; [1] &quot;Drug Offense&quot; &quot;Drug Violation&quot; &quot;Weapons Carrying Etc&quot; #&gt; [4] &quot;Weapons Offence&quot; &quot;Weapons Offense&quot; 4.3.10 Parentheses () Parentheses act similar to the square brackets [] where we want everything inside but with parentheses the values must be in the proper order. grep(&quot;(Offense)&quot;, crimes, value = TRUE) #&gt; [1] &quot;Drug Offense&quot; &quot;Family Offense&quot; &quot;Juvenile Offenses&quot; #&gt; [4] &quot;Other Offenses&quot; &quot;Sex Offense&quot; &quot;Weapons Offense&quot; Running the above code returns the same results as if we didn’t include the parentheses. The usefulness of parentheses comes when combining it with the | symbol to be able to check “(X|Y) Z”), which says, “look for either X or Y which must be followed by Z”. Running just “(Offense)” returns values for multiple types of offenses. Let’s say we just care about Drug and Weapon Offenses. We can search for “Offense” normally and combine () and | to say “search for either the word”Drug\" or the word “Family” and they should be followed by the word “Offense”. grep(&quot;(Drug|Weapons) Offense&quot;, crimes, value = TRUE) #&gt; [1] &quot;Drug Offense&quot; &quot;Weapons Offense&quot; 4.3.11 Optional text ? The question mark indicates that the character immediately before the ? is optional. Let’s search for the term “offens” and add a ? at the end. This says search for the pattern “offen” and we expect an exact match for that pattern. And if the letter “s” follows “offen” return that too, but it isn’t required to be there. grep(&quot;Offens?&quot;, crimes, value = TRUE) #&gt; [1] &quot;Drug Offense&quot; #&gt; [2] &quot;Family Offense&quot; #&gt; [3] &quot;Juvenile Offenses&quot; #&gt; [4] &quot;Offences Against The Family And Children&quot; #&gt; [5] &quot;Other Offenses&quot; #&gt; [6] &quot;Sex Offense&quot; #&gt; [7] &quot;Weapons Offence&quot; #&gt; [8] &quot;Weapons Offense&quot; We can further combine it with () and | to get both spellings of Weapon Offense. grep(&quot;(Drug|Weapons) Offens?&quot;, crimes, value = TRUE) #&gt; [1] &quot;Drug Offense&quot; &quot;Weapons Offence&quot; &quot;Weapons Offense&quot; 4.4 Changing capitalization If you’re dealing with data where the only difference is capitalization (as is common in crime data) instead of using gsub() to change individual values, you can use the functions toupper() and tolower() to change every letter’s capitalization. These functions take as an input a vector of strings (or a column from a data.frame) and return those strings either upper or lowercase. toupper(crimes) #&gt; [1] &quot;ARSON&quot; #&gt; [2] &quot;ASSAULT&quot; #&gt; [3] &quot;BURGLARY&quot; #&gt; [4] &quot;CASE CLOSURE&quot; #&gt; [5] &quot;CIVIL SIDEWALKS&quot; #&gt; [6] &quot;COURTESY REPORT&quot; #&gt; [7] &quot;DISORDERLY CONDUCT&quot; #&gt; [8] &quot;DRUG OFFENSE&quot; #&gt; [9] &quot;DRUG VIOLATION&quot; #&gt; [10] &quot;EMBEZZLEMENT&quot; #&gt; [11] &quot;FAMILY OFFENSE&quot; #&gt; [12] &quot;FIRE REPORT&quot; #&gt; [13] &quot;FORGERY AND COUNTERFEITING&quot; #&gt; [14] &quot;FRAUD&quot; #&gt; [15] &quot;GAMBLING&quot; #&gt; [16] &quot;HOMICIDE&quot; #&gt; [17] &quot;HUMAN TRAFFICKING (A), COMMERCIAL SEX ACTS&quot; #&gt; [18] &quot;HUMAN TRAFFICKING, COMMERCIAL SEX ACTS&quot; #&gt; [19] &quot;JUVENILE OFFENSES&quot; #&gt; [20] &quot;LARCENY THEFT&quot; #&gt; [21] &quot;LIQUOR LAWS&quot; #&gt; [22] &quot;LOST PROPERTY&quot; #&gt; [23] &quot;MALICIOUS MISCHIEF&quot; #&gt; [24] &quot;MISCELLANEOUS INVESTIGATION&quot; #&gt; [25] &quot;MISSING PERSON&quot; #&gt; [26] &quot;MOTOR VEHICLE THEFT&quot; #&gt; [27] &quot;MOTOR VEHICLE THEFT?&quot; #&gt; [28] &quot;NON-CRIMINAL&quot; #&gt; [29] &quot;OFFENCES AGAINST THE FAMILY AND CHILDREN&quot; #&gt; [30] &quot;OTHER&quot; #&gt; [31] &quot;OTHER MISCELLANEOUS&quot; #&gt; [32] &quot;OTHER OFFENSES&quot; #&gt; [33] &quot;PROSTITUTION&quot; #&gt; [34] &quot;RAPE&quot; #&gt; [35] &quot;RECOVERED VEHICLE&quot; #&gt; [36] &quot;ROBBERY&quot; #&gt; [37] &quot;SEX OFFENSE&quot; #&gt; [38] &quot;STOLEN PROPERTY&quot; #&gt; [39] &quot;SUICIDE&quot; #&gt; [40] &quot;SUSPICIOUS&quot; #&gt; [41] &quot;SUSPICIOUS OCC&quot; #&gt; [42] &quot;TRAFFIC COLLISION&quot; #&gt; [43] &quot;TRAFFIC VIOLATION ARREST&quot; #&gt; [44] &quot;VANDALISM&quot; #&gt; [45] &quot;VEHICLE IMPOUNDED&quot; #&gt; [46] &quot;VEHICLE MISPLACED&quot; #&gt; [47] &quot;WARRANT&quot; #&gt; [48] &quot;WEAPONS CARRYING ETC&quot; #&gt; [49] &quot;WEAPONS OFFENCE&quot; #&gt; [50] &quot;WEAPONS OFFENSE&quot; tolower(crimes) #&gt; [1] &quot;arson&quot; #&gt; [2] &quot;assault&quot; #&gt; [3] &quot;burglary&quot; #&gt; [4] &quot;case closure&quot; #&gt; [5] &quot;civil sidewalks&quot; #&gt; [6] &quot;courtesy report&quot; #&gt; [7] &quot;disorderly conduct&quot; #&gt; [8] &quot;drug offense&quot; #&gt; [9] &quot;drug violation&quot; #&gt; [10] &quot;embezzlement&quot; #&gt; [11] &quot;family offense&quot; #&gt; [12] &quot;fire report&quot; #&gt; [13] &quot;forgery and counterfeiting&quot; #&gt; [14] &quot;fraud&quot; #&gt; [15] &quot;gambling&quot; #&gt; [16] &quot;homicide&quot; #&gt; [17] &quot;human trafficking (a), commercial sex acts&quot; #&gt; [18] &quot;human trafficking, commercial sex acts&quot; #&gt; [19] &quot;juvenile offenses&quot; #&gt; [20] &quot;larceny theft&quot; #&gt; [21] &quot;liquor laws&quot; #&gt; [22] &quot;lost property&quot; #&gt; [23] &quot;malicious mischief&quot; #&gt; [24] &quot;miscellaneous investigation&quot; #&gt; [25] &quot;missing person&quot; #&gt; [26] &quot;motor vehicle theft&quot; #&gt; [27] &quot;motor vehicle theft?&quot; #&gt; [28] &quot;non-criminal&quot; #&gt; [29] &quot;offences against the family and children&quot; #&gt; [30] &quot;other&quot; #&gt; [31] &quot;other miscellaneous&quot; #&gt; [32] &quot;other offenses&quot; #&gt; [33] &quot;prostitution&quot; #&gt; [34] &quot;rape&quot; #&gt; [35] &quot;recovered vehicle&quot; #&gt; [36] &quot;robbery&quot; #&gt; [37] &quot;sex offense&quot; #&gt; [38] &quot;stolen property&quot; #&gt; [39] &quot;suicide&quot; #&gt; [40] &quot;suspicious&quot; #&gt; [41] &quot;suspicious occ&quot; #&gt; [42] &quot;traffic collision&quot; #&gt; [43] &quot;traffic violation arrest&quot; #&gt; [44] &quot;vandalism&quot; #&gt; [45] &quot;vehicle impounded&quot; #&gt; [46] &quot;vehicle misplaced&quot; #&gt; [47] &quot;warrant&quot; #&gt; [48] &quot;weapons carrying etc&quot; #&gt; [49] &quot;weapons offence&quot; #&gt; [50] &quot;weapons offense&quot; "],
["reading-and-writing-data.html", "5 Reading and Writing Data 5.1 Reading Data into R 5.2 Writing Data", " 5 Reading and Writing Data So far in these lessons we’ve used data from a number of sources but which all came as .rda files which is the standard R data format. Many data sets, particularly older government data, will not come as .rda file but rather as Excel, Stata, SAS, SPSS, or fixed-width ASCII files. In this brief lesson we’ll cover how to read these formats into R as well as how to save data into these formats. Since many criminologists do not use R, it is important to be able to save the data in the language they use to be able to collaborate with them. Fixed-width ASCII files are not very common and require a bit more effort than the other formats so we’ll leave those until later to discuss. In this lesson we’ll use data about officer-involved shootings. 5.1 Reading Data into R 5.1.1 R As we’ve seen earlier, to read in data with a .rda or .rdata extension you use the function load() with the file name (including the extension) in quotation marks inside of the parentheses. This loads the data into R and calls the object the name it was when it was saved. Therefore we do not need to give it a name ourselves. For each of the other types of data we’ll need to assign a name to the data we’re reading in so it has a name. Whereas we’ve done x &lt;- 2 to say x gets the value of 2, now we’d do x &lt;- DATA where DATA is the way to load in the data and x will get the entire data.frame that is read in. 5.1.2 Excel To read in Excel files, those ending in .csv, we can use the function read_csv() from the package readr (the function read.csv() is included in R by default so it doesn’t require any packages but is far slower than read_csv() so we will not use it). install.packages(&quot;readr&quot;) library(readr) The input in the () is the file name ending in “.csv”. As it is telling R to read a file that is stored on your on the computer, the whole name must be in quotes. Unlike loading an .rda file using load(), there is no name for the object that gets read in so we must assign the data a name. We can use the name shootings as it’s relatively descriptive and easy for us to write. shootings &lt;- read_csv(&quot;data/fatal-police-shootings-data.csv&quot;) #&gt; Parsed with column specification: #&gt; cols( #&gt; id = col_double(), #&gt; name = col_character(), #&gt; date = col_date(format = &quot;&quot;), #&gt; manner_of_death = col_character(), #&gt; armed = col_character(), #&gt; age = col_double(), #&gt; gender = col_character(), #&gt; race = col_character(), #&gt; city = col_character(), #&gt; state = col_character(), #&gt; signs_of_mental_illness = col_logical(), #&gt; threat_level = col_character(), #&gt; flee = col_character(), #&gt; body_camera = col_logical() #&gt; ) read_csv() also reads in data to an object called a tibble which is very similar to a data.frame but has some differences in displaying the data. If we run head() on the data it doesn’t show all columns. This is useful to avoid accidentally printing out a massive amounts of columns. head(shootings) #&gt; # A tibble: 6 x 14 #&gt; id name date manner_of_death armed age gender race city #&gt; &lt;dbl&gt; &lt;chr&gt; &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 3 Tim ~ 2015-01-02 shot gun 53 M A Shel~ #&gt; 2 4 Lewi~ 2015-01-02 shot gun 47 M W Aloha #&gt; 3 5 John~ 2015-01-03 shot and Taser~ unar~ 23 M H Wich~ #&gt; 4 8 Matt~ 2015-01-04 shot toy ~ 32 M W San ~ #&gt; 5 9 Mich~ 2015-01-04 shot nail~ 39 M H Evans #&gt; 6 11 Kenn~ 2015-01-04 shot gun 18 M W Guth~ #&gt; # ... with 5 more variables: state &lt;chr&gt;, signs_of_mental_illness &lt;lgl&gt;, #&gt; # threat_level &lt;chr&gt;, flee &lt;chr&gt;, body_camera &lt;lgl&gt; We can convert it to a data.frame using the function as.data.frame() though that isn’t strictly necessary since tibbles and data.frames operate so similarly. shootings &lt;- as.data.frame(shootings) 5.1.3 Stata For the remaining three data types we’ll use the package haven. install.packages(&quot;haven&quot;) library(haven) haven follows the same syntax for each data type and is the same as with read_csv() - for each data type we simply include the file name (in quotes, with the extension) and designate an name to be assigned the data. Like with read_csv() the functions to read data through haven all start with read_ and end with the extension you’re reading in. read_dta() - Stata file, extension “dta” read_sas() - SAS file, extension “sas” read_sav() - SPSS file, extension “sav” To read the data as a .dta format we can copy the code to read it as a .csv but change .csv to .dta. shootings &lt;- read_dta(&quot;data/fatal-police-shootings-data.dta&quot;) Since we called this new data shootings, R overwrote that object (without warning us!). This is useful because we often want to subset or aggregate data and call it by the same name to avoid making too many objects to keep track of, but watch out for accidentally overwriting an object without noticing! 5.1.4 SAS shootings &lt;- read_sas(&quot;data/fatal-police-shootings-data.sas&quot;) 5.1.5 SPSS shootings &lt;- read_sav(&quot;data/fatal-police-shootings-data.sav&quot;) 5.2 Writing Data When we’re done with a project (or an important part of a project) or when we need to send data to someone, we need to save the data we’ve worked on in a suitable format. For each format, we are saving the data in we will follow the same syntax of function_name(data, \"file_name\") As usual we start with the function name. Then inside the parentheses we have the name of the object we are saving (as it refers to an object in R we do not use quotations) and then the file name, in quotes, ending with the extension you want. For saving an .rda file we use the save() function, otherwise we follow the syntax of write_ ending with the file extension. write_csv() - Excel file, extension “csv” write_dta() - Stata file, extension “dta” write_sas() - SAS file, extension “sas” write_sav() - SPSS file, extension “sav” As with reading the data, write_csv() comes from the readr package while the other formats are from the haven package. 5.2.1 R For saving an .rda file we must set the parameter file to be the name we’re saving. For the other types of data they use the parameter path rather than file but it is not necessary to call them explicitly. save(shootings, file = &quot;data/shootings.rda&quot;) 5.2.2 Excel write_csv(shootings, &quot;data/shootings.csv&quot;) 5.2.3 Stata write_dta(shootings, &quot;data/shootings.dta&quot;) 5.2.4 SAS write_sas(shootings, &quot;data/shootings.sas&quot;) 5.2.5 SPSS write_sav(shootings, &quot;data/shootings.sav&quot;) "],
["graphing-intro.html", "6 Graphing with ggplot2 6.1 What does the data look like? 6.2 Graphing data 6.3 Time-Series Plots 6.4 Scatter Plots 6.5 Color blindness", " 6 Graphing with ggplot2 We’ve made some simple graphs earlier, in this lesson we will use the package ggplot2 to make simple and elegant looking graphs. The ‘gg’ part of ggplot2 stands for ‘grammar of graphics’ which is the idea that most graphs can be made using the same few ‘pieces’. We’ll get into those pieces during this lesson. For a useful cheatsheet for this package see here install.packages(&quot;ggplot2&quot;) library(ggplot2) When working with new data, It’s often useful to quickly graph the data to try to understand what you’re working with. It is also useful when understanding how much to trust the data. The data we will work on is data about alcohol consumption in U.S. states from 1977-2017 from the National Institute of Health. It contains the per capita alcohol consumption for each state for every year. Their method to determine per capita consumption is amount of alcohol sold / number of people aged 14+ living in the state. More details on the data are available here. Now we need to load the data. load(&quot;data/apparent_per_capita_alcohol_consumption.rda&quot;) The name of the data is quite long so for convenience let’s copy it to a new object with a better name, alcohol. alcohol &lt;- apparent_per_capita_alcohol_consumption The original data has every state, region, and the US as a whole. For this lesson we’re using data subsetted to just include states. For now let’s just look at Pennsylvania. penn_alcohol &lt;- alcohol[alcohol$state == &quot;pennsylvania&quot;, ] 6.1 What does the data look like? Before graphing, it’s helpful to see what the data includes. An important thing to check is what variables are available and the units of these variables. names(penn_alcohol) #&gt; [1] &quot;state&quot; #&gt; [2] &quot;year&quot; #&gt; [3] &quot;ethanol_beer_gallons_per_capita&quot; #&gt; [4] &quot;ethanol_wine_gallons_per_capita&quot; #&gt; [5] &quot;ethanol_spirit_gallons_per_capita&quot; #&gt; [6] &quot;ethanol_all_drinks_gallons_per_capita&quot; #&gt; [7] &quot;number_of_beers&quot; #&gt; [8] &quot;number_of_glasses_wine&quot; #&gt; [9] &quot;number_of_shots_liquor&quot; #&gt; [10] &quot;number_of_drinks_total&quot; summary(penn_alcohol) #&gt; state year ethanol_beer_gallons_per_capita #&gt; Length:41 Length:41 Min. :1.210 #&gt; Class :character Class :character 1st Qu.:1.310 #&gt; Mode :character Mode :character Median :1.350 #&gt; Mean :1.344 #&gt; 3rd Qu.:1.380 #&gt; Max. :1.450 #&gt; ethanol_wine_gallons_per_capita ethanol_spirit_gallons_per_capita #&gt; Min. :0.1700 Min. :0.4500 #&gt; 1st Qu.:0.1900 1st Qu.:0.5100 #&gt; Median :0.2100 Median :0.6100 #&gt; Mean :0.2276 Mean :0.5939 #&gt; 3rd Qu.:0.2500 3rd Qu.:0.6800 #&gt; Max. :0.3300 Max. :0.7400 #&gt; ethanol_all_drinks_gallons_per_capita number_of_beers #&gt; Min. :1.850 Min. :286.8 #&gt; 1st Qu.:2.040 1st Qu.:310.5 #&gt; Median :2.220 Median :320.0 #&gt; Mean :2.167 Mean :318.7 #&gt; 3rd Qu.:2.330 3rd Qu.:327.1 #&gt; Max. :2.390 Max. :343.7 #&gt; number_of_glasses_wine number_of_shots_liquor number_of_drinks_total #&gt; Min. :33.74 Min. : 93.43 Min. :394.7 #&gt; 1st Qu.:37.71 1st Qu.:105.89 1st Qu.:435.2 #&gt; Median :41.67 Median :126.65 Median :473.6 #&gt; Mean :45.16 Mean :123.31 Mean :462.3 #&gt; 3rd Qu.:49.61 3rd Qu.:141.18 3rd Qu.:497.1 #&gt; Max. :65.49 Max. :153.64 Max. :509.9 head(penn_alcohol) #&gt; state year ethanol_beer_gallons_per_capita #&gt; 1559 pennsylvania 2017 1.29 #&gt; 1560 pennsylvania 2016 1.31 #&gt; 1561 pennsylvania 2015 1.31 #&gt; 1562 pennsylvania 2014 1.32 #&gt; 1563 pennsylvania 2013 1.34 #&gt; 1564 pennsylvania 2012 1.36 #&gt; ethanol_wine_gallons_per_capita ethanol_spirit_gallons_per_capita #&gt; 1559 0.33 0.71 #&gt; 1560 0.33 0.72 #&gt; 1561 0.32 0.70 #&gt; 1562 0.32 0.70 #&gt; 1563 0.31 0.68 #&gt; 1564 0.31 0.67 #&gt; ethanol_all_drinks_gallons_per_capita number_of_beers #&gt; 1559 2.34 305.7778 #&gt; 1560 2.36 310.5185 #&gt; 1561 2.33 310.5185 #&gt; 1562 2.34 312.8889 #&gt; 1563 2.33 317.6296 #&gt; 1564 2.34 322.3704 #&gt; number_of_glasses_wine number_of_shots_liquor number_of_drinks_total #&gt; 1559 65.48837 147.4128 499.2000 #&gt; 1560 65.48837 149.4891 503.4667 #&gt; 1561 63.50388 145.3366 497.0667 #&gt; 1562 63.50388 145.3366 499.2000 #&gt; 1563 61.51938 141.1841 497.0667 #&gt; 1564 61.51938 139.1079 499.2000 So each row of the data is a single year of data for Pennsylvania. It includes alcohol consumption for wine, liquor, beer, and total drinks - both as gallons of ethanol (a hard unit to interpret) and more traditional measures such as glasses of wine or number of beers. The original data only included the gallons of ethanol data which I converted to the more understandable units. If you encounter data with odd units, it is a good idea to convert it to something easier to understand - especially if you intend to show someone else the data or results! 6.2 Graphing data To make a plot using ggplot(), all you need to do is specify the data set and the variables you want to plot. From there you add on pieces of the graph using the + symbol and then specify what you want added. For ggplot() we need to specify 4 things The data set The x-axis variable The y-axis variable The type of graph - e.g. line, point, etc. Some useful types of graphs are geom_point() - A point graph, can be used for scatter plots geom_line() - A line graph geom_smooth() - Adds a regression line to the graph geom_bar() - A barplot 6.3 Time-Series Plots Let’s start with a time-series of beer consumption in Pennsylvania. In time-series plots the x-axis is always the time variable while the y-axis is the variable whose trend over time is what we’re interested in. When you see a graph showing crime rates over time, this is the type of graph you’re looking at. The code below starts by writing our data set name. Then says what our x- and y-axis variables are called. The x- and y-axis variables are within parentheses of the function called aes(). aes() stands for aesthetic and what’s included inside here describes how the graph will look. It’s not intuitive to remember, but you need to included this. ggplot(penn_alcohol, aes(x = year, y = number_of_beers)) Note that on the x-axis it prints out every single year and makes it completely unreadable. That is because the “year” column is a character type, so R thinks each year is its own category. It prints every single year because it thinks we want every category shown. To fix this we can make the column numeric and ggplot() will be smarter about printing fewer years. penn_alcohol$year &lt;- as.numeric(penn_alcohol$year) ggplot(penn_alcohol, aes(x = year, y = number_of_beers)) When we run it we get our graph. It includes the variable names for each axis and shows the range of data through the tick marks. What is missing is the actual data. For that we need to specify what type of graph it is. We literally add it with the + followed by the type of graph we want. Make sure that the + is at the end of a line, not the start of one. Starting a line with the + will not work. Let’s start with point and line graphs. ggplot(penn_alcohol, aes(x = year, y = number_of_beers)) + geom_point() ggplot(penn_alcohol, aes(x = year, y = number_of_beers)) + geom_line() We can also combine different types of graphs. ggplot(penn_alcohol, aes(x = year, y = number_of_beers)) + geom_point() + geom_line() It looks like there’s a huge change in beer consumption over time. But look at where they y-axis starts. It starts around 280 so really that change is only ~60 beers. That’s because when graphs don’t start at 0, it can make small changes appear big. We can fix this by forcing the y-axis to begin at 0. We can add expand_limits(y = 0) to the graph to say that the value 0 must always appear on the y-axis, even if no data is close to that value. ggplot(penn_alcohol, aes(x = year, y = number_of_beers)) + geom_point() + geom_line() + expand_limits(y = 0) Now that graphs shows what looks like nearly no change even though that is also not true. Which graph is best? It’s hard to say. Inside the types of graphs we can change how it is displayed. As with using plot(), we can specify the color and size of our lines or points. ggplot(penn_alcohol, aes(x = year, y = number_of_beers)) + geom_line(color = &quot;forestgreen&quot;, size = 1.3) Some other useful features are changing the axis labels and the graph title. Unlike in plot() we do not need to include it in the () of ggplot() but use their own functions to add them to the graph. xlab() - x-axis label ylab() - y-axis label ggtitle() - graph title ggplot(penn_alcohol, aes(x = year, y = number_of_beers)) + geom_line(color = &quot;forestgreen&quot;, size = 1.3) + xlab(&quot;Year&quot;) + ylab(&quot;Number of Beers&quot;) + ggtitle(&quot;PA Annual Beer Consumption Per Capita (1977-2017)&quot;) Many time-series plots show multiple variables over the same time period (e.g. murder and robbery over time). There are ways to change the data itself to make creating graphs like this easier, but let’s stick with the data we currently have and just change ggplot(). Start with a normal line graph, this time looking at wine. ggplot(penn_alcohol, aes(x = year, y = number_of_glasses_wine)) + geom_line() Then include a second geom_line() with its own aes() for the second variable. ggplot(penn_alcohol, aes(x = year, y = number_of_glasses_wine)) + geom_line() + geom_line(aes(x = year, y = number_of_shots_liquor)) A problem with this is that both lines are the same color. We need to set a color for each line, and do so within aes(). Instead of providing a color name, we need to provide the name the color will have in the legend. Do so for both lines. ggplot(penn_alcohol, aes(x = year, y = number_of_glasses_wine, color = &quot;Glasses of Wine&quot;)) + geom_line() + geom_line(aes(x = year, y = number_of_shots_liquor, color = &quot;Shots of of Liquor&quot;)) We can change the legend title by using the function labs() and changing the value color to what we want the legend title to be. ggplot(penn_alcohol, aes(x = year, y = number_of_glasses_wine, color = &quot;Glasses of Wine&quot;)) + geom_line() + geom_line(aes(x = year, y = number_of_shots_liquor, color = &quot;Shots of of Liquor&quot;)) + labs(color = &quot;Alcohol Type&quot;) Finally, a useful option to to move the legend from the side to the bottom is setting the theme() function to move the legend.position to “bottom”. This will allow the graph to be wider. ggplot(penn_alcohol, aes(x = year, y = number_of_glasses_wine, color = &quot;Glasses of Wine&quot;)) + geom_line() + geom_line(aes(x = year, y = number_of_shots_liquor, color = &quot;Shots of of Liquor&quot;)) + labs(color = &quot;Alcohol Type&quot;) + theme(legend.position = &quot;bottom&quot;) 6.4 Scatter Plots Making a scatter plot simply requires changing the x-axis from year to another numerical variable and using geom_point(). ggplot(penn_alcohol, aes(x = number_of_shots_liquor, y = number_of_beers)) + geom_point() This graph shows us that when liquor consumption increases, beer consumption also tends to increase. While scatterplots can help show the relationship between variables, we lose the information of how consumption changes over time. 6.5 Color blindness Please keep in mind that some people are color blind so graphs (or maps which we will learn about soon) will be hard to read for these people if we choose the incorrect colors. A helpful site for choosing colors for graphs is colorbrewer2.org This site let’s you select which type of colors you want (sequential and diverging such as shades in a hotspot map, and qualitative such as for data like what we used in this lesson). In the “Only show:” section you can set it to “colorblind safe” to restrict it to colors that allow people with color blindness to read your graph. To the right of this section it shows the HEX codes for each color (a HEX code is just a code that a computer can read and know exactly which color it is). Let’s use an example of a color blind friendly color from the “qualitative” section of ColorBrewer. We have three options on this page (we can change how many colors we want but it defaults to showing 3): green (HEX = #1b9e77), orange (HEX = #d95f02), and purple (HEX = #7570b3). We’ll use the orange and purple colors. To manually set colors in ggplot() we use scale_color_manual(values = c()) and include a vector of color names or HEX codes inside the c(). Doing that using the orange and purple HEX codes will change our graph colors to these two colors. ggplot(penn_alcohol, aes(x = year, y = number_of_glasses_wine, color = &quot;Glasses of Wine&quot;)) + geom_line() + geom_line(aes(x = year, y = number_of_shots_liquor, color = &quot;number_of_shots_liquor&quot;)) + labs(color = &quot;Alcohol Type&quot;) + theme(legend.position = &quot;bottom&quot;) + scale_color_manual(values = c(&quot;#7570b3&quot;, &quot;#d95f02&quot;)) "],
["hotspot-maps.html", "7 Hotspot maps 7.1 A simple map 7.2 What really are maps? 7.3 Making a hotspot map", " 7 Hotspot maps Hotspot maps are used to find where events (marijuana dispensaries, crimes, liquors stores) are especially prevalent. These maps are frequently used by police departments, particularly in determining where to do hotspot policing (which is focusing patrols on high-crime areas). However, there are significant flaws with these kinds of maps. As we’ll see during this lesson, minor changes to how we make the maps can cause significant differences in interpretation. For example, determining the size of the clusters that make up the hotspots can make it seem like there are much larger or smaller areas with hotspots than there actually are. These clusters are also drawn fairly arbitrarily, without taking into account context such as neighborhoods (In Chapter 8 we’ll make maps that try to account for these types of areas). This makes it more difficult to interpret because even though maps give us the context of location, it can combine different areas in an arbitrary way. We’ll explore these issues in more detail throughout the lesson but keep in mind these risks as you make your own hotspot maps. Here, we will make hotspot maps using data on suicides in San Francisco between 2003 and 2017. First we need to read the data, which is called “san_francisco_suicide_2003_2017.csv”. We can name the object we make suicide. library(readr) suicide &lt;- read_csv(&quot;data/san_francisco_suicide_2003_2017.csv&quot;) #&gt; Parsed with column specification: #&gt; cols( #&gt; IncidntNum = col_double(), #&gt; Category = col_character(), #&gt; Descript = col_character(), #&gt; DayOfWeek = col_character(), #&gt; Date = col_character(), #&gt; Time = col_time(format = &quot;&quot;), #&gt; PdDistrict = col_character(), #&gt; Resolution = col_character(), #&gt; Address = col_character(), #&gt; X = col_double(), #&gt; Y = col_double(), #&gt; Location = col_character(), #&gt; PdId = col_double(), #&gt; year = col_double() #&gt; ) suicide &lt;- as.data.frame(suicide) This data contains information on each crime reported in San Francisco including the type of crime (in our case always suicide), a more detailed crime category, and a number of date and location variables. The columns X and Y are our longitude and latitude columns which we will use to graph the data. head(suicide) #&gt; IncidntNum Category Descript DayOfWeek #&gt; 1 180318931 SUICIDE ATTEMPTED SUICIDE BY STRANGULATION Monday #&gt; 2 180315501 SUICIDE ATTEMPTED SUICIDE BY JUMPING Saturday #&gt; 3 180295674 SUICIDE SUICIDE BY LACERATION Saturday #&gt; 4 180263659 SUICIDE SUICIDE Tuesday #&gt; 5 180235523 SUICIDE ATTEMPTED SUICIDE BY INGESTION Friday #&gt; 6 180236515 SUICIDE SUICIDE BY ASPHYXIATION Thursday #&gt; Date Time PdDistrict Resolution Address #&gt; 1 04/30/2018 06:30:00 TARAVAL NONE 0 Block of BRUCE AV #&gt; 2 04/28/2018 17:54:00 NORTHERN NONE 700 Block of HAYES ST #&gt; 3 04/21/2018 12:20:00 RICHMOND NONE 3700 Block of CLAY ST #&gt; 4 04/10/2018 05:13:00 CENTRAL NONE 0 Block of DRUMM ST #&gt; 5 03/30/2018 09:15:00 TARAVAL NONE 0 Block of FAIRFIELD WY #&gt; 6 03/29/2018 17:30:00 RICHMOND NONE 300 Block of 29TH AV #&gt; X Y Location #&gt; 1 -122.4517 37.72218 POINT (-122.45168059935614 37.72218061554315) #&gt; 2 -122.4288 37.77620 POINT (-122.42876060987851 37.77620120112792) #&gt; 3 -122.4546 37.78818 POINT (-122.45462091999406 37.7881754224736) #&gt; 4 -122.3964 37.79414 POINT (-122.39642194376758 37.79414474237039) #&gt; 5 -122.4632 37.72679 POINT (-122.46324153155875 37.72679184368551) #&gt; 6 -122.4893 37.78274 POINT (-122.48929119750689 37.782735835121265) #&gt; PdId year #&gt; 1 1.803189e+13 2018 #&gt; 2 1.803155e+13 2018 #&gt; 3 1.802957e+13 2018 #&gt; 4 1.802637e+13 2018 #&gt; 5 1.802355e+13 2018 #&gt; 6 1.802365e+13 2018 7.1 A simple map To make these maps we will use the package ggmap. install.packages(&quot;ggmap&quot;) library(ggmap) #&gt; Loading required package: ggplot2 #&gt; Google&#39;s Terms of Service: https://cloud.google.com/maps-platform/terms/. #&gt; Please cite ggmap if you use it! See citation(&quot;ggmap&quot;) for details. We’ll start by making the background to our map, showing San Francisco. We do so using the get_map() function from ggmap which gets a map background from a number of sources. We’ll set the source to “stamen” since Google no longer allows us to get a map without creating an account. The first parameter in get_map() is simply coordinates for San Francisco’s bounding box to ensure we get a map of the right spot. A bounding box is four coordinates that connect to make a rectangle, used for determining where in the world to show. An easy way to find the four coordinates for a bounding box is to go to the site Bounding Box. This site has a map of the world and a box on the screen. Move the box to the area you want the map of. You may need to resize the box to cover the area you want. Then in the section that says “Copy &amp; Paste”, change the dropdown box to “CSV”. In the section to the right of this are the four numbers that make up the bounding box. You can copy those numbers into get_map() sf_map &lt;- ggmap(get_map(c(-122.530392,37.698887,-122.351177,37.812996), source = &quot;stamen&quot;)) #&gt; Source : http://tile.stamen.com/terrain/12/653/1582.png #&gt; Source : http://tile.stamen.com/terrain/12/654/1582.png #&gt; Source : http://tile.stamen.com/terrain/12/655/1582.png #&gt; Source : http://tile.stamen.com/terrain/12/653/1583.png #&gt; Source : http://tile.stamen.com/terrain/12/654/1583.png #&gt; Source : http://tile.stamen.com/terrain/12/655/1583.png #&gt; Source : http://tile.stamen.com/terrain/12/653/1584.png #&gt; Source : http://tile.stamen.com/terrain/12/654/1584.png #&gt; Source : http://tile.stamen.com/terrain/12/655/1584.png sf_map Since we saved the map output into sf_map we can reuse this map background for all the maps we’re making in this lesson. This saves us time as we don’t have to wait to download the map every time. Let’s plot the shootings from our data set. Just as with a scatterplot we use the geom_point() function from the ggplot2 package and set our longitude and latitude variables on the x- and y-axis, respectively. sf_map + geom_point(aes(x = X, y = Y), data = suicide) #&gt; Warning: Removed 1 rows containing missing values (geom_point). If we wanted to color the dots we can use color = and then select a color. Let’s try it with “forestgreen”. sf_map + geom_point(aes(x = X, y = Y), data = suicide, color = &quot;forestgreen&quot;) #&gt; Warning: Removed 1 rows containing missing values (geom_point). As with other graphs we can change the size of the dot using size =. sf_map + geom_point(aes(x = X, y = Y), data = suicide, color = &quot;forestgreen&quot;, size = 0.5) #&gt; Warning: Removed 1 rows containing missing values (geom_point). sf_map + geom_point(aes(x = X, y = Y), data = suicide, color = &quot;forestgreen&quot;, size = 2) #&gt; Warning: Removed 1 rows containing missing values (geom_point). For maps like this - with one point per event - it is hard to tell if any events happen on the same, or nearly the same, location as each point is solid green. We want to make the dots semi-transparent so if multiple suicides happen at the same place that dot will be shaded darker than if only one suicide happened there. To do so we use the parameter alpha = which takes an input between 0 and 1 (inclusive). The lower the value the more transparent it is. sf_map + geom_point(aes(x = X, y = Y), data = suicide, color = &quot;forestgreen&quot;, size = 2, alpha = 0.5) #&gt; Warning: Removed 1 rows containing missing values (geom_point). This map is useful because it allows us to easily see where each suicide in San Francisco happened between 2003 and 2017. There are some limitations though. This shows all suicides in a single map, meaning that any time trends are lost. 7.2 What really are maps? Let’s pause for a moment to think about what a map really is. Below, I made a simple scatterplot of our data with one dot per shooting (minus the one without coordinates). Compare this to the map above and you’ll see that they are the same except the map has a useful background while the plot has a blank background. That is all static maps are (in Chapter 9 we’ll learn about interactive maps), scatterplots of coordinates overlayed on a map background. Basically, they are scatterplots with context. And this context is useful, we can interpret the map to see that there are lots of suicides in the northeast part of San Francisco but not so many elsewhere, for example. The exact same pattern is present in the scatterplot but without the ability to tell “where” a dot is. plot(suicide$X, suicide$Y, col = &quot;forestgreen&quot;) 7.3 Making a hotspot map Now we can start making hotspot maps which help to show areas with clusters of events. We’ll do this using hexagonal bins which are an efficient way of showing clusters of events on a map. Our syntax will be similar to the map above but now we want to use the function stat_binhex() rather than geom_point(). It starts the same as before with aex(x = X, y = Y) (or whatever the longitude and latitude columns are called in your data), as well as data = suicide outside of the aes() parameter. There are two new things we need to make the hotspot map. First we add the parameter bins = number_of_bins where “number_of_bins” is a number we select. bins essentially says how large or small we want each cluster of events to be. A smaller value for bins says we want more events clustered together, making larger bins. A larger value for bins has each bin be smaller on the map and capture fewer events. This will become more clear with examples. The second thing is to add the function coord_cartesian() which just tells ggplot() we are going to do some spatial analysis in the making of the bins. We don’t need to add any parameters in this. Let’s start with 60 bins and then try some other number of bins to see how it changes the map. sf_map + stat_binhex(aes(x = X, y = Y), bins = 60, data = suicide) + coord_cartesian() #&gt; Coordinate system already present. Adding new coordinate system, which will replace the existing one. #&gt; Warning: Removed 1 rows containing non-finite values (stat_binhex). From this map we can see that most areas in the city had no suicides and that the areas with the most suicides are in downtown San Francisco. What happens when we drop the number of bins to 30? sf_map + stat_binhex(aes(x = X, y = Y), bins = 30, data = suicide) + coord_cartesian() #&gt; Coordinate system already present. Adding new coordinate system, which will replace the existing one. #&gt; Warning: Removed 1 rows containing non-finite values (stat_binhex). Each bin is much larger and covers nearly all of San Francisco. Be careful with maps like these! This map is so broad that it appears that suicides are ubiquitous across the city. We know from the map showing each suicide as a dot, and that there are &lt;1,300 suicides, that this is not true. Making maps like this make it easy to mislead the reader, including yourself! What about looking at 100 bins? sf_map + stat_binhex(aes(x = X, y = Y), bins = 100, data = suicide) + coord_cartesian() #&gt; Coordinate system already present. Adding new coordinate system, which will replace the existing one. #&gt; Warning: Removed 1 rows containing non-finite values (stat_binhex). Now each bin is very small and a much smaller area in San Francisco has had a suicide. So what is the right number of bins to use? There is no correct universal answer - you must decide what the goal is with the data you are using. This opens up serious issues for manipulation - intentional or not - of the data as the map is so easily changeable without ever changing the data itself. 7.3.1 Colors To change the bin colors we can use the parameter scale_fill_gradient(). This accepts a color for “low” which is when the events are rare and “high” for the bins with frequent events. We’ll use colors from ColorBrewer, selecting the yellow-reddish theme (“3-class YlOrRd”) from the Multi-hue section of the “sequential” data on the page. sf_map + stat_binhex(aes(x = X, y = Y), bins = 60, data = suicide) + coord_cartesian() + scale_fill_gradient(low = &quot;#ffeda0&quot;, high = &quot;#f03b20&quot;) #&gt; Coordinate system already present. Adding new coordinate system, which will replace the existing one. #&gt; Warning: Removed 1 rows containing non-finite values (stat_binhex). By default it labels the legend as “count”. Since we know these are counts of suicides let’s relabel that as such. sf_map + stat_binhex(aes(x = X, y = Y), bins = 60, data = suicide) + coord_cartesian() + scale_fill_gradient(&#39;Suicides&#39;, low = &quot;#ffeda0&quot;, high = &quot;#f03b20&quot;) #&gt; Coordinate system already present. Adding new coordinate system, which will replace the existing one. #&gt; Warning: Removed 1 rows containing non-finite values (stat_binhex). "],
["choropleth-maps.html", "8 Choropleth maps 8.1 Spatial joins 8.2 Making choropleth maps", " 8 Choropleth maps In Chapter 7 we made hotspot maps to show which areas in San Francisco had the most suicides. We made the maps in a number of ways and consistently found that suicides were most prevalent in north and west Philly. In this lesson we will make choropleth maps, which are shaded maps where each “unit” is some known area such as a state or neighborhood. Think of election maps where states are colored blue when a Democratic candidate wins that state and red when a Republican candidate wins. These are choropleth maps - each state is colored to indicate something. In this lesson we will continue to work on the suicide data and make choropleth maps shaded by the number of suicides in each neighborhood (we will define this later in the lesson) in the city. Since we will be working more on the suicide data from San Francisco, let’s read it in now. library(readr) suicide &lt;- read_csv(&quot;data/san_francisco_suicide_2003_2017.csv&quot;) #&gt; Parsed with column specification: #&gt; cols( #&gt; IncidntNum = col_double(), #&gt; Category = col_character(), #&gt; Descript = col_character(), #&gt; DayOfWeek = col_character(), #&gt; Date = col_character(), #&gt; Time = col_time(format = &quot;&quot;), #&gt; PdDistrict = col_character(), #&gt; Resolution = col_character(), #&gt; Address = col_character(), #&gt; X = col_double(), #&gt; Y = col_double(), #&gt; Location = col_character(), #&gt; PdId = col_double(), #&gt; year = col_double() #&gt; ) suicide &lt;- as.data.frame(suicide) The package that we will use to handle geographic data and do most of the work in this lesson is sf. sf is a sophisticated package and does far more than what we will cover in this lesson. For more information about the package’s features please see the website for it here. install.packages(&quot;sf&quot;) library(sf) #&gt; Linking to GEOS 3.6.1, GDAL 2.2.3, PROJ 4.9.3 For this lesson we will need to read in a shapefile that depicts the boundaries of each neighborhood in San Francisco. A shapefile is similar to a data.frame but has information on how to draw a geographic boundary such as a state. The way sf reads in the shapefiles is through the st_read() function. Our input inside the () is a string with the name of the “.shp” file we want to read in (since we are telling R to read a file on the computer rather than an object that exists, it needs to be in quotes). This shapefile contains neighborhoods in San Francisco so we’ll call the object sf_neighborhoods. I downloaded this data from San Francisco’s Open Data site here, selecting the Shapefile format in the Export tab. If you do so yourself it’ll give you a zip file with multiple files in there. This is normal with shapefiles, you will have multiple files and only read in the file with the “.shp” extension to R. We still do need all of the files and st_read() is using them even if not explicitly called. So make sure every file downloaded is in the same working directory as the .shp file. The files from this site had hard to understand file names so I relabeled them all as “san_francisco_neighborhoods” though that doesn’t matter once it’s read into R. sf_neighborhoods &lt;- st_read(&quot;data/san_francisco_neighborhoods.shp&quot;) #&gt; Reading layer `san_francisco_neighborhoods&#39; from data source `C:\\Users\\user\\Dropbox\\R_project\\crimebythenumbers\\data\\san_francisco_neighborhoods.shp&#39; using driver `ESRI Shapefile&#39; #&gt; Simple feature collection with 41 features and 1 field #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -122.5149 ymin: 37.70813 xmax: -122.357 ymax: 37.8333 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +ellps=WGS84 +no_defs As usual when dealing with a new data set, let’s look at the first 6 rows. head(sf_neighborhoods) #&gt; Simple feature collection with 6 features and 1 field #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -122.4543 ymin: 37.70822 xmax: -122.357 ymax: 37.80602 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +ellps=WGS84 +no_defs #&gt; nhood geometry #&gt; 1 Bayview Hunters Point MULTIPOLYGON (((-122.3816 3... #&gt; 2 Bernal Heights MULTIPOLYGON (((-122.4036 3... #&gt; 3 Castro/Upper Market MULTIPOLYGON (((-122.4266 3... #&gt; 4 Chinatown MULTIPOLYGON (((-122.4062 3... #&gt; 5 Excelsior MULTIPOLYGON (((-122.424 37... #&gt; 6 Financial District/South Beach MULTIPOLYGON (((-122.3875 3... The last column is important. In shapefiles, the “geometry” column is the one with the instructions to make the map. This data has a single row for each neighborhood in the city. So the “geometry” column in each row has a list of coordinates which, if connected in order, make up that neighborhood. Since the “geometry” column contains the instructions to map, we can plot() it to show a map of the data. plot(sf_neighborhoods$geometry) Here we have a map of San Francisco broken up into neighborhoods. Is this a perfect representation of the neighborhoods in San Francisco? No. It is simply the city’s attempt to create definitions of neighborhoods. Indeed, you’re likely to find that areas at the border of neighborhoods are more similar to each other than they are to areas at the opposite side of their designated neighborhood. You can read a bit about how San Francisco determined the neighborhood boundaries here but know that this, like all geographic areas that someone has designated, has some degree of inaccuracy and arbitrariness in it. Like many things in criminology, this is just another limitation we will have to keep in mind. In the head() results there was a section about something called “epsg” and “proj4string”. Let’s talk about that specifically since they are important for working with spatial data. A way to get just those two results in the st_crs() function which is part of sf. Let’s look at the “coordinate reference system” (CRS) for sf_neighborhoods. st_crs(sf_neighborhoods) Coordinate Reference System: EPSG: 4326 proj4string: &quot;+proj=longlat +ellps=WGS84 +no_defs&quot; An issue with working with geographic data is that the Earth is not flat. Since the Earth is spherical, there will always be some distortion when trying to plot the data on a flat surface such as a map. To account for this we need to transform the longitude and latitude values we generally have to work properly on a map. We do so by “projecting” our data onto the areas of the Earth we want. This is a complex field with lots of work done on it (both abstractly and for R specifically) so this lesson will be an extremely brief overview of the topic and oversimplify some aspects of it. If we look at the output of st_crs(sf_neighborhoods) we can see that the EPSG is set to 4326 and the proj4string (which tells us the current map projection) is “+proj=longlat +datum=WGS84 +no_defs”. This CRS, WGS84, is a standard CRS and is the one used whenever you use a GPS to find a location. To find the CRS for certain parts of the world see here. If you search that site for “California” you’ll see that California is broken into 6 zones. The site isn’t that helpful on which zones are which but some Googling can often find state or region maps with the zones depicted there. We want California zone 3 which has the EPSG code 2227. We’ll use this code to project this data properly. If we want to get the proj4string for 2227 we can use st_crs(2227) #&gt; Coordinate Reference System: #&gt; EPSG: 2227 #&gt; proj4string: &quot;+proj=lcc +lat_1=38.43333333333333 +lat_2=37.06666666666667 +lat_0=36.5 +lon_0=-120.5 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs&quot; Note the text in “prj4string” that says “+units=us-ft”. This means that the units are in feet. Some projections have units in meters so be mindful of this when doing some analysis such as seeing if a point is within X feet of a certain area. Let’s convert our sf_neighborhoods data to coordinate reference system 2227. sf_neighborhoods &lt;- st_transform(sf_neighborhoods, crs = 2227) st_crs(sf_neighborhoods) Coordinate Reference System: EPSG: 2227 proj4string: &quot;+proj=lcc +lat_1=38.43333333333333 +lat_2=37.06666666666667 +lat_0=36.5 +lon_0=-120.5 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs&quot; 8.1 Spatial joins What we want to do with these neighborhoods is to find out which neighborhood each suicide occurred in and sum up the number of suicides per neighborhood. Once we do that we can make a map at the neighborhood level and be able to measure suicides-per-neighborhood. A spatial join is very similar to regular joins where we merge two data sets based on common variables (such as state name or unique ID code of a person). In this case it merges based on some shared geographic feature such as if two lines intersect or (as we will do so here) if a point is within some geographic area. Right now our suicide data is in a data.frame with some info on each suicide and the longitude and latitude of the suicide in separate columns. We want to turn this data.frame into a spatial object to allow us to find which neighborhood each suicide happened in. We can convert it into a spatial object using the st_as_sf() function from sf. Our input is first our data, suicide. Then in the coords parameter we put a vector of the column names so the function knows which columns are the longitude and latitude columns to convert to a “geometry” column like we saw in sf_neighborhoods earlier. We’ll set the CRS to be the WGS84 standard we saw earlier but we will change it to match the CRS that the neighborhood data has. suicide &lt;- st_as_sf(suicide, coords = c(&quot;X&quot;, &quot;Y&quot;), crs = &quot;+proj=longlat +ellps=WGS84 +no_defs&quot;) We want our suicides data in the same projection as the neighborhoods data so we need to use st_transform() to change the projection. Since we want the CRS to be the same as in sf_neighborhoods, we can set it using st_crs(sf_neighborhoods) to use the right CRS. suicide &lt;- st_transform(suicide, crs = st_crs(sf_neighborhoods)) Now we can take a look at head() to see if it was projected. head(suicide) #&gt; Simple feature collection with 6 features and 12 fields #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 5986822 ymin: 2091310 xmax: 6013739 ymax: 2117180 #&gt; epsg (SRID): 2227 #&gt; proj4string: +proj=lcc +lat_1=38.43333333333333 +lat_2=37.06666666666667 +lat_0=36.5 +lon_0=-120.5 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs #&gt; IncidntNum Category Descript DayOfWeek #&gt; 1 180318931 SUICIDE ATTEMPTED SUICIDE BY STRANGULATION Monday #&gt; 2 180315501 SUICIDE ATTEMPTED SUICIDE BY JUMPING Saturday #&gt; 3 180295674 SUICIDE SUICIDE BY LACERATION Saturday #&gt; 4 180263659 SUICIDE SUICIDE Tuesday #&gt; 5 180235523 SUICIDE ATTEMPTED SUICIDE BY INGESTION Friday #&gt; 6 180236515 SUICIDE SUICIDE BY ASPHYXIATION Thursday #&gt; Date Time PdDistrict Resolution Address #&gt; 1 04/30/2018 06:30:00 TARAVAL NONE 0 Block of BRUCE AV #&gt; 2 04/28/2018 17:54:00 NORTHERN NONE 700 Block of HAYES ST #&gt; 3 04/21/2018 12:20:00 RICHMOND NONE 3700 Block of CLAY ST #&gt; 4 04/10/2018 05:13:00 CENTRAL NONE 0 Block of DRUMM ST #&gt; 5 03/30/2018 09:15:00 TARAVAL NONE 0 Block of FAIRFIELD WY #&gt; 6 03/29/2018 17:30:00 RICHMOND NONE 300 Block of 29TH AV #&gt; Location PdId year #&gt; 1 POINT (-122.45168059935614 37.72218061554315) 1.803189e+13 2018 #&gt; 2 POINT (-122.42876060987851 37.77620120112792) 1.803155e+13 2018 #&gt; 3 POINT (-122.45462091999406 37.7881754224736) 1.802957e+13 2018 #&gt; 4 POINT (-122.39642194376758 37.79414474237039) 1.802637e+13 2018 #&gt; 5 POINT (-122.46324153155875 37.72679184368551) 1.802355e+13 2018 #&gt; 6 POINT (-122.48929119750689 37.782735835121265) 1.802365e+13 2018 #&gt; geometry #&gt; 1 POINT (5997229 2091310) #&gt; 2 POINT (6004262 2110838) #&gt; 3 POINT (5996881 2115353) #&gt; 4 POINT (6013739 2117180) #&gt; 5 POINT (5993921 2093059) #&gt; 6 POINT (5986822 2113584) We can see it is now a “simple feature collection” with the correct projection. And we can see there is a new column called “geometry” just like in sf_neighborhoods. The type of data in “geometry” is POINT since our data is just a single location instead of a polygon like in the neighborhoods data. Since we have both the neighborhoods and the suicides data let’s make a quick map to see the data. plot(sf_neighborhoods$geometry) plot(suicide$geometry, add = TRUE, col = &quot;red&quot;) Our next step is to combine these two data sets to figure out how many suicides occurred in each neighborhood. This will be a multi-step process so let’s plan it out before beginning. Our suicide data is one row for each suicide, our neighborhood data is one row for each neighborhood. Since our goal is to map at the neighborhood-level we need to get the neighborhood where each suicide occurred then aggregate up to the neighborhood-level to get a count of the suicides-per-neighborhood. Then we need to combine that with that the original neighborhood data (since we need the “geometry” column) and we can then map it. Find which neighborhood each suicide happened in Aggregate suicide data until we get one row per neighborhood and a column showing the number of suicides in that neighborhood Combine with the neighborhood data Make a map We’ll start by finding the neighborhood where each suicide occurred using the function st_join() which is a function in sf. This does a spatial join and finds the polygon (neighborhood in our case) where each point is located in. Since we will be aggregating the data, let’s call the output of this function suicide_agg. The order in the () is important! For our aggregation we want the output to be at the suicide-level so we start with the suicide data. In the next step we’ll see why this matters. suicide_agg &lt;- st_join(suicide, sf_neighborhoods) Let’s look at the first 6 rows. head(suicide_agg) #&gt; Simple feature collection with 6 features and 13 fields #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 5986822 ymin: 2091310 xmax: 6013739 ymax: 2117180 #&gt; epsg (SRID): 2227 #&gt; proj4string: +proj=lcc +lat_1=38.43333333333333 +lat_2=37.06666666666667 +lat_0=36.5 +lon_0=-120.5 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs #&gt; IncidntNum Category Descript DayOfWeek #&gt; 1 180318931 SUICIDE ATTEMPTED SUICIDE BY STRANGULATION Monday #&gt; 2 180315501 SUICIDE ATTEMPTED SUICIDE BY JUMPING Saturday #&gt; 3 180295674 SUICIDE SUICIDE BY LACERATION Saturday #&gt; 4 180263659 SUICIDE SUICIDE Tuesday #&gt; 5 180235523 SUICIDE ATTEMPTED SUICIDE BY INGESTION Friday #&gt; 6 180236515 SUICIDE SUICIDE BY ASPHYXIATION Thursday #&gt; Date Time PdDistrict Resolution Address #&gt; 1 04/30/2018 06:30:00 TARAVAL NONE 0 Block of BRUCE AV #&gt; 2 04/28/2018 17:54:00 NORTHERN NONE 700 Block of HAYES ST #&gt; 3 04/21/2018 12:20:00 RICHMOND NONE 3700 Block of CLAY ST #&gt; 4 04/10/2018 05:13:00 CENTRAL NONE 0 Block of DRUMM ST #&gt; 5 03/30/2018 09:15:00 TARAVAL NONE 0 Block of FAIRFIELD WY #&gt; 6 03/29/2018 17:30:00 RICHMOND NONE 300 Block of 29TH AV #&gt; Location PdId year #&gt; 1 POINT (-122.45168059935614 37.72218061554315) 1.803189e+13 2018 #&gt; 2 POINT (-122.42876060987851 37.77620120112792) 1.803155e+13 2018 #&gt; 3 POINT (-122.45462091999406 37.7881754224736) 1.802957e+13 2018 #&gt; 4 POINT (-122.39642194376758 37.79414474237039) 1.802637e+13 2018 #&gt; 5 POINT (-122.46324153155875 37.72679184368551) 1.802355e+13 2018 #&gt; 6 POINT (-122.48929119750689 37.782735835121265) 1.802365e+13 2018 #&gt; nhood geometry #&gt; 1 Oceanview/Merced/Ingleside POINT (5997229 2091310) #&gt; 2 Hayes Valley POINT (6004262 2110838) #&gt; 3 Presidio Heights POINT (5996881 2115353) #&gt; 4 Financial District/South Beach POINT (6013739 2117180) #&gt; 5 West of Twin Peaks POINT (5993921 2093059) #&gt; 6 Outer Richmond POINT (5986822 2113584) There is now the nhood column from the neighborhoods data which says which neighborhood the suicide happened in. Now we can aggregate up to the neighborhood-level. For now we will use the code to aggregate the number of suicides per neighborhood. Remember, the aggregate() command aggregates a numeric value by some categorical value. Here we aggregate the number of suicides per neighborhood. So our code will be aggregate(number_suicides ~ nhood, data = suicide_agg, FUN = sum) We actually don’t have a variable with the number of suicides so we need to make that. We can simply call it number_suicides and give it that value of 1 since each row is only one suicide. suicide_agg$number_suicides &lt;- 1 Now we can write the aggregate() code and save the results back into suicide_agg. suicide_agg &lt;- aggregate(number_suicides ~ nhood, data = suicide_agg, FUN = sum) Let’s check a summary of the number_suicides variable we made. summary(suicide_agg$number_suicides) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; 1.00 15.00 24.00 33.08 38.50 141.00 The minimum is one suicide per neighborhood, 33 on average, and 141 in the neighborhood with the most suicides. So what do we make of this data? Well, there are some data issues that cause problems in these results. Let’s think about the minimum value. Did every single neighborhood in the city have at least one suicide? No. Take a look at the number of rows in this data, keeping in mind there should be one row per neighborhood. nrow(suicide_agg) #&gt; [1] 39 And let’s compare it to the sf_neighborhoods data. nrow(sf_neighborhoods) #&gt; [1] 41 The suicides data is missing 2 neighborhoods. That is because if no suicides occurred there, there would never be a matching row in the data so that neighborhood wouldn’t appear in the suicide data. That’s not going to be a major issue here but is something to keep in mind in future research. The data is ready to merge with the sf_neighborhoods data. We’ll introduce a new function that makes merging data simple. This function comes from the dplyr package so we need to install and tell R we want to use it using library(). install.packages(&quot;dplyr&quot;) library(dplyr) #&gt; #&gt; Attaching package: &#39;dplyr&#39; #&gt; The following objects are masked from &#39;package:stats&#39;: #&gt; #&gt; filter, lag #&gt; The following objects are masked from &#39;package:base&#39;: #&gt; #&gt; intersect, setdiff, setequal, union The function we will use is left_join() which takes two parameters, the two data sets to join together. left_join(data1, data2) This function joins these data and keeps all of the rows from the left data and every column from both data sets. It combines the data based on any matching columns (matching meaning same column name) in both data sets. Since in our data sets, the column nhood exists in both, it will merge the data based on that column. There are two other functions that are similar but differ based on which rows they keep. left_join() - All rows from Left data and all columns from Left and Right data right_join() - All rows from Right data and all columns from Left and Right data full_join() - All rows and all columns from Left and Right data We could alternatively use the merge() function which is built into R but that function is slower than the dplyr functions and requires us to manually set the matching columns. We want to keep all rows in sf_neighborhoods (keep all neighborhoods) so we can use left_join(sf_neighborhoods, suicide_agg). Let’s save the results into a new data.frame called sf_neighborhoods_suicide. sf_neighborhoods_suicide &lt;- left_join(sf_neighborhoods, suicide_agg) #&gt; Joining, by = &quot;nhood&quot; If we look at summary() again for number_suicides we can see that there are now 2 rows with NAs. These are the neighborhoods where there were no suicides so they weren’t present in the suicide_agg data. summary(sf_neighborhoods_suicide$number_suicides) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s #&gt; 1.00 15.00 24.00 33.08 38.50 141.00 2 We need to convert these values to 0. We will use the is.na() function to conditionally find all rows with an NA value in the number_suicides column and use square bracket notation to change the value to 0. sf_neighborhoods_suicide$number_suicides[is.na(sf_neighborhoods_suicide$number_suicides)] &lt;- 0 Checking it again we see that the minimum is now 0 and the mean number of suicides decreases a bit to about 31.5 per neighborhood. summary(sf_neighborhoods_suicide$number_suicides) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; 0.00 12.00 23.00 31.46 36.00 141.00 8.2 Making choropleth maps Finally we are ready to make some choropleth maps. For these maps we are going to use ggplot2 again so we need to load it. library(ggplot2) ggplot2’s benefit is you can slowly build graphs or maps and improve the graph at every step. Earlier, we used functions such as geom_line() for line graphs and geom_point() for scatter plots. For mapping these polygons we will use geom_sf() which knows how to handle spatial data. As usual we will start with ggplot(), inputting our data first. Then inside of aes (the aesthetics of the graph/map) we use a new parameter fill. In fill we will put in the number_suicides column and it will color the polygons (neighborhoods) based on values in that column. Then we can add the geom_sf(). ggplot(sf_neighborhoods_suicide, aes(fill = number_suicides)) + geom_sf() We have now created a choropleth map showing the number of suicides per neighborhood in San Francisco! Based on the legend, neighborhoods that are light blue have the most suicides while neighborhoods that are dark blue have the fewest (or none at all). Normally we’d want the opposite, with darker areas signifying a greater amount of whatever the map is showing. We can use scale_fill_gradient() to set the colors to what we want. We input a color for low value and a color for high value and it’ll make the map shade by those colors. ggplot(sf_neighborhoods_suicide, aes(fill = number_suicides)) + geom_sf() + scale_fill_gradient(low = &quot;white&quot;, high = &quot;red&quot;) This gives a much better map and clearly shows the areas where suicides are most common and where there were no suicides. To make this map easier to read and look better, let’s add a title to the map and to the legend. ggplot(sf_neighborhoods_suicide, aes(fill = number_suicides)) + geom_sf() + scale_fill_gradient(low = &quot;white&quot;, high = &quot;red&quot;) + labs(fill = &quot;# of suicides&quot;, title = &quot;Suicides in San Francisco, by neighborhood&quot;, subtitle = &quot;2003 - 2017&quot;) Since the coordinates don’t add anything to the map, let’s get rid of them. ggplot(sf_neighborhoods_suicide, aes(fill = number_suicides)) + geom_sf() + scale_fill_gradient(low = &quot;white&quot;, high = &quot;red&quot;) + labs(fill = &quot;# of suicides&quot;, title = &quot;Suicides in San Francisco, by neighborhood&quot;, subtitle = &quot;2003 - 2017&quot;) + theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank()) So what should we take away from this map? There are more suicides in the downtown area than any other place in the city. Does this mean that people are more likely to kill themselves there than elsewhere? Not necessarily. A major mistake people make when making a choropleth map (or really any type of map) is accidentally making a population map. The darker shaded parts of our map are also where a lot of people live. So if there are more people, it is reasonable that there would be more suicides (or crimes, etc.). What we’d really want to do is make a rate per some population (usually per 100k though this assumes equal risk for every person in the city which isn’t really correct) to control for population differences. We’ll use this data in Chapter 9 to make interactive choropleth maps so let’s save it. save(sf_neighborhoods_suicide, file = &quot;data/sf_neighborhoods_suicide.rda&quot;) "],
["interactive-maps.html", "9 Interactive maps 9.1 Why do interactive graphs matter? 9.2 Making the interactive map 9.3 Adding popup information 9.4 Dealing with too many markers 9.5 Interactive choropleth maps", " 9 Interactive maps While maps of data are useful, their ability to show incident-level information is quite limited. They tend to show broad trends - where crime happened in a city - rather than provide information about specific crime incidents. While broad trends are important, there are significant drawbacks about being unable to get important information about an incident without having to check the data. An interactive map bridges this gap by showing trends while allowing you to zoom into individual incidents and see information about each incident. For this lesson we will be using data on every marijuana dispensary in San Francisco that has an active dispensary license as of late September 2019. The file is called “san_francisco_marijuana_geocoded.csv”. When downloaded from California’s Bureau of Cannabis Control (here if you’re interested) the data contains the address of each dispensary but does not have coordinates. Without coordinates we are unable to map points, meaning we need to geocode them. Geocoding is the process of taking an address and getting the longitude and latitude of that address for mapping. For this lesson I’ve already geocoded the data and we’ll learn how to do so in Chapter 15. library(readr) marijuana &lt;- read_csv(&quot;data/san_francisco_marijuana_geocoded.csv&quot;) #&gt; Parsed with column specification: #&gt; cols( #&gt; License_Number = col_character(), #&gt; License_Type = col_character(), #&gt; Business_Owner = col_character(), #&gt; Business_Contact_Information = col_character(), #&gt; Business_Structure = col_character(), #&gt; Premise_Address = col_character(), #&gt; Status = col_character(), #&gt; Issue_Date = col_character(), #&gt; Expiration_Date = col_character(), #&gt; Activities = col_character(), #&gt; `Adult-Use/Medicinal` = col_character(), #&gt; lon = col_double(), #&gt; lat = col_double() #&gt; ) marijuana &lt;- as.data.frame(marijuana) 9.1 Why do interactive graphs matter? 9.1.1 Understanding your data The most important thing to learn from this course is that understanding your data is crucial to good research. Making interactive maps is a very useful way to better understand your data as you can immediately see geographic patterns and quickly look at characteristics of those incidents to understand them. In this lesson we will make a map of each marijuana dispensary in San Francisco that lets you click on the dispensary and see some information about it. If we see a cluster of dispensaries, we can click on each one to see if they are similar - for example if owned by the same person. Though it is possible to find these patterns just looking at the data, it is easier to be able to see a geographic pattern and immediately look at information about each incident. 9.1.2 Police departments use them Interactive maps are popular in large police departments such as Philadelphia and New York City. They allow easy understanding of geographic patterns in the data and, importantly, allow such access to people who do not have the technical skills necessary to create the maps. If nothing else, learning interactive maps may help you with a future job. 9.2 Making the interactive map As usual, let’s take a look at the top 6 rows of the data. head(marijuana) #&gt; License_Number License_Type Business_Owner #&gt; 1 C10-0000614-LIC Cannabis - Retailer License Terry Muller #&gt; 2 C10-0000586-LIC Cannabis - Retailer License Jeremy Goodin #&gt; 3 C10-0000587-LIC Cannabis - Retailer License Justin Jarin #&gt; 4 C10-0000539-LIC Cannabis - Retailer License Ondyn Herschelle #&gt; 5 C10-0000522-LIC Cannabis - Retailer License Ryan Hudson #&gt; 6 C10-0000523-LIC Cannabis - Retailer License Ryan Hudson #&gt; Business_Contact_Information #&gt; 1 OUTER SUNSET HOLDINGS, LLC : Barbary Coast Sunset : Email- terry@barbarycoastsf.com : Phone- 5107173246 #&gt; 2 URBAN FLOWERS : Urban Pharm : Email- hilary@urbanpharmsf.com : Phone- 9168335343 : Website- www.up415.com #&gt; 3 CCPC, INC. : The Green Door : Email- alicia@greendoorsf.com : Phone- 4155419590 : Website- www.greendoorsf.com #&gt; 4 SEVENTY SECOND STREET : Flower Power SF : Email- flowerpowersf@hotmail.com : Phone- 5103681262 : Website- flowerpowerdispensary.com #&gt; 5 HOWARD STREET PARTNERS, LLC : The Apothecarium : Email- Ryan@apothecarium.com : Phone- 4157469001 : Website- www.apothecarium.com #&gt; 6 DEEP THOUGHT, LLC : The Apothecarium : Email- ryan@pothecarium.com : Phone- 4157469001 : Website- www.Apothecarium.com #&gt; Business_Structure Premise_Address Status #&gt; 1 Limited Liability Company 2165 IRVING ST san francisco, CA 94122 Active #&gt; 2 Corporation 122 10TH ST SAN FRANCISCO, CA 941032605 Active #&gt; 3 Corporation 843 Howard ST SAN FRANCISCO, CA 94103 Active #&gt; 4 Corporation 70 SECOND ST SAN FRANCISCO, CA 94105 Active #&gt; 5 Limited Liability Company 527 Howard ST San Francisco, CA 94105 Active #&gt; 6 Limited Liability Company 2414 Lombard ST San Francisco, CA 94123 Active #&gt; Issue_Date Expiration_Date Activities Adult-Use/Medicinal #&gt; 1 9/13/2019 9/12/2020 N/A for this license type BOTH #&gt; 2 8/26/2019 8/25/2020 N/A for this license type BOTH #&gt; 3 8/26/2019 8/25/2020 N/A for this license type BOTH #&gt; 4 8/5/2019 8/4/2020 N/A for this license type BOTH #&gt; 5 7/29/2019 7/28/2020 N/A for this license type BOTH #&gt; 6 7/29/2019 7/28/2020 N/A for this license type BOTH #&gt; lon lat #&gt; 1 -122.4811 37.76337 #&gt; 2 -122.4156 37.77496 #&gt; 3 -122.4037 37.78245 #&gt; 4 -122.4003 37.78837 #&gt; 5 -122.3967 37.78798 #&gt; 6 -122.4413 37.79920 This data has information about the type of license, who the owner is, where the dispensary is (as an address and as coordinates), and contact information. We’ll be making a map showing every dispensary in the city and make it so when you click a dot it’ll make a popup showing information about that dispensary. We will use the package leaflet for our interactive map. leaflet produces maps similar to Google Maps with circles (or any icon we choose) for each value we add to the map. It allows you to zoom in, scroll around, and provides context to each incident that isn’t available on a static map. install.packages(&quot;leaflet&quot;) library(leaflet) To make a leaflet map we need to run the function leaflet() and add a tile to the map. A tile is simply the background of the map. This website provides a large number of potential tiles to use, though many are not relevant to our purposes of crime mapping. We will use a standard tile from Open Street Maps. This tile gives street names and highlights important features such has parks and large stores which provides useful contexts for looking at the data. The attribution parameter isn’t strictly necessary but it is good form to say where your tile is from. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) When you run the above code it shows a world map (copied several times). Zoom into it and it’ll start showing relevant features of wherever you’re looking. Note the %&gt;% between the leaflet() function and the addTiles() function. This is called a “pipe” in R and is used like the + in ggplot() to combine multiple functions together. This is used heavily in what is called the “tidyverse”, a series of packages that are prominent in modern R and useful for data analysis. We won’t be covering them in this book but for more information on them you can check the tidyverse website. For this lesson you need to know that each piece of the leaflet function must end with %&gt;% for the next line to work. To add the points to the graph we use the function addMarkers() which has two parameters, lng and lat. For both parameters we put the column in which the longitude and latitude are, respectively. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addMarkers(lng = marijuana$lon, lat = marijuana$lat) It now adds an icon indicating where every dispensary in our data is. You can zoom in and scroll around to see more about where the dispensaries are. There are only a few dozen locations in the data so the popups overlapping a bit doesn’t affect our map too much. If we had more - such as crime data with millions of offenses - it would make it very hard to read. To change the icons to circles we can change the function addMarkers() to addCircleMarkers(), keeping the rest of the code the same, leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addCircleMarkers(lng = marijuana$lon, lat = marijuana$lat) This makes the icon into circles which take up less space than icons. To adjust the size of our icons we use the radius parameter in addMarkers() or addCircleMarkers(). The larger the radius, the larger the icons. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addCircleMarkers(lng = marijuana$lon, lat = marijuana$lat, radius = 5) Setting the radius option to 5 shrinks the size of the icon a lot. In your own maps you’ll have to fiddle with this option to get it to look the way you want. Let’s move on to adding information about each icon when clicked upon. 9.3 Adding popup information The parameter popup in the addMarkers() or addCircleMarkers() functions lets you input a character value (if not already a character value it will convert it to one) and that will be shown as a popup when you click on the icon. Let’s start simple here by inputting the business owner column in our data and then build it up to a more complicated popup. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addCircleMarkers(lng = marijuana$lon, lat = marijuana$lat, radius = 5, popup = marijuana$Business_Owner) Try clicking around and you’ll see that the owner of the dispensary you clicked on appears over the dot. We usually want to have a title indicating what the value in the popup means. We can do this by using the paste() function to combine text explaining the value with the value itself. Let’s add the words “Business Owner:” before the business owner column. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addCircleMarkers(lng = marijuana$lon, lat = marijuana$lat, radius = 5, popup = paste(&quot;Business Owner:&quot;, marijuana$Business_Owner)) We don’t have too much information in the data but we let’s add the address and license number to the popup by adding them to the paste() function we’re using. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addCircleMarkers(lng = marijuana$lon, lat = marijuana$lat, radius = 5, popup = paste(&quot;Business Owner:&quot;, marijuana$Business_Owner, &quot;Address:&quot;, marijuana$Premise_Address, &quot;License:&quot;, marijuana$License_Number)) Just adding the location text makes it try to print out everything on one line which is hard to read. If we add the text &lt;br&gt; where we want a line break it will make one. &lt;br&gt; is the HTML tag for line-break which is why it works making a new line in this case. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addCircleMarkers(lng = marijuana$lon, lat = marijuana$lat, radius = 5, popup = paste(&quot;Business Owner:&quot;, marijuana$Business_Owner, &quot;&lt;br&gt;&quot;, &quot;Address:&quot;, marijuana$Premise_Address, &quot;&lt;br&gt;&quot;, &quot;License:&quot;, marijuana$License_Number)) 9.4 Dealing with too many markers In our case with only 33 rows of data, turning the markers to circles solves our visibility issue. In cases with many more rows of data, this doesn’t always work. A solution for this is to cluster the data into groups where the dots only show if you zoom down. If we add the code clusterOptions = markerClusterOptions() to our addCircleMarkers() it will cluster for us. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addCircleMarkers(lng = marijuana$lon, lat = marijuana$lat, radius = 5, popup = paste(&quot;Business Owner:&quot;, marijuana$Business_Owner, &quot;&lt;br&gt;&quot;, &quot;Address:&quot;, marijuana$Premise_Address, &quot;&lt;br&gt;&quot;, &quot;License:&quot;, marijuana$License_Number), clusterOptions = markerClusterOptions()) Locations close to each other are grouped together in fairly arbitrary groupings and we can see how large each grouping is by moving our cursor over the circle. Click on a circle or zoom in and and it will show smaller groupings at lower levels of aggregation. Keep clicking or zooming in and it will eventually show each location as its own circle. This method is very useful for dealing with huge amounts of data as it avoids overflowing the map with too many icons at one time. A downside, however, is that the clusters are created arbitrarily meaning that important context, such as neighborhood, can be lost. 9.5 Interactive choropleth maps In Chapter 8 we worked on choropleth maps which are maps with shaded regions, such as states colored by which political party won them in an election. Here we will make interactive choropleth maps where you can click on a shaded region and see information about that region. We’ll make the same map as before - neighborhoods shaded by the number of suicides. Let’s load the San Francisco suicides-by-neighborhood data that we made earlier. load(&quot;data/sf_neighborhoods_suicide.rda&quot;) We’ll begin the leaflet map similar to before but use the function addPolygons() and our input here is the geometry column of sf_neighborhoods_suicide. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addPolygons(data = sf_neighborhoods_suicide$geometry) #&gt; Warning: sf layer is not long-lat data #&gt; Warning: sf layer has inconsistent datum (+proj=lcc +lat_1=38.43333333333333 +lat_2=37.06666666666667 +lat_0=36.5 +lon_0=-120.5 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs). #&gt; Need &#39;+proj=longlat +datum=WGS84&#39; It gives us a blank map because our polygons are projected to San Francisco’s projection while the leaflet map expects the standard CRS, WGS84 which uses longitude and latitude. So we need to change our projection to that using the st_transform() function from the sf package. library(sf) #&gt; Linking to GEOS 3.6.1, GDAL 2.2.3, PROJ 4.9.3 sf_neighborhoods_suicide &lt;- st_transform(sf_neighborhoods_suicide, crs = &quot;+proj=longlat +datum=WGS84&quot;) Now let’s try again. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addPolygons(data = sf_neighborhoods_suicide$geometry) It made a map with large blue lines indicating each neighborhood. Let’s change the appearance of the graph a bit before making a popup or shading the neighborhoods The parameter color in addPolygons() changes the color of the lines - let’s change it to black. The lines are also very large, blurring into each other and making the neighborhoods hard to see. We can change the weight parameter to alter the size of these lines - smaller values are smaller lines. Let’s try setting this to 1. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addPolygons(data = sf_neighborhoods_suicide$geometry, color = &quot;black&quot;, weight = 1) That looks better and we can clearly distinguish each neighborhood now. As we did earlier, we can add the popup text directly to the function which makes the geographic shapes, in this case addPolygons(). Let’s add the nhood column value - the name of that neighborhood - and the number of suicides that occurred in that neighborhood. As before, when we click on a neighborhood a popup appears with the output we specified. leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addPolygons(data = sf_neighborhoods_suicide$geometry, col = &quot;black&quot;, weight = 1, popup = paste0(&quot;Neighborhood: &quot;, sf_neighborhoods_suicide$nhood, &quot;&lt;br&gt;&quot;, &quot;Number of Suicides: &quot;, sf_neighborhoods_suicide$number_suicides)) For these types of maps we generally want to shade each polygon to indicate how frequently the event occurred in the polygon. We’ll use the function colorNumeric() which takes a lot of the work out of the process of coloring in the map. This function takes two inputs, first a color palette which we can get from the site colorbrewer2. Let’s use the fourth bar in the Sequential page, which is light orange to red. If you look in the section with each HEX value it says that the palette is “3-class OrRd”. The “3-class” just means we selected 3 colors, the “OrRd” is the part we want. That will tell colorNumeric() to make the palette using these colors. The second parameter is the column for our numeric variable, number_suicides. We will save the output of colorNumeric(\"OrRd\", sf_neighborhoods_suicide$number_suicides) as a new variable which we’ll call pal for convenience. Then inside of addPolygons() we’ll set the parameter fillColor to pal(sf_neighborhoods_suicide$number_suicides), running this function on the column. What this really does is determine which color every neighborhood should be based on the value in the number_suicides column. pal &lt;- colorNumeric(&quot;OrRd&quot;, sf_neighborhoods_suicide$number_suicides) leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addPolygons(data = sf_neighborhoods_suicide$geometry, col = &quot;black&quot;, weight = 1, popup = paste0(&quot;Neighborhood: &quot;, sf_neighborhoods_suicide$nhood, &quot;&lt;br&gt;&quot;, &quot;Number of Suicides: &quot;, sf_neighborhoods_suicide$number_suicides), fillColor = pal(sf_neighborhoods_suicide$number_suicides)) Since the neighborhoods are transparent, it is hard to distinguish which color is shown. We can make each neighborhood a solid color by setting the parameter fillOpacity inside of addPolygons() to 1. pal &lt;- colorNumeric(&quot;OrRd&quot;, sf_neighborhoods_suicide$number_suicides) leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addPolygons(data = sf_neighborhoods_suicide$geometry, col = &quot;black&quot;, weight = 1, popup = paste0(&quot;Neighborhood: &quot;, sf_neighborhoods_suicide$nhood, &quot;&lt;br&gt;&quot;, &quot;Number of Suicides: &quot;, sf_neighborhoods_suicide$number_suicides), fillColor = pal(sf_neighborhoods_suicide$number_suicides), fillOpacity = 1) To add a legend to this we use the function addLegend() which takes three parameters. pal asks which color palette we are using - we want it to be the exact same as we use to color the neighborhoods so we’ll use the pal object we made. The values parameter is used for which column our numeric values are from, in our case the number_suicides column so we’ll input that. Finally opacity determines how transparent the legend will be. As each neighborhood is set to not be transparent at all, we’ll also set this to 1 to be consistent. pal &lt;- colorNumeric(&quot;OrRd&quot;, sf_neighborhoods_suicide$number_suicides) leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addPolygons(data = sf_neighborhoods_suicide$geometry, col = &quot;black&quot;, weight = 1, popup = paste0(&quot;Neighborhood: &quot;, sf_neighborhoods_suicide$nhood, &quot;&lt;br&gt;&quot;, &quot;Number of Suicides: &quot;, sf_neighborhoods_suicide$number_suicides), fillColor = pal(sf_neighborhoods_suicide$number_suicides), fillOpacity = 1) %&gt;% addLegend(pal = pal, values = sf_neighborhoods_suicide$number_suicides, opacity = 1) Finally, we can add a title to the legend using the title parameter inside of addLegend(). pal &lt;- colorNumeric(&quot;OrRd&quot;, sf_neighborhoods_suicide$number_suicides) leaflet() %&gt;% addTiles(&#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, attribution = &#39;&amp;copy; &lt;a href=&quot;http://openstreetmap.org&quot;&gt; OpenStreetMap&lt;/a&gt; contributors&#39;) %&gt;% addPolygons(data = sf_neighborhoods_suicide$geometry, col = &quot;black&quot;, weight = 1, popup = paste0(&quot;Neighborhood: &quot;, sf_neighborhoods_suicide$nhood, &quot;&lt;br&gt;&quot;, &quot;Number of Suicides: &quot;, sf_neighborhoods_suicide$number_suicides), fillColor = pal(sf_neighborhoods_suicide$number_suicides), fillOpacity = 1) %&gt;% addLegend(pal = pal, values = sf_neighborhoods_suicide$number_suicides, opacity = 1, title = &quot;Suicides&quot;) "],
["r-markdown.html", "10 R Markdown 10.1 Code 10.2 Tables 10.3 Making the output file", " 10 R Markdown When conducting research your end product is usually a Word Document or a PDF which reports on the research you’ve done, often including several graphs or tables. In many cases people do the data work in R, producing the graphs or numbers for the table, and then write up the results in Word or LaTeX. While this is a good system, there are significant drawbacks, mainly that if you change the graph or table you need to change it in R and change it in the report. If you only do this rarely it isn’t much of a problem. However, doing so many times can increase both the amount of work and the likelihood of an error occurring from forgetting to change something or changing it incorrectly. We can avoid this issue by using R Markdown, R’s way of writing a document and incorporating R code within. This chapter will only briefly introduce R Markdown, for a comprehensive guide please see this excellent book. For a cheatsheet on R Markdown see here. What R Markdown does is let you type exactly as you would in Microsoft Word and insert the code to make the table or graph in the places you want it. If you change the code, the document will have the up-to-date result already, reducing your workload. There are some additional formatting you have to do when using R Markdown but it is minimal and is well-worth the return on the effort. This book, for example, was made entirely using R Markdown. To open up a R Markdown file click File from the top menu, then New File, and then R Markdown… From here it’ll open up a window where you select the title, author, and type of output. You can always change all three of these selections right in the R Markdown file after making your selection here. Selecting PDF may require you to download additional software to get it to output - some OS may already have the software installed. For a nice guide to using PDF with R Markdown, see here. When you click OK, it will open a new R Markdown file that is already populated with example text and code. You can delete this entirely or modify it as needed. When you output that file as a PDF it will look like the image below. R converted the file into a PDF, executing the code and using the formatting specified. In an R Script a # means that the line is a comment. In an R Markdown file, the # signifies that the line is a section header. There are 6 possible headers, made by combining the # together - a # is the largest header while ###### is the smallest header. As with comments, they must be at the beginning of a line. The word “Knit” was surrounded by two asterix * in the R Markdown file and became bold in the PDF because that is how R Markdown sets bolding - to make something italics using a single asterix like this. If you’re interested in more advanced formatting please see the book or cheatsheet linked earlier. Other than the section headers, most of what you do in R Markdown is exactly the same as in Word. You can write text as you would normally and it will look exactly as you write it. 10.1 Code The reason R Markdown is so useful is because you can include code output in the file. In R Markdown we write code in what is called a “code chunk”. These are simply areas in the document which R knows it should evaluate as R code. You can see three of them in the example - at lines 8-9 setting a default for the code, lines 18-20 to run the summary() function on the cars data (a data set built into R), and lines 26-28 (and cut off in the screenshot) to make a plot of the data set pressure (another data set built into R). To make a chunk click Insert near the top right, then R. It will then make an empty code chunk where your cursor is. Notice the three ` at the top and bottom of the chunk. Don’t touch these! They tell R that anything in it is a code chunk (i.e. that R should run the code). Inside the squiggly brackets {} are instructions about how the code is outputted. Here you can specify, among other things if the code will be outputted or just the output itself, captions for tables or graphs, and formatting for the output. Include all of these options after the r in the squiggly brackets. Multiple options must be separated by a comma (just like options in normal R functions). If you do not have the R Markdown file in the same folder as your data, you’ll need to set the working directory in a chunk before reading the data (you do so exactly like you would in an R Script). However, once a working directory is set, or the data is read in, it applies for all following chunks. You will also need to run any packages (using library()) to use them in a chunk. It is good form to set your working directory, load any data, and load any packages you need in the first chunk to make it easier to keep track of what you’re using. 10.1.1 Hiding code in the output When you’re making a report for a general audience you generally only want to keep the output (e.g. a graph or table), not the code you used. At early stages in writing the report or when you’re collaborating with someone who wants to see you code, it is useful to include the code in the R Markdown output. If you look at the second code chunk in the screenshot (lines 18-20) it includes the function summary(cars) as the code and the options {r cars} (the “cars” simply names the code chunk “cars” for if you want to reference the chunk - or it’s output if a table or graph - later, but does not change the code chunk’s behavior). In the output it shows both the code it used and the output of the code. This is because by default a code chunk shows both. To set it to only show the output, we need to set the parameter echo to FALSE inside of the {}. In the third code chunk (lines 26-28), that parameter is set to false as it is {r pressure, echo=FALSE}. In the output it only shows the graph, not the code that was used. 10.2 Tables There are a number of packages that make nice tables in R Markdown. We will use the knitr package for this example. The easiest way to make a table in Markdown is to make a data.frame with all the data (and column names) you want and then show that data.frame (there are also packages that can make tables from regression output though that won’t be covered in this lesson). For this example we will subset the mtcars data (which is included in R) to just the first 5 rows and columns. The kable function from the knitr package will then make a nice looking table. With kable you can add the caption directly in the kable() function. The option echo in our code chunk is not set to FALSE here so you can see the code. library(knitr) mtcars_small &lt;- mtcars[1:5, 1:5] kable(mtcars_small, caption = &quot;This is an example table caption&quot;) Table 10.1: This is an example table caption mpg cyl disp hp drat Mazda RX4 21.0 6 160 110 3.90 Mazda RX4 Wag 21.0 6 160 110 3.90 Datsun 710 22.8 4 108 93 3.85 Hornet 4 Drive 21.4 6 258 110 3.08 Hornet Sportabout 18.7 8 360 175 3.15 For another package to make very nice looking tables, see this guide to the kableExtra package. 10.3 Making the output file To create the Word or PDF output click Knit and it will create the output in the format set in the very top. To change this format click the white down-arrow directly to the right of Knit and it will drop-down a menu with output options. Click the option you want and it will output it in that format and change that to the new default. Sometimes it takes a while for it to output, so be patient. "],
["webscraping-with-rvest.html", "11 Webscraping with rvest 11.1 Scraping one page 11.2 Cleaning the webscraped data", " 11 Webscraping with rvest If I ever stop working in the field of criminology, I would certainly be a baker. So for the next few chapters we are going to work with “data” on baking. What we’ll learn to do is find a recipe from the website All Recipes and webscrape the ingredients and directions of that recipe. For our purposes we will be using the package rvest. This package makes it relatively easy to scrape data from websites, especially when that data is already in a table on the page as our data will be. If you haven’t done so before, make sure to install rvest. install.packages(&quot;rvest&quot;) And every time you start R, if you want to use rvest you must tell R so by using library(). library(rvest) #&gt; Loading required package: xml2 Here is a screenshot of the recipe for the “MMMMM… Brownies” (an excellent brownies recipe) page. 11.1 Scraping one page In later lessons we’ll learn how to scrape the ingredients of any recipe on the site. For now, we’ll focus on just getting data for our brownies recipe. The first step to scraping a page is to read in that page’s information to R using the function read_html() from the rvest package. The input for the () is the URL of the page we want to scrape. In a later lesson, we will manipulate this URL to be able to scrape data from many pages. read_html(&quot;https://www.allrecipes.com/recipe/25080/mmmmm-brownies/&quot;) #&gt; {html_document} #&gt; &lt;html lang=&quot;en-us&quot;&gt; #&gt; [1] &lt;head&gt;\\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset= ... #&gt; [2] &lt;body ng-app=&quot;allrecipes&quot; data-scoby-impression=&#39;{&quot;id&quot;: &quot;25080&quot;, &quot;ev ... When running the above code, it returns an XML Document. The rvest package is well suited for interpreting this and turning it into something we already know how to work with. To be able to work on this data, we need to save the output of read_html() into an object which we’ll call brownies since that is the recipe we are currently scraping. brownies &lt;- read_html(&quot;https://www.allrecipes.com/recipe/25080/mmmmm-brownies/&quot;) We now need to select only a small part of page which has the relevant information - in this case the ingredients and directions. We need to find just which parts of the page to scrape. To do so we’ll use the helper tool SelectorGadget, a Google Chrome extension that lets you click on parts of the page to get the CSS selector code that we’ll use. Install that extension in Chrome and go to the brownie recipe page. When you open SelectorGadget it allows you click on parts of the page and it will highlight every similar piece and show the CSS selector code in the box near the bottom. Here we clicked on the first ingredient - “1/2 cup white sugar”. Every ingredient is highlighted in yellow as (to oversimplify this explanation) these ingredients are the same “type” in the page. It also highlighted the text “Add all ingredients to list” which we don’t want. As it is always the last line of text in ingredients, we’ll leave it in for now and practice subsetting data through R to remove it. Note that in the bottom right of the screen, the SelectorGadget bar now has the text “.added”. This is the CSS selector code we can use to get all of the ingredients. We will use the function html_nodes() to grab the part of the page (based on the CSS selectors) that we want. The input for this function is first the object made from read_html() (which we called brownies) and then we can paste the CSS selector text - in this case, “.added”. We’ll save the resulting object as ingredients since we want to use brownies to also get the directions. ingredients &lt;- html_nodes(brownies, &quot;.added&quot;) Since we are getting data that is a text format, we need to tell rvest that the format of the scraped data is text. We do with using html_text() and our input in the () is the object made in the function html_text(). ingredients &lt;- html_text(ingredients) Now let’s check what we got. ingredients #&gt; [1] &quot;1/2 cup white sugar&quot; #&gt; [2] &quot;2 tablespoons butter&quot; #&gt; [3] &quot;2 tablespoons water&quot; #&gt; [4] &quot;1 1/2 cups semisweet chocolate chips&quot; #&gt; [5] &quot;2 eggs&quot; #&gt; [6] &quot;1/2 teaspoon vanilla extract&quot; #&gt; [7] &quot;2/3 cup all-purpose flour&quot; #&gt; [8] &quot;1/4 teaspoon baking soda&quot; #&gt; [9] &quot;1/2 teaspoon salt&quot; #&gt; [10] &quot;Add all ingredients to list&quot; #&gt; [11] &quot;Add all ingredients to list&quot; We have successfully scraped the ingredients for this brownies recipes - plus the “Add all ingredients to list” (copied twice for some reason). Now let’s do the same process to get the directions for baking. In SelectorGadget click clear to unselect the ingredients. Now click one of in lines of directions. It’ll highlight all three directions as they’re all of the same “type” (to be slightly more specific, when the site is made it has to put all of the pieces of the site together, such as links, photos, the section on ingredients, the section on directions, the section on reviews. So in this case we selected a “text” type in the section on directions and SelectorGadget then selected all “text” types inside of that section.). The CSS selector code this time is \".recipe-directions__list–item\" so we can put that inside of html_nodes(). Let’s save the output as directions. directions &lt;- html_nodes(brownies, &quot;.recipe-directions__list--item&quot;) directions &lt;- html_text(directions) Did it work? directions #&gt; [1] &quot;Preheat the oven to 325 degrees F (165 degrees C). Grease an 8x8 inch square pan.\\n &quot; #&gt; [2] &quot;In a medium saucepan, combine the sugar, butter and water. Cook over medium heat until boiling. Remove from heat and stir in chocolate chips until melted and smooth. Mix in the eggs and vanilla. Combine the flour, baking soda and salt; stir into the chocolate mixture. Spread evenly into the prepared pan.\\n &quot; #&gt; [3] &quot;Bake for 25 to 30 minutes in the preheated oven, until brownies set up. Do not overbake! Cool in pan and cut into squares.\\n &quot; #&gt; [4] &quot;&quot; Yes! The final value in our vector is blank so we will have to remove that. 11.2 Cleaning the webscraped data We only have three things to do to clean the data. First, we need to remove the “Add all ingredients to list” from the ingredients object. Second, we will remove the blank value (\"\") from the directions object. For both tasks we’ll do conditional subsetting to keep all values that do not equal those values. Finally, the directions print out with the text \\n at the end. This indicates that it is the end of the line but we’ll want to remove that, which we can do using gsub(). First let’s try out the condition of ingredients that do not equal the string “Add all ingredients to list”. ingredients != &quot;Add all ingredients to list&quot; #&gt; [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE FALSE FALSE It returns TRUE for all values except the last two, the ones which do equal “Add all ingredients to list”. Let’s only keep the elements without this string. ingredients &lt;- ingredients[ingredients != &quot;Add all ingredients to list&quot;] And we can do the same thing for the empty string in directions. directions &lt;- directions[directions != &quot;&quot;] To remove the \\n we simple find that in gsub() and replace it with a blank string. directions &lt;- gsub(&quot;\\n&quot;, &quot;&quot;, directions) And let’s print out both objects to make sure it worked. ingredients #&gt; [1] &quot;1/2 cup white sugar&quot; #&gt; [2] &quot;2 tablespoons butter&quot; #&gt; [3] &quot;2 tablespoons water&quot; #&gt; [4] &quot;1 1/2 cups semisweet chocolate chips&quot; #&gt; [5] &quot;2 eggs&quot; #&gt; [6] &quot;1/2 teaspoon vanilla extract&quot; #&gt; [7] &quot;2/3 cup all-purpose flour&quot; #&gt; [8] &quot;1/4 teaspoon baking soda&quot; #&gt; [9] &quot;1/2 teaspoon salt&quot; directions #&gt; [1] &quot;Preheat the oven to 325 degrees F (165 degrees C). Grease an 8x8 inch square pan. &quot; #&gt; [2] &quot;In a medium saucepan, combine the sugar, butter and water. Cook over medium heat until boiling. Remove from heat and stir in chocolate chips until melted and smooth. Mix in the eggs and vanilla. Combine the flour, baking soda and salt; stir into the chocolate mixture. Spread evenly into the prepared pan. &quot; #&gt; [3] &quot;Bake for 25 to 30 minutes in the preheated oven, until brownies set up. Do not overbake! Cool in pan and cut into squares. &quot; Now ingredients is as it should be but directions has a bunch of space at the end of the string. Let’s use gsub() again to remove multiple spaces. We’ll search for anything with two or more spaces and replace that with an empty string. directions &lt;- gsub(&quot; {2,}&quot;, &quot;&quot;, directions) And one final check to make sure it worked. directions #&gt; [1] &quot;Preheat the oven to 325 degrees F (165 degrees C). Grease an 8x8 inch square pan.&quot; #&gt; [2] &quot;In a medium saucepan, combine the sugar, butter and water. Cook over medium heat until boiling. Remove from heat and stir in chocolate chips until melted and smooth. Mix in the eggs and vanilla. Combine the flour, baking soda and salt; stir into the chocolate mixture. Spread evenly into the prepared pan.&quot; #&gt; [3] &quot;Bake for 25 to 30 minutes in the preheated oven, until brownies set up. Do not overbake! Cool in pan and cut into squares.&quot; In your own research, you will want to create a data.frame for nearly all data - this is also the way most statistical analysis packages expect data. In our case it doesn’t make sense to do so. We’ll keep them separate for now and in Chapter 12 we’ll learn to make a function to scrape any recipe using just the URL and to print the ingredients and directions to the console. "],
["functions.html", "12 Functions 12.1 A simple function 12.2 Adding parameters 12.3 Making a function to scrape recipes", " 12 Functions So far we have been writing code to handle specific situations such as subsetting a single data.frame. In cases where you want to reuse the code it is unwise to simply copy and paste the code and make minor changes to handle the new data. Instead we want something that is able to take multiple values and perform the same action (subset, aggregate, make a plot, webscrape, etc) on those values. Code where you can input a value (such as a data.frame) and some (often optional) instructions on how to handle that data, and have the code run on the value is called a function. We’ve used other people’s function before, such as c(), mean(), grep(), and rvest(). Think of a function like a stapler - you put the paper in a push down and it staples the paper together. It doesn’t matter what papers you are using, it always staples them together. If you needed to buy a new stapler every time you needed to staple something (i.e. copy and pasting code) you’d quickly have way too many staples (and waste a bunch of money). An important benefit is that you can use this function again and again to help solve other problems. If, for example, you have code that cleans data from Philadelphia’s crime data set, if you wanted to use it for Chicago’s crime data, making a single function is much easier (to read and to fix if there is an issue) than copying the code. If you wanted to use it for 20 cities, copy and pasting code quickly becomes a terrible solution - functions work much better. If you did copy and paste 20 times and you found a bug, then you’d have to fix the bug 20 times. With a function you would change the code once. 12.1 A simple function We’ll start with a simple function that takes a number and returns that number plus the value 2. add_2 &lt;- function(number) { number &lt;- number + 2 return(number) } The syntax (how we write it) of a function is function_name &lt;- function(parameters) { code return(output) } There are five essential parts of a function function_name - This is just the name we give to the function. It can be anything but, like when making other objects, call it something where it is easy to remember what it does. parameters - Here is where we say what goes into the function. In most cases you will want to put some data in and expect something new out. For example, for the function mean() you put in a vector of numbers in the () section and it returns the mean of those numbers. Here is also where you can put any options to affect how the code is run. code - This is the code you write to do the thing you want the function to do. In the above example our code is number &lt;- number + 2. For any number inputted, our code adds 2 to it and saves it back into the object number. return - This is something new in this course, here you use return() and inside the () you put the object you want to be outputted. In our example we have “number” inside the return() as that’s what we want to come out of the function. It is not always necessary to end your function with return() but is highly recommended to make sure you’re outputting what it is you want to output. If you save the output of a function (such as by x &lt;- mean(1:3)) it will save the output to the variable assigned. Otherwise it will print out the results in the console. The final piece is the structure of your function. After the function_name (whatever it is you call it) you always need the text &lt;- function() where the parameters (if any) are in the (). After the closing parentheses put a { and at the very end of the function, after the return(), close those squiggly brackets with a “}”. The &lt;- function() tells R that you are making a function rather than some other type of object. And the { and } tell R that all the code in between are part of that function. Our function here adds 2 to any number we input. add_2(2) #&gt; [1] 4 add_2(5) #&gt; [1] 7 12.2 Adding parameters Let’s add a single parameter which multiplies the result by 5 if selected. add_2 &lt;- function(number, times_5 = FALSE) { number &lt;- number + 2 return(number) } Now we have added a parameter called time_5 to the () part of the function and set it the be FALSE by default. Right now it doesn’t do anything so we need to add code to say what happens if it is TRUE (remember in R true and false must always be all capital letters). add_2 &lt;- function(number, times_5 = FALSE) { number &lt;- number + 2 if (times_5 == TRUE) { number &lt;- number * 5 } return(number) } Now our code says if the parameter times_5 is TRUE, then do the thing in the squiggly brackets {} below. Note that we use the same squiggly brackets as when making the entire function. That just tells R that the code in those brackets belong together. Let’s try out our function. add_2(2) #&gt; [1] 4 It returns 4, as expected. Since the parameter times_5 is defaulted to FALSE, we don’t need to specify that parameter if we want it to stay FALSE. When we don’t tell the function that we want it to be TRUE, the code in our “if statement” doesn’t run. When we set times_5 to TRUE, it runs that code. add_2(2, times_5 = TRUE) #&gt; [1] 20 12.3 Making a function to scrape recipes In Section 11.1 we wrote some code to scrape data from the website All Recipes for a recipe. We are going to turn that code into a function here. The benefit is that our input to the function will be an URL and then it will print out the ingredients and directions for that recipe. If we want multiple recipes (and for webscraping you usually will want to scrape multiple pages), we just change the URL we input without changing the code at all. We used the rvest package so we need to tell R want to use it again. library(rvest) #&gt; Loading required package: xml2 Let’s start by writing a shell of the function - everything but the code. We can call it scrape_recipes (though any name would work), add in the &lt;- function() and put “URL” (without quotes) in the () as our input for the function is a date. In this case we won’t return anything, we will just print things to the console, so we don’t need the return() value. And don’t forget the { after the end of the function() and } at the very end of the function. scrape_recipes &lt;- function(URL) { } Now we need to add the code that takes the date, scrapes the website, and saves that data into objects called ingredients and directions. Since we have the code from an earlier lesson, we can copy and paste that code into the function and make a small change to get a working function. scrape_recipes &lt;- function(URL) { brownies &lt;- read_html(&quot;https://www.allrecipes.com/recipe/25080/mmmmm-brownies/&quot;) ingredients &lt;- html_nodes(brownies, &quot;.added&quot;) ingredients &lt;- html_text(ingredients) directions &lt;- html_nodes(brownies, &quot;.recipe-directions__list--item&quot;) directions &lt;- html_text(directions) ingredients &lt;- ingredients[ingredients != &quot;Add all ingredients to list&quot;] directions &lt;- directions[directions != &quot;&quot;] } The part inside the () of read_html() is the URL of the page we want to scrape. This is the part of the function that will change based on our input. We want whatever input is in the URL parameter to be the URL we scrape. So let’s change the URL of the brownies recipe we scraped previously to simply say “URL” (without quotes). scrape_recipes &lt;- function(URL) { brownies &lt;- read_html(URL) ingredients &lt;- html_nodes(brownies, &quot;.added&quot;) ingredients &lt;- html_text(ingredients) directions &lt;- html_nodes(brownies, &quot;.recipe-directions__list--item&quot;) directions &lt;- html_text(directions) ingredients &lt;- ingredients[ingredients != &quot;Add all ingredients to list&quot;] directions &lt;- directions[directions != &quot;&quot;] } To make this function print something to the console we need to specifically tell it to do so in the code. We do this using the print() function. Let’s print first the ingredients and then the directions. We’ll add that add the final lines of the function. scrape_recipes &lt;- function(URL) { brownies &lt;- read_html(URL) ingredients &lt;- html_nodes(brownies, &quot;.added&quot;) ingredients &lt;- html_text(ingredients) directions &lt;- html_nodes(brownies, &quot;.recipe-directions__list--item&quot;) directions &lt;- html_text(directions) ingredients &lt;- ingredients[ingredients != &quot;Add all ingredients to list&quot;] directions &lt;- directions[directions != &quot;&quot;] directions &lt;- gsub(&quot;\\n&quot;, &quot;&quot;, directions) directions &lt;- gsub(&quot; {2,}&quot;, &quot;&quot;, directions) print(ingredients) print(directions) } Now we can try it for a new recipe, this one for “The Best Lemon Bars” at URL https://www.allrecipes.com/recipe/10294/the-best-lemon-bars/. scrape_recipes(&quot;https://www.allrecipes.com/recipe/10294/the-best-lemon-bars/&quot;) #&gt; [1] &quot;1 cup butter, softened&quot; &quot;1/2 cup white sugar&quot; #&gt; [3] &quot;2 cups all-purpose flour&quot; &quot;4 eggs&quot; #&gt; [5] &quot;1 1/2 cups white sugar&quot; &quot;1/4 cup all-purpose flour&quot; #&gt; [7] &quot;2 lemons, juiced&quot; #&gt; [1] &quot;Preheat oven to 350 degrees F (175 degrees C).&quot; #&gt; [2] &quot;In a medium bowl, blend together softened butter, 2 cups flour and 1/2 cup sugar.Press into the bottom of an ungreased 9x13 inch pan.&quot; #&gt; [3] &quot;Bake for 15 to 20 minutes in the preheated oven, or until firm and golden. In another bowl, whisk together the remaining 1 1/2 cups sugar and 1/4 cup flour. Whisk in the eggs and lemon juice. Pour over the baked crust.&quot; #&gt; [4] &quot;Bake for an additional 20 minutes in the preheated oven. The bars will firm up as they cool. For a festive tray, make another pan using limes instead of lemons and adding a drop of green food coloring to give a very pale green. After both pans have cooled, cut into uniform 2 inch squares and arrange in a checker board fashion.&quot; In the next lesson we’ll use “for loops” to scrape multiple recipes very quickly. "],
["for-loops.html", "13 For loops 13.1 Basic for loops 13.2 Scraping multiple recipes", " 13 For loops We will often want to perform the same task on a number of different items, such as cleaning every column in a data set. One effective way to do this is through “for loops”. Earlier in this course we learned how to scrape the recipe website All Recipes. We did so for a single recipe, if we wanted to get a feasts worth of recipes, typing out each recipe would be excessively slow, even with the function we made in Section 12.3. In this lesson we will use a for loop to scrape multiple recipes very quickly. 13.1 Basic for loops We’ll start with a simple example, making R print the numbers 1-10. for (i in 1:10) { print(i) } #&gt; [1] 1 #&gt; [1] 2 #&gt; [1] 3 #&gt; [1] 4 #&gt; [1] 5 #&gt; [1] 6 #&gt; [1] 7 #&gt; [1] 8 #&gt; [1] 9 #&gt; [1] 10 The basic concept of a for loop is you have some code that you need to run many times with slight changes to a value or values in the code - somewhat like a function. Like a function, all the code you want to use goes in between the { and } squiggly brackets. And you loop through all the values you specify - meaning the code runs once for each of those values. Let’s look closer at the (i in 1:10). The i is simply a placeholder object which takes the value 1:10 each iteration of the loop. It’s not necessary to call it i but that is convention in programming to do so. It takes the value of whatever follows the in which can range from a vector of strings to numbers to lists of data.frames. Especially when you’re an early learner of R it could help to call the i something informative to you about what value it has. Let’s go through a few examples with different names for i and different values it is looping through. for (a_number in 1:10) { print(a_number) } #&gt; [1] 1 #&gt; [1] 2 #&gt; [1] 3 #&gt; [1] 4 #&gt; [1] 5 #&gt; [1] 6 #&gt; [1] 7 #&gt; [1] 8 #&gt; [1] 9 #&gt; [1] 10 animals &lt;- c(&quot;cat&quot;, &quot;dog&quot;, &quot;gorilla&quot;, &quot;buffalo&quot;, &quot;lion&quot;, &quot;snake&quot;) for (animal in animals) { print(animal) } #&gt; [1] &quot;cat&quot; #&gt; [1] &quot;dog&quot; #&gt; [1] &quot;gorilla&quot; #&gt; [1] &quot;buffalo&quot; #&gt; [1] &quot;lion&quot; #&gt; [1] &quot;snake&quot; Now let’s make our code a bit more complicated, adding the number 2 every loop. for (a_number in 1:10) { print(a_number + 2) } #&gt; [1] 3 #&gt; [1] 4 #&gt; [1] 5 #&gt; [1] 6 #&gt; [1] 7 #&gt; [1] 8 #&gt; [1] 9 #&gt; [1] 10 #&gt; [1] 11 #&gt; [1] 12 We’re keeping the results inside of print() since for loops do not print the results by default. Let’s try combining this with some subsetting using square bracket notation []. We will look through every value in numbers, a vector we will make with the values 1:10 and replace each value with it’s value plus 2. The object we’re looping through is numbers. But we’re actually looping through every index it has, hence the 1:length(numbers). That is saying, i takes the value of each index in numbers which is useful when we want to change that element. length(numbers) finds how long the vector numbers is (were this a data.frame we could use nrow()) to find how many elements it has. In the code we take the value at each index numbers[i] and add 2 to it. numbers &lt;- 1:10 for (i in 1:length(numbers)) { numbers[i] &lt;- numbers[i] + 2 } numbers #&gt; [1] 3 4 5 6 7 8 9 10 11 12 We can also include functions we made in for loops. Here’s a function we made last lesson which adds 2 to each inputted number. add_2 &lt;- function(number) { number &lt;- number + 2 return(number) } Let’s put that in the loop. for (i in 1:length(numbers)) { numbers[i] &lt;- add_2(numbers[i]) } numbers #&gt; [1] 5 6 7 8 9 10 11 12 13 14 13.2 Scraping multiple recipes Below is the function copied from Section 12.3 which takes a single URL and scraped the site All Recipes for that recipe. It printed the ingredients and directions to cook that recipe to the console. If we wanted to get data for multiple recipes, we would need to run the function multiple times. Here we will use a for loop to do this. Since we’re using the read_html() function from rvest, we need to tell R we want to use that package. library(rvest) #&gt; Loading required package: xml2 scrape_recipes &lt;- function(URL) { brownies &lt;- read_html(URL) ingredients &lt;- html_nodes(brownies, &quot;.added&quot;) ingredients &lt;- html_text(ingredients) directions &lt;- html_nodes(brownies, &quot;.recipe-directions__list--item&quot;) directions &lt;- html_text(directions) ingredients &lt;- ingredients[ingredients != &quot;Add all ingredients to list&quot;] directions &lt;- directions[directions != &quot;&quot;] directions &lt;- gsub(&quot;\\n&quot;, &quot;&quot;, directions) directions &lt;- gsub(&quot; {2,}&quot;, &quot;&quot;, directions) print(ingredients) print(directions) } With any for loop you need to figure out what is going to be changing, in this case it is the URL. And since we want multiple, we need to make an object with the URLs of all the recipes we want. Here I am making a vector called recipe_urls with the URLs of several recipes that I like on the site. The way I got the URLs was to go to each recipe’s page and copy and paste the URL. Is this the right approach? Shouldn’t we do everything in R? Not always. In situations like this where we know that there are a small number of links we want - and there is no easy way to get them through R - it is reasonable to do it by hand. Remember that R is a tool to help you. While keeping everything you do in R is good for reproducability, it is not always reasonable and may take too much time or effort given the constraints - usually limited time - of your project. recipe_urls &lt;- c(&quot;https://www.allrecipes.com/recipe/25080/mmmmm-brownies/&quot;, &quot;https://www.allrecipes.com/recipe/27188/crepes/&quot;, &quot;https://www.allrecipes.com/recipe/84270/slow-cooker-corned-beef-and-cabbage/&quot;, &quot;https://www.allrecipes.com/recipe/25130/soft-sugar-cookies-v/&quot;, &quot;https://www.allrecipes.com/recipe/53304/cream-corn-like-no-other/&quot;, &quot;https://www.allrecipes.com/recipe/10294/the-best-lemon-bars/&quot;, &quot;https://www.allrecipes.com/recipe/189058/super-simple-salmon/&quot;) Now we can write the for loop to go through every single URL in recipe_urls and use the function scrape_recipes on that URL. for (recipe_url in recipe_urls) { scrape_recipes(recipe_url) } #&gt; [1] &quot;1/2 cup white sugar&quot; #&gt; [2] &quot;2 tablespoons butter&quot; #&gt; [3] &quot;2 tablespoons water&quot; #&gt; [4] &quot;1 1/2 cups semisweet chocolate chips&quot; #&gt; [5] &quot;2 eggs&quot; #&gt; [6] &quot;1/2 teaspoon vanilla extract&quot; #&gt; [7] &quot;2/3 cup all-purpose flour&quot; #&gt; [8] &quot;1/4 teaspoon baking soda&quot; #&gt; [9] &quot;1/2 teaspoon salt&quot; #&gt; [1] &quot;Preheat the oven to 325 degrees F (165 degrees C). Grease an 8x8 inch square pan.&quot; #&gt; [2] &quot;In a medium saucepan, combine the sugar, butter and water. Cook over medium heat until boiling. Remove from heat and stir in chocolate chips until melted and smooth. Mix in the eggs and vanilla. Combine the flour, baking soda and salt; stir into the chocolate mixture. Spread evenly into the prepared pan.&quot; #&gt; [3] &quot;Bake for 25 to 30 minutes in the preheated oven, until brownies set up. Do not overbake! Cool in pan and cut into squares.&quot; #&gt; [1] &quot;2 eggs&quot; &quot;1 cup milk&quot; #&gt; [3] &quot;2/3 cup all-purpose flour&quot; &quot;1 pinch salt&quot; #&gt; [5] &quot;1 1/2 teaspoons vegetable oil&quot; #&gt; [1] &quot;In a blender combine eggs, milk, flour, salt and oil.Process until smooth.Cover and refrigerate 1 hour.&quot; #&gt; [2] &quot;Heat a skillet over medium-high heat and brush with oil.Pour 1/4 cup of crepe batter into pan, tilting to completely coat the surface of the pan.Cook 2 to 5 minutes, turning once, until golden.Repeat with remaining batter.&quot; #&gt; [1] &quot;4 large carrots, peeled and cut into matchstick pieces&quot; #&gt; [2] &quot;10 baby red potatoes, quartered&quot; #&gt; [3] &quot;1 onion, peeled and cut into bite-sized pieces&quot; #&gt; [4] &quot;4 cups water&quot; #&gt; [5] &quot;1 (4 pound) corned beef brisket with spice packet&quot; #&gt; [6] &quot;6 ounces beer&quot; #&gt; [7] &quot;1/2 head cabbage, coarsely chopped&quot; #&gt; [1] &quot;Place the carrots, potatoes, and onion into the bottom of a slow cooker, pour in the water, and place the brisket on top of the vegetables. Pour the beer over the brisket. Sprinkle on the spices from the packet, cover, and set the cooker on High.&quot; #&gt; [2] &quot;Cook the brisket for about 8 hours. An hour before serving, stir in the cabbage and cook for 1 more hour.&quot; #&gt; [1] &quot;4 cups all-purpose flour&quot; &quot;1 teaspoon baking powder&quot; #&gt; [3] &quot;1/2 teaspoon baking soda&quot; &quot;1/2 teaspoon salt&quot; #&gt; [5] &quot;1/4 teaspoon ground nutmeg&quot; &quot;1 cup butter, softened&quot; #&gt; [7] &quot;1 1/2 cups white sugar&quot; &quot;1 egg&quot; #&gt; [9] &quot;1 teaspoon vanilla extract&quot; &quot;1/2 cup sour cream&quot; #&gt; [1] &quot;Sift together the flour, baking powder, baking soda, salt and nutmeg; set aside. In a large bowl, cream together the butter and sugar until smooth. Beat in the egg, vanilla and sour cream until well blended. Stir in the sifted ingredients. Wrap dough in plastic wrap and chill overnight.&quot; #&gt; [2] &quot;Preheat the oven to 375 degrees F (190 degrees C). On a lightly floured surface, roll the dough out to 1/4 inch in thickness. Cut into desired shapes with cookie cutters. Place cookies 1 1/2 inches apart onto ungreased cookie sheets.&quot; #&gt; [3] &quot;Bake for 8 to 10 minutes in the preheated oven. Allow cookies to cool on baking sheet for 5 minutes before removing to a wire rack to cool completely.&quot; #&gt; [1] &quot;2 (10 ounce) packages frozen corn kernels, thawed&quot; #&gt; [2] &quot;1 cup heavy cream&quot; #&gt; [3] &quot;1 teaspoon salt&quot; #&gt; [4] &quot;2 tablespoons granulated sugar&quot; #&gt; [5] &quot;1/4 teaspoon freshly ground black pepper&quot; #&gt; [6] &quot;2 tablespoons butter&quot; #&gt; [7] &quot;1 cup whole milk&quot; #&gt; [8] &quot;2 tablespoons all-purpose flour&quot; #&gt; [9] &quot;1/4 cup freshly grated Parmesan cheese&quot; #&gt; [1] &quot;In a skillet over medium heat, combine the corn, cream, salt, sugar, pepper and butter. Whisk together the milk and flour, and stir into the corn mixture. Cook stirring over medium heat until the mixture is thickened, and corn is cooked through. Remove from heat, and stir in the Parmesan cheese until melted. Serve hot.&quot; #&gt; [1] &quot;1 cup butter, softened&quot; &quot;1/2 cup white sugar&quot; #&gt; [3] &quot;2 cups all-purpose flour&quot; &quot;4 eggs&quot; #&gt; [5] &quot;1 1/2 cups white sugar&quot; &quot;1/4 cup all-purpose flour&quot; #&gt; [7] &quot;2 lemons, juiced&quot; #&gt; [1] &quot;Preheat oven to 350 degrees F (175 degrees C).&quot; #&gt; [2] &quot;In a medium bowl, blend together softened butter, 2 cups flour and 1/2 cup sugar.Press into the bottom of an ungreased 9x13 inch pan.&quot; #&gt; [3] &quot;Bake for 15 to 20 minutes in the preheated oven, or until firm and golden. In another bowl, whisk together the remaining 1 1/2 cups sugar and 1/4 cup flour. Whisk in the eggs and lemon juice. Pour over the baked crust.&quot; #&gt; [4] &quot;Bake for an additional 20 minutes in the preheated oven. The bars will firm up as they cool. For a festive tray, make another pan using limes instead of lemons and adding a drop of green food coloring to give a very pale green. After both pans have cooled, cut into uniform 2 inch squares and arrange in a checker board fashion.&quot; #&gt; [1] &quot;1 tablespoon garlic powder&quot; &quot;1 tablespoon dried basil&quot; #&gt; [3] &quot;1/2 teaspoon salt&quot; &quot;4 (6 ounce) salmon&quot; #&gt; [5] &quot;2 tablespoons butter&quot; &quot;4 lemon wedges&quot; #&gt; [1] &quot;Stir together the garlic powder, basil, and salt in a small bowl; rub in equal amounts onto the salmon fillets.&quot; #&gt; [2] &quot;Melt the butter in a skillet over medium heat; cook the salmon in the butter until browned and flaky, about 5 minutes per side. Serve each piece of salmon with a lemon wedge.&quot; "],
["scrape-table.html", "14 Scraping tables from PDFs 14.1 Scraping the first table 14.2 Making a function", " 14 Scraping tables from PDFs In the majority of cases when you want data from a PDF it will be in a table. Essentially the data will be an Excel file inside of a PDF. This format is not altogether different than what we’ve done before. We will be using regular expressions and the function strsplit() to get this data into a usable format. Let’s first take a look at the data we will be scraping. The first step in any PDF scraping should be to look at the PDF and try to think about the best way to approach this particular problem - while all PDF scraping follows a general format you cannot necessarily copy and paste your code, each situation is likely slightly different. Our data is from the U.S. Customs and Border Protection (CBP) and contains a wealth of information about apprehensions and contraband seizures in border sectors. We will be using the Sector Profile 2017 PDF which has information in four tables, three of which we’ll scrape and then combine together. The data was downloaded from the U.S. Customs and Border Protection “Stats and Summaries” page here. If you’re interested in using more of their data, some of it has been cleaned and made available here. The file we want to use is called “usbp_stats_fy2017_sector_profile.pdf” and has four tables in the PDF. Let’s take a look at them one at a time, understanding what variable are available, and what units each row is in. Then we’ll start scraping the tables. The first table is “Sector Profile - Fiscal Year 2017 (Oct. 1st through Sept. 30th)”. Before we even look down more at the table, the title is important. It is for fiscal year 2017, not calendar year 2017 which is more common in the data we usually use. This is important if we ever want to merge this data with other data sets. If possible we would have to get data that is monthly so we can just use October 2016 through September 2017 to match up properly. Now if we look more at the table we can see that each row is a section of the U.S. border. There are three main sections - Coastal, Northern, and Southwest, with subsections of each also included. The bottom row is the sum of all these sections and gives us nationwide data. Many government data will be like this form with sections and subsections in the same table. Watch out when doing mathematical operations! Just summing any of these columns will give you triple the true value due to the presence of nationwide, sectional, and subsectional data. There are 9 columns in the data other than the border section identifier. It looks like we have total apprehensions, apprehensions for people who are not Mexican citizens, marijuana and cocaine seizures (in pounds), the number of accepted prosecutions (presumably of those apprehended), and the number of CBP agents assaulted. The last two columns have the number of people rescued by CBP and the number of people who died (it is unclear from this data alone if this is solely people in custody or deaths during crossing the border). These two columns are also special as they only have data for the Southwest border. Table 2 has a similar format with each row being a section or subsection. The columns now have the number of juveniles apprehended, subdivided by if they were accompanied by an adult or not, and the number of adults apprehended. The last column is total apprehensions which is also in Table 1. Table 3 follows the same format and the new columns are number of apprehensions by gender. Finally, Table 4 is a bit different in it’s format. The rows are now variables and the columns are the locations. In this table it doesn’t include subsections, only border sections and nationwide total. The data it has available are partially a repeat of Table 1 but with more drug types and the addition of the number of drug seizures and some firearm seizure information. As this table is formatted differently than the others we won’t scrape it in this lesson - but you can use the skills you’ll learn to do so yourself. 14.1 Scraping the first table We’ve now seen all three of the tables that we want to scrape so we can begin the process of actually scraping them. Note that each table is very similar meaning we can reuse some code to scrape as well as clean the data. That means that we will want to write some functions to make our work easier and avoid copy and pasting code three times. We will use the pdf_text() function from the pdftools package to read the PDFs into R. library(pdftools) We can save the output of the pdf_text() function as the object border_patrol and we’ll use it for each table. border_patrol &lt;- pdf_text(&quot;data/usbp_stats_fy2017_sector_profile.pdf&quot;) We can take a look at the head() of the result. head(border_patrol) #&gt; [1] &quot; United States Border Patrol\\r\\n Sector Profile - Fiscal Year 2017 (Oct. 1st through Sept. 30th)\\r\\n Agent Other Than Mexican Marijuana Cocaine Accepted\\r\\n SECTOR Staffing*\\r\\n Apprehensions\\r\\n Apprehensions (pounds) (pounds) Prosecutions\\r\\n Assaults Rescues Deaths\\r\\n Miami 111 2,280 1,646 2,253 231 292 1 N/A N/A\\r\\n New Orleans 63 920 528 21 6 10 0 N/A N/A\\r\\n Ramey 38 388 387 3 2,932 89 0 N/A N/A\\r\\n Coastal Border Sectors Total 212 3,588 2,561 2,277 3,169 391 1 N/A **** N/A ****\\r\\n Blaine 296 288 237 0 0 9 0 N/A N/A\\r\\n Buffalo 277 447 293 228 2 37 2 N/A N/A\\r\\n Detroit 408 1,070 322 124 0 85 1 N/A N/A\\r\\n Grand Forks 189 496 202 0 0 40 2 N/A N/A\\r\\n Havre 183 39 28 98 0 2 0 N/A N/A\\r\\n Houlton 173 30 30 17 0 2 0 N/A N/A\\r\\n Spokane 230 208 67 68 0 24 0 N/A N/A\\r\\n Swanton 292 449 359 531 1 103 6 N/A N/A\\r\\n Northern Border Sectors Total 2,048 3,027 1,538 1,066 3 302 11 N/A **** N/A ****\\r\\n Big Bend (formerly Marfa) 500 6,002 3,346 40,852 45 2,847 11 26 1\\r\\n Del Rio 1,391 13,476 6,156 9,482 62 8,022 12 99 18\\r\\n El Centro 870 18,633 5,812 5,554 484 1,413 34 4 2\\r\\n El Paso 2,182 25,193 15,337 34,189 140 6,996 54 44 8\\r\\n Laredo 1,666 25,460 7,891 69,535 757 6,119 31 1,054 83\\r\\n Rio Grande Valley (formerly McAllen) 3,130 137,562 107,909 260,020 1,192 7,979 422 1,190 104\\r\\n San Diego 2,199 26,086 7,060 10,985 2,903 3,099 84 48 4\\r\\n Tucson 3,691 38,657 12,328 397,090 331 20,963 93 750 72\\r\\n Yuma 859 12,847 10,139 30,181 261 2,367 33 6 2\\r\\n Southwest Border Sectors Total** 16,605 303,916 175,978 857,888 6,174 59,805 774 3,221 294\\r\\n Nationwide Total*** 19,437 310,531 180,077 861,231 9,346 60,498 786 3,221 294\\r\\n* Agent staffing statistics depict FY17 on-board personnel data as of 9/30/2017\\r\\n** Southwest Border Sectors staffing statistics include: Big Bend, Del Rio, El Centro, El Paso, Laredo, Rio Grande Valley, San Diego, Tucson, Yuma, and the Special Operations Group.\\r\\n*** Nationwide staffing statistics include: All on-board Border Patrol agents in CBP\\r\\n**** Rescue and Death statistics are not tracked for Northern and Coastal Border Sectors.\\r\\n&quot; #&gt; [2] &quot; United States Border Patrol\\r\\n Juvenile (0-17 Years Old) and Adult Apprehensions - Fiscal Year 2017 (Oct. 1st through Sept. 30th)\\r\\n Accompanied Unaccompanied Total Total Total\\r\\n SECTOR Juveniles Juveniles Juveniles Adults Apprehensions\\r\\nMiami 19 42 61 2,219 2,280\\r\\nNew Orleans 1 22 23 897 920\\r\\nRamey 7 1 8 380 388\\r\\nCoastal Border Sectors Total 27 65 92 3,496 3,588\\r\\nBlaine 29 7 36 252 288\\r\\nBuffalo 3 3 6 441 447\\r\\nDetroit 5 11 16 1,054 1,070\\r\\nGrand Forks 5 4 9 487 496\\r\\nHavre 1 3 4 35 39\\r\\nHoulton 1 8 9 21 30\\r\\nSpokane 3 0 3 205 208\\r\\nSwanton 18 10 28 421 449\\r\\nNorthern Border Sectors Total 65 46 111 2,916 3,027\\r\\nBig Bend (formerly Marfa) 506 811 1,317 4,685 6,002\\r\\nDel Rio 1,348 1,349 2,697 10,779 13,476\\r\\nEl Centro 968 1,531 2,499 16,134 18,633\\r\\nEl Paso 4,642 3,926 8,568 16,625 25,193\\r\\nLaredo 477 2,033 2,510 22,950 25,460\\r\\nRio Grande Valley (formerly McAllen) 27,222 23,708 50,930 86,632 137,562\\r\\nSan Diego 1,639 1,551 3,190 22,896 26,086\\r\\nTucson 1,088 3,659 4,747 33,910 38,657\\r\\nYuma 3,241 2,867 6,108 6,739 12,847\\r\\nSouthwest Border Sectors Total 41,131 41,435 82,566 221,350 303,916\\r\\nNationwide Total 41,223 41,546 82,769 227,762 310,531\\r\\n&quot; #&gt; [3] &quot; United States Border Patrol\\r\\n Apprehensions by Gender - Fiscal Year 2017 (Oct. 1st through Sept. 30th)\\r\\n SECTOR Female Male Total Apprehensions\\r\\nMiami 219 2,061 2,280\\r\\nNew Orleans 92 828 920\\r\\nRamey 65 323 388\\r\\nCoastal Border Sectors Total 376 3,212 3,588\\r\\nBlaine 97 191 288\\r\\nBuffalo 69 378 447\\r\\nDetroit 78 992 1,070\\r\\nGrand Forks 56 440 496\\r\\nHavre 13 26 39\\r\\nHoulton 17 13 30\\r\\nSpokane 17 191 208\\r\\nSwanton 106 343 449\\r\\nNorthern Border Sectors Total 453 2,574 3,027\\r\\nBig Bend (formerly Marfa) 985 5,017 6,002\\r\\nDel Rio 2,622 10,854 13,476\\r\\nEl Centro 2,791 15,842 18,633\\r\\nEl Paso 7,364 17,829 25,193\\r\\nLaredo 3,651 21,809 25,460\\r\\nRio Grande Valley (formerly McAllen) 50,306 87,256 137,562\\r\\nSan Diego 4,117 21,969 26,086\\r\\nTucson 4,693 33,964 38,657\\r\\nYuma 4,328 8,519 12,847\\r\\nSouthwest Border Sectors Total 80,857 223,059 303,916\\r\\nNationwide Total 81,686 228,845 310,531\\r\\n&quot; #&gt; [4] &quot; United States Border Patrol\\r\\n Apprehensions / Seizure Statistics - Fiscal Year 2017 (Oct. 1st through Sept. 30th)\\r\\n Apprehension/Seizure Type Coastal Border Sectors Northern Border Sectors Southwest Border Sectors Nationwide Total\\r\\n Apprehensions 3,588 3,027 303,916 310,531\\r\\n Other Than Mexican Apprehensions 2,561 1,538 175,978 180,077\\r\\n Marijuana (pounds) 2,277 1,066 857,888 861,231\\r\\n Cocaine (pounds) 3,169 3 6,174 9,346\\r\\n Heroin (ounces) 0 62 15,182 15,244\\r\\n Methamphetamine (pounds) 23 32 10,273 10,328\\r\\n Ecstasy (pounds) 0 0 1 1\\r\\n Other Drugs* (pounds) 0 14 554 568\\r\\n Marijuana Seizures 113 255 9,371 9,739\\r\\n Cocaine Seizures 33 46 463 542\\r\\n Heroin Seizures 0 29 219 248\\r\\n Methamphetamine Seizures 2 68 809 879\\r\\n Ecstasy Seizures 1 2 48 51\\r\\n Other Drugs* Seizures 6 99 735 840\\r\\n Conveyances 86 79 7,388 7,553\\r\\n Firearms 9 45 369 423\\r\\n Ammunition (rounds) 217 384 13,938 14,539\\r\\n Currency (value) $325,129 $374,282 $5,169,593 $5,869,004\\r\\n*Other Drugs include: All USBP drug seizures excluding marijuana, cocaine, heroin, methamphetamine, and ecstasy (MDMA).\\r\\nCoastal Border Sectors include: Miami, New Orleans, and Ramey, Puerto Rico.\\r\\nNorthern Border Sectors include: Blaine, Buffalo, Detroit, Grand Forks, Havre, Houlton, Spokane and Swanton.\\r\\nSouthwest Border Sectors include: Big Bend, Del Rio, El Centro, El Paso, Laredo, Rio Grande Valley, San Diego, Tucson, and Yuma.\\r\\nDrug quantities are rounded to the nearest whole number\\r\\n&quot; If you look closely in this huge amount of text output, you can see that it is a vector with each table being an element in the vector. We can see this further by checking the length() of “border_patrol” and just looking at the first element. length(border_patrol) #&gt; [1] 4 It is four elements long, one for each table. border_patrol[1] #&gt; [1] &quot; United States Border Patrol\\r\\n Sector Profile - Fiscal Year 2017 (Oct. 1st through Sept. 30th)\\r\\n Agent Other Than Mexican Marijuana Cocaine Accepted\\r\\n SECTOR Staffing*\\r\\n Apprehensions\\r\\n Apprehensions (pounds) (pounds) Prosecutions\\r\\n Assaults Rescues Deaths\\r\\n Miami 111 2,280 1,646 2,253 231 292 1 N/A N/A\\r\\n New Orleans 63 920 528 21 6 10 0 N/A N/A\\r\\n Ramey 38 388 387 3 2,932 89 0 N/A N/A\\r\\n Coastal Border Sectors Total 212 3,588 2,561 2,277 3,169 391 1 N/A **** N/A ****\\r\\n Blaine 296 288 237 0 0 9 0 N/A N/A\\r\\n Buffalo 277 447 293 228 2 37 2 N/A N/A\\r\\n Detroit 408 1,070 322 124 0 85 1 N/A N/A\\r\\n Grand Forks 189 496 202 0 0 40 2 N/A N/A\\r\\n Havre 183 39 28 98 0 2 0 N/A N/A\\r\\n Houlton 173 30 30 17 0 2 0 N/A N/A\\r\\n Spokane 230 208 67 68 0 24 0 N/A N/A\\r\\n Swanton 292 449 359 531 1 103 6 N/A N/A\\r\\n Northern Border Sectors Total 2,048 3,027 1,538 1,066 3 302 11 N/A **** N/A ****\\r\\n Big Bend (formerly Marfa) 500 6,002 3,346 40,852 45 2,847 11 26 1\\r\\n Del Rio 1,391 13,476 6,156 9,482 62 8,022 12 99 18\\r\\n El Centro 870 18,633 5,812 5,554 484 1,413 34 4 2\\r\\n El Paso 2,182 25,193 15,337 34,189 140 6,996 54 44 8\\r\\n Laredo 1,666 25,460 7,891 69,535 757 6,119 31 1,054 83\\r\\n Rio Grande Valley (formerly McAllen) 3,130 137,562 107,909 260,020 1,192 7,979 422 1,190 104\\r\\n San Diego 2,199 26,086 7,060 10,985 2,903 3,099 84 48 4\\r\\n Tucson 3,691 38,657 12,328 397,090 331 20,963 93 750 72\\r\\n Yuma 859 12,847 10,139 30,181 261 2,367 33 6 2\\r\\n Southwest Border Sectors Total** 16,605 303,916 175,978 857,888 6,174 59,805 774 3,221 294\\r\\n Nationwide Total*** 19,437 310,531 180,077 861,231 9,346 60,498 786 3,221 294\\r\\n* Agent staffing statistics depict FY17 on-board personnel data as of 9/30/2017\\r\\n** Southwest Border Sectors staffing statistics include: Big Bend, Del Rio, El Centro, El Paso, Laredo, Rio Grande Valley, San Diego, Tucson, Yuma, and the Special Operations Group.\\r\\n*** Nationwide staffing statistics include: All on-board Border Patrol agents in CBP\\r\\n**** Rescue and Death statistics are not tracked for Northern and Coastal Border Sectors.\\r\\n&quot; And this gives us all the values in the first table plus a few sentences at the end detailing some features of the table. At the end of each line (where in the PDF it should end but doesn’t in our data yet) there is a \\r\\n indicating that there should be a new line. We want to use strsplit() to split at the \\r\\n. The strsplit() function breaks up a string into pieces based on a value inside of the string. Let’s use the word “criminology” as an example. If we want to split it by the letter “n” we’d have two results, “crimi” and “ology” as these are the pieces of the word after breaking up “criminology” at letter “n”. strsplit(&quot;criminology&quot;, split = &quot;n&quot;) #&gt; [[1]] #&gt; [1] &quot;crimi&quot; &quot;ology&quot; Note that it deletes whatever value is used to break up the string. Let’s save a new object with the value in the first element of “border_patrol”, calling it sector_profile as that’s the name of that table, and then using strsplit() on it. strsplit() returns a list so we will also want to keep just the first element of that list using double square bracket [[]] notation. sector_profile &lt;- border_patrol[1] sector_profile &lt;- strsplit(sector_profile, &quot;\\r\\n&quot;) sector_profile &lt;- sector_profile[[1]] Now we can look at the first six rows of this data. head(sector_profile) #&gt; [1] &quot; United States Border Patrol&quot; #&gt; [2] &quot; Sector Profile - Fiscal Year 2017 (Oct. 1st through Sept. 30th)&quot; #&gt; [3] &quot; Agent Other Than Mexican Marijuana Cocaine Accepted&quot; #&gt; [4] &quot; SECTOR Staffing*&quot; #&gt; [5] &quot; Apprehensions&quot; #&gt; [6] &quot; Apprehensions (pounds) (pounds) Prosecutions&quot; Notice that there is a lot of empty white space at the beginning of the rows. We want to get rid of that to make our next steps easier. We can use trimws() and put the entire “sector_profile” data in the () and it’ll remove the white space at the ends of each line for us. sector_profile &lt;- trimws(sector_profile) We have more rows than we want so let’s look at the entire data and try to figure out how to keep just the necessary rows. sector_profile #&gt; [1] &quot;United States Border Patrol&quot; #&gt; [2] &quot;Sector Profile - Fiscal Year 2017 (Oct. 1st through Sept. 30th)&quot; #&gt; [3] &quot;Agent Other Than Mexican Marijuana Cocaine Accepted&quot; #&gt; [4] &quot;SECTOR Staffing*&quot; #&gt; [5] &quot;Apprehensions&quot; #&gt; [6] &quot;Apprehensions (pounds) (pounds) Prosecutions&quot; #&gt; [7] &quot;Assaults Rescues Deaths&quot; #&gt; [8] &quot;Miami 111 2,280 1,646 2,253 231 292 1 N/A N/A&quot; #&gt; [9] &quot;New Orleans 63 920 528 21 6 10 0 N/A N/A&quot; #&gt; [10] &quot;Ramey 38 388 387 3 2,932 89 0 N/A N/A&quot; #&gt; [11] &quot;Coastal Border Sectors Total 212 3,588 2,561 2,277 3,169 391 1 N/A **** N/A ****&quot; #&gt; [12] &quot;Blaine 296 288 237 0 0 9 0 N/A N/A&quot; #&gt; [13] &quot;Buffalo 277 447 293 228 2 37 2 N/A N/A&quot; #&gt; [14] &quot;Detroit 408 1,070 322 124 0 85 1 N/A N/A&quot; #&gt; [15] &quot;Grand Forks 189 496 202 0 0 40 2 N/A N/A&quot; #&gt; [16] &quot;Havre 183 39 28 98 0 2 0 N/A N/A&quot; #&gt; [17] &quot;Houlton 173 30 30 17 0 2 0 N/A N/A&quot; #&gt; [18] &quot;Spokane 230 208 67 68 0 24 0 N/A N/A&quot; #&gt; [19] &quot;Swanton 292 449 359 531 1 103 6 N/A N/A&quot; #&gt; [20] &quot;Northern Border Sectors Total 2,048 3,027 1,538 1,066 3 302 11 N/A **** N/A ****&quot; #&gt; [21] &quot;Big Bend (formerly Marfa) 500 6,002 3,346 40,852 45 2,847 11 26 1&quot; #&gt; [22] &quot;Del Rio 1,391 13,476 6,156 9,482 62 8,022 12 99 18&quot; #&gt; [23] &quot;El Centro 870 18,633 5,812 5,554 484 1,413 34 4 2&quot; #&gt; [24] &quot;El Paso 2,182 25,193 15,337 34,189 140 6,996 54 44 8&quot; #&gt; [25] &quot;Laredo 1,666 25,460 7,891 69,535 757 6,119 31 1,054 83&quot; #&gt; [26] &quot;Rio Grande Valley (formerly McAllen) 3,130 137,562 107,909 260,020 1,192 7,979 422 1,190 104&quot; #&gt; [27] &quot;San Diego 2,199 26,086 7,060 10,985 2,903 3,099 84 48 4&quot; #&gt; [28] &quot;Tucson 3,691 38,657 12,328 397,090 331 20,963 93 750 72&quot; #&gt; [29] &quot;Yuma 859 12,847 10,139 30,181 261 2,367 33 6 2&quot; #&gt; [30] &quot;Southwest Border Sectors Total** 16,605 303,916 175,978 857,888 6,174 59,805 774 3,221 294&quot; #&gt; [31] &quot;Nationwide Total*** 19,437 310,531 180,077 861,231 9,346 60,498 786 3,221 294&quot; #&gt; [32] &quot;* Agent staffing statistics depict FY17 on-board personnel data as of 9/30/2017&quot; #&gt; [33] &quot;** Southwest Border Sectors staffing statistics include: Big Bend, Del Rio, El Centro, El Paso, Laredo, Rio Grande Valley, San Diego, Tucson, Yuma, and the Special Operations Group.&quot; #&gt; [34] &quot;*** Nationwide staffing statistics include: All on-board Border Patrol agents in CBP&quot; #&gt; [35] &quot;**** Rescue and Death statistics are not tracked for Northern and Coastal Border Sectors.&quot; Based on the PDF, we want every row from Miami to Nationwide Total. But here we have several rows with the title of the table and the column names, and at the end we have the sentences with some details that we don’t need. To keep only the rows that we want, we can combine grep() and subsetting to find the rows from Miami to Nationwide Total and keep only those rows. We will use grep() to find which row has the text “Miami” and which has the text “Nationwide Total” and keep all rows between them (including those matched rows as well). Since each only appears once in the table we don’t need to worry about handling duplicate results. grep(&quot;Miami&quot;, sector_profile) #&gt; [1] 8 grep(&quot;Nationwide Total&quot;, sector_profile) #&gt; [1] 31 We’ll use square bracket notation to keep all rows between those two values (including each value). Since the data is a vector, not a data.frame, we don’t need a comma. sector_profile &lt;- sector_profile[grep(&quot;Miami&quot;, sector_profile):grep(&quot;Nationwide Total&quot;, sector_profile)] Note that we’re getting rid of the rows which had the column names. It’s easier to make the names ourselves than to deal with that mess. head(sector_profile) #&gt; [1] &quot;Miami 111 2,280 1,646 2,253 231 292 1 N/A N/A&quot; #&gt; [2] &quot;New Orleans 63 920 528 21 6 10 0 N/A N/A&quot; #&gt; [3] &quot;Ramey 38 388 387 3 2,932 89 0 N/A N/A&quot; #&gt; [4] &quot;Coastal Border Sectors Total 212 3,588 2,561 2,277 3,169 391 1 N/A **** N/A ****&quot; #&gt; [5] &quot;Blaine 296 288 237 0 0 9 0 N/A N/A&quot; #&gt; [6] &quot;Buffalo 277 447 293 228 2 37 2 N/A N/A&quot; The data now has only the rows we want but still doesn’t have any columns, it’s currently just a vector of strings. We want to make it into a data.frame to be able to work on it like we usually do. When looking at this data it is clear that where the division between columns is a bunch of white space. Take the first row for example, it says “Miami” then after lots of white spaces “111” than again with “2,280” and so on for the rest of the row. We’ll use this pattern of columns differentiated by white space to make sector_profile into a data.frame. We will use the function str_split_fixed() from the stringr package. This function is very similar to strsplit() except you can tell it how many columns to expect. install.packages(&quot;stringr&quot;) library(stringr) The syntax of str_split_fixed() is similar to strsplit() except the new parameter of the number of splits to expect. Looking at the PDF shows us that there are 10 columns so that’s the number we’ll use. Our split will be \" {2,}“. That is, a space that occurs two or more times. Since there are sectors with spaces in their name, we can’t have only one space, we need at least two. If you look carefully at the rows with sectors”Coast Border Sectors Total\" and “Northern Border Sectors Total”, the final two columns actually do not have two spaces between them because of the amount of * they have. Normally we’d want to fix this using gsub(), but those values will turn to NA anyway so we won’t bother in this case. sector_profile &lt;- str_split_fixed(sector_profile, &quot; {2,}&quot;, 10) If we check the head() we can see that we have the proper columns now but this still isn’t a data.frame and has no column names. head(sector_profile) #&gt; [,1] [,2] [,3] [,4] [,5] [,6] #&gt; [1,] &quot;Miami&quot; &quot;111&quot; &quot;2,280&quot; &quot;1,646&quot; &quot;2,253&quot; &quot;231&quot; #&gt; [2,] &quot;New Orleans&quot; &quot;63&quot; &quot;920&quot; &quot;528&quot; &quot;21&quot; &quot;6&quot; #&gt; [3,] &quot;Ramey&quot; &quot;38&quot; &quot;388&quot; &quot;387&quot; &quot;3&quot; &quot;2,932&quot; #&gt; [4,] &quot;Coastal Border Sectors Total&quot; &quot;212&quot; &quot;3,588&quot; &quot;2,561&quot; &quot;2,277&quot; &quot;3,169&quot; #&gt; [5,] &quot;Blaine&quot; &quot;296&quot; &quot;288&quot; &quot;237&quot; &quot;0&quot; &quot;0&quot; #&gt; [6,] &quot;Buffalo&quot; &quot;277&quot; &quot;447&quot; &quot;293&quot; &quot;228&quot; &quot;2&quot; #&gt; [,7] [,8] [,9] [,10] #&gt; [1,] &quot;292&quot; &quot;1&quot; &quot;N/A&quot; &quot;N/A&quot; #&gt; [2,] &quot;10&quot; &quot;0&quot; &quot;N/A&quot; &quot;N/A&quot; #&gt; [3,] &quot;89&quot; &quot;0&quot; &quot;N/A&quot; &quot;N/A&quot; #&gt; [4,] &quot;391&quot; &quot;1&quot; &quot;N/A **** N/A ****&quot; &quot;&quot; #&gt; [5,] &quot;9&quot; &quot;0&quot; &quot;N/A&quot; &quot;N/A&quot; #&gt; [6,] &quot;37&quot; &quot;2&quot; &quot;N/A&quot; &quot;N/A&quot; We can make it a data.frame just by putting it in data.frame(). To avoid making the columns into factors, we’ll set the parameter stringsAsFactors to FALSE. And we can assign the columns names using a vector of strings we can make. We’ll use the same column names as in the PDF but in lowercase and replacing spaces and parentheses with underscores. sector_profile &lt;- data.frame(sector_profile, stringsAsFactors = FALSE) names(sector_profile) &lt;- c(&quot;sector&quot;, &quot;agent_staffing&quot;, &quot;apprehensions&quot;, &quot;other_than_mexican_apprehensions&quot;, &quot;marijuana_pounds&quot;, &quot;cocaine_pounds&quot;, &quot;accepted_prosecutions&quot;, &quot;assaults&quot;, &quot;rescues&quot;, &quot;deaths&quot;) We have now taken a table from a PDF and successfully scraped it to a data.frame in R. Now we can work on it as we would any other data set we’ve used previously. head(sector_profile) #&gt; sector agent_staffing apprehensions #&gt; 1 Miami 111 2,280 #&gt; 2 New Orleans 63 920 #&gt; 3 Ramey 38 388 #&gt; 4 Coastal Border Sectors Total 212 3,588 #&gt; 5 Blaine 296 288 #&gt; 6 Buffalo 277 447 #&gt; other_than_mexican_apprehensions marijuana_pounds cocaine_pounds #&gt; 1 1,646 2,253 231 #&gt; 2 528 21 6 #&gt; 3 387 3 2,932 #&gt; 4 2,561 2,277 3,169 #&gt; 5 237 0 0 #&gt; 6 293 228 2 #&gt; accepted_prosecutions assaults rescues deaths #&gt; 1 292 1 N/A N/A #&gt; 2 10 0 N/A N/A #&gt; 3 89 0 N/A N/A #&gt; 4 391 1 N/A **** N/A **** #&gt; 5 9 0 N/A N/A #&gt; 6 37 2 N/A N/A To really be able to use this data we’ll want to clean the columns to turn the values to numeric type but we can leave that until later. For now let’s write a function that replicates much of this work for the next tables. 14.2 Making a function As we’ve done before, we want to take the code we wrote for the specific case of the first table in this PDF and turn it into a function for the general case of other tables in the PDF. Let’s copy the code we used above then convert it to a function. sector_profile &lt;- border_patrol[1] sector_profile &lt;- trimws(sector_profile) sector_profile &lt;- strsplit(sector_profile, &quot;\\r\\n&quot;) sector_profile &lt;- sector_profile[[1]] sector_profile &lt;- sector_profile[grep(&quot;Miami&quot;, sector_profile):grep(&quot;Nationwide Total&quot;, sector_profile)] sector_profile &lt;- str_split_fixed(sector_profile, &quot; {2,}&quot;, 10) sector_profile &lt;- data.frame(sector_profile, stringsAsFactors = FALSE) names(sector_profile) &lt;- c(&quot;sector&quot;, &quot;agent_staffing&quot;, &quot;total_apprehensions&quot;, &quot;other_than_mexican_apprehensions&quot;, &quot;marijuana_pounds&quot;, &quot;cocaine_pounds&quot;, &quot;accepted_prosecutions&quot;, &quot;assaults&quot;, &quot;rescues&quot;, &quot;deaths&quot;) Since each table is so similar our function will only need a few changes in the above code to work for all three tables. The object border_patrol has all four of the tables in the data, so we need to say which of these tables we want - we can call the parameter table_number. Then each table has a different number of columns so we need to change the str_split_fixed() function to take a variable with the number of columns we input, a value we’ll call number_columns. We rename each column to their proper name so we need to input a vector - which we’ll call column_names - with the names for each column. Finally, we want to have a parameter where we enter in the data which holds all of the tables, our object border_patrol, we can call this list_of_tables as it is fairly descriptive. We do this as it is bad form to have a function that relies on an object that isn’t explicitly put in the function. It we change our border_patrol object and the function doesn’t have that as an input, it will work differently than we expect. Since we called the object we scraped sector_profile for the first table, let’s change that to data as not all tables are called Sector Profile. scrape_pdf &lt;- function(list_of_tables, table_number, number_columns, column_names) { data &lt;- list_of_tables[table_number] data &lt;- trimws(data) data &lt;- strsplit(data, &quot;\\r\\n&quot;) data &lt;- data[[1]] data &lt;- data[grep(&quot;Miami&quot;, data):grep(&quot;Nationwide Total&quot;, data)] data &lt;- str_split_fixed(data, &quot; {2,}&quot;, number_columns) data &lt;- data.frame(data, stringsAsFactors = FALSE) names(data) &lt;- column_names return(data) } Now let’s run this function for each of the three tables we want to scrape, changing the function’s parameters to work for each table. To see what parameter values you need to input, look at the PDF itself or the screenshots in this lesson. table_1 &lt;- scrape_pdf(list_of_tables = border_patrol, table_number = 1, number_columns = 10, column_names = c(&quot;sector&quot;, &quot;agent_staffing&quot;, &quot;total_apprehensions&quot;, &quot;other_than_mexican_apprehensions&quot;, &quot;marijuana_pounds&quot;, &quot;cocaine_pounds&quot;, &quot;accepted_prosecutions&quot;, &quot;assaults&quot;, &quot;rescues&quot;, &quot;deaths&quot;)) table_2 &lt;- scrape_pdf(list_of_tables = border_patrol, table_number = 2, number_columns = 6, column_names = c(&quot;sector&quot;, &quot;accompanied_juveniles&quot;, &quot;unaccompanied_juveniles&quot;, &quot;total_juveniles&quot;, &quot;total_adults&quot;, &quot;total_apprehensions&quot;)) table_3 &lt;- scrape_pdf(list_of_tables = border_patrol, table_number = 3, number_columns = 4, column_names = c(&quot;sector&quot;, &quot;female&quot;, &quot;male&quot;, &quot;total_apprehensions&quot;)) We can use the function left_join() from the dplyr package to combine the three tables into a single object. In the first table there are some asterix after the final two row names in the Sector column. For our match to work properly we need to delete them which we can do using gsub(). If you look carefully at the Sector column in table_1 you’ll see that each value starts with a space (this is something that is hard to see just looking at the data and is found primarily when encountering an error that forces you to search as I did here). Since the other tables do not have their values start with a space, it won’t match properly in left_join(). We’ll fix this by running trimws() on the column from table_1. table_1$sector &lt;- gsub(&quot;\\\\*&quot;, &quot;&quot;, table_1$sector) table_1$sector &lt;- trimws(table_1$sector) Now we can run left_join(). library(dplyr) #&gt; #&gt; Attaching package: &#39;dplyr&#39; #&gt; The following objects are masked from &#39;package:stats&#39;: #&gt; #&gt; filter, lag #&gt; The following objects are masked from &#39;package:base&#39;: #&gt; #&gt; intersect, setdiff, setequal, union final_data &lt;- left_join(table_1, table_2) #&gt; Joining, by = c(&quot;sector&quot;, &quot;total_apprehensions&quot;) final_data &lt;- left_join(final_data, table_3) #&gt; Joining, by = c(&quot;sector&quot;, &quot;total_apprehensions&quot;) Let’s take a look at the head() of this combined data. head(final_data) #&gt; sector agent_staffing total_apprehensions #&gt; 1 Miami 111 2,280 #&gt; 2 New Orleans 63 920 #&gt; 3 Ramey 38 388 #&gt; 4 Coastal Border Sectors Total 212 3,588 #&gt; 5 Blaine 296 288 #&gt; 6 Buffalo 277 447 #&gt; other_than_mexican_apprehensions marijuana_pounds cocaine_pounds #&gt; 1 1,646 2,253 231 #&gt; 2 528 21 6 #&gt; 3 387 3 2,932 #&gt; 4 2,561 2,277 3,169 #&gt; 5 237 0 0 #&gt; 6 293 228 2 #&gt; accepted_prosecutions assaults rescues deaths #&gt; 1 292 1 N/A N/A #&gt; 2 10 0 N/A N/A #&gt; 3 89 0 N/A N/A #&gt; 4 391 1 N/A **** N/A **** #&gt; 5 9 0 N/A N/A #&gt; 6 37 2 N/A N/A #&gt; accompanied_juveniles unaccompanied_juveniles total_juveniles #&gt; 1 19 42 61 #&gt; 2 1 22 23 #&gt; 3 7 1 8 #&gt; 4 27 65 92 #&gt; 5 29 7 36 #&gt; 6 3 3 6 #&gt; total_adults female male #&gt; 1 2,219 219 2,061 #&gt; 2 897 92 828 #&gt; 3 380 65 323 #&gt; 4 3,496 376 3,212 #&gt; 5 252 97 191 #&gt; 6 441 69 378 In one data set we now have information from three separate tables in a PDF. There’s still some work to do - primarily convert the numeric columns to be actually numeric using gsub() to remove commas then using as.numeric() (or the parse_numeric() function from readr) on each column (probably through a for loop). but we have still made important progress getting useful data from a PDF table. "],
["geocoding.html", "15 Geocoding 15.1 Geocoding a single address 15.2 Making a function 15.3 Geocoding San Francisco marijuana dispensary locations", " 15 Geocoding Several recent studies have looked at the effect of marijuana dispensaries on crime around the dispensary. For these analyses they find the coordinates of each crime in the city and see if it occurred in a certain distance from the dispensary. Many crime data sets provide the coordinates of where each occurred, however sometimes the coordinates are missing - and other data such as marijuana dispensary locations give only the address - meaning that we need a way to find the coordinates of these locations. 15.1 Geocoding a single address In this chapter we will cover using the free geocoder from ArcGIS, a software that people frequently use when dealing primarily with mapping projects. Google Maps used to be easily usable in R but since 2018 requires an account to use its geocoder so we will not be using it. The URL for geocoding using ArcGIS is the following: https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/findAddressCandidates?f=json&amp;singleLine=ADDRESS&amp;outFields=Match_addr,Addr_type where instead of “ADDRESS” we put in the address whose coordinates we want. As an example, let’s look at Food Network’s Corporate office where they film many of their shows. The address is 75 9th Ave, New York, NY 10011. https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/findAddressCandidates?f=json&amp;singleLine=75%209th%20Ave,%20New%20York,%20NY%2010011&amp;outFields=Match_addr,Addr_type Including spaces in the address causes errors so all spaces need to be replaced with %20. Let’s see what data we get back from this URL. Enter the URL above in your browser and you’ll see these results. It gives us a page with several important values. For our purposes we want the “lat” and “lon” sections which are the latitude and longitude parts of a location’s coordinates. This data is stored on the page in a JSON format which is a convenient (for computers to read) way data is stored online. We can concert it to a data.frame that we’re more familiar with using the package jsonlite. install.packages(&quot;jsonlite&quot;) We will use the fromJSON() function and enter in the URL right in the (). library(jsonlite) fromJSON(&quot;https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/findAddressCandidates?f=json&amp;singleLine=75%209th%20Ave,%20New%20York,%20NY%2010011&amp;outFields=Match_addr,Addr_type&quot;) #&gt; $spatialReference #&gt; $spatialReference$wkid #&gt; [1] 4326 #&gt; #&gt; $spatialReference$latestWkid #&gt; [1] 4326 #&gt; #&gt; #&gt; $candidates #&gt; address location.x location.y score #&gt; 1 75 9th Ave, New York, 10011 -74.00457 40.74215 100 #&gt; attributes.Match_addr attributes.Addr_type extent.xmin extent.ymin #&gt; 1 75 9th Ave, New York, 10011 PointAddress -74.00566 40.74123 #&gt; extent.xmax extent.ymax #&gt; 1 -74.00366 40.74323 It returns a list of objects. This is a named list meaning that we can grab the part of the list we want using dollar sign notation as if it were a column in a data.frame. In this case we want the part of the object called candidates. To avoid having a very long line of code, let’s call the list fromJSON() returns address_coordinate and grab the candidates object from that list. address_coordinates &lt;- fromJSON(&quot;https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/findAddressCandidates?f=json&amp;singleLine=75%209th%20Ave,%20New%20York,%20NY%2010011&amp;outFields=Match_addr,Addr_type&quot;) address_coordinates$candidates #&gt; address location.x location.y score #&gt; 1 75 9th Ave, New York, 10011 -74.00457 40.74215 100 #&gt; attributes.Match_addr attributes.Addr_type extent.xmin extent.ymin #&gt; 1 75 9th Ave, New York, 10011 PointAddress -74.00566 40.74123 #&gt; extent.xmax extent.ymax #&gt; 1 -74.00366 40.74323 The candidates is a data.frame which includes 12 (slightly) different coordinates for our address. The first one is the one we want and if you look at the “score” column you can see it has the highest score of those 12. The ArcGIS geocoder provides a number of potential coordinates for an inputted address and ranks them in order of how confident it is that this is the address you want. Since we just want the top address - the “most confident” one - so we will just keep the first row. Since we are grabbing the first row of a data.frame, our square bracket notation must be [row, column]. For row we put 1 since we want the first row. Since we want every column we can leave it blank but make sure to keep the comma. address_coordinates &lt;- fromJSON(&quot;https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/findAddressCandidates?f=json&amp;singleLine=75%209th%20Ave,%20New%20York,%20NY%2010011&amp;outFields=Match_addr,Addr_type&quot;) address_coordinates &lt;- address_coordinates$candidates address_coordinates &lt;- address_coordinates[1, ] address_coordinates #&gt; address location.x location.y score #&gt; 1 75 9th Ave, New York, 10011 -74.00457 40.74215 100 #&gt; attributes.Match_addr attributes.Addr_type extent.xmin extent.ymin #&gt; 1 75 9th Ave, New York, 10011 PointAddress -74.00566 40.74123 #&gt; extent.xmax extent.ymax #&gt; 1 -74.00366 40.74323 This data.frame has something we’ve never seen before. It has columns that are themselves data.frames. For example, the column “location” is a data.frame with the x- and y-coordinates that we want. We can select this exactly as we do with any column but instead of returning a vector of values it returns a data.frame. address_coordinates$location #&gt; x y #&gt; 1 -74.00457 40.74215 Since our end goal is to get the coordinates of an address, the data.frame in the “location” column is exactly what we want. It took a few steps but now we have code that returns the coordinates of an address. 15.2 Making a function We want to geocode every single address from the officer-involved shooting data. As with most things where we do the same thing many times except for one minor change - here, the address being geocoded - we will make a function to help us. Let’s start by copying the code used to geocode a single address. address_coordinates &lt;- fromJSON(&quot;https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/findAddressCandidates?f=json&amp;singleLine=75%209th%20Ave,%20New%20York,%20NY%2010011&amp;outFields=Match_addr,Addr_type&quot;) address_coordinates &lt;- address_coordinates$candidates address_coordinates &lt;- address_coordinates[1, ] address_coordinates$location #&gt; x y #&gt; 1 -74.00457 40.74215 Now we can make the skeleton of a function without including any code. What do we want to input to the function and what do we want it to return? We want it so we input an address and it returns the coordinates of that address. We can call the function geocode_address, the input address and the returning value address_coordinates just to stay consistent with the code we already wrote. geocode_address &lt;- function(address) { return(address_coordinates) } Now we can add the code. geocode_address &lt;- function(address) { address_coordinates &lt;- fromJSON(&quot;https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/findAddressCandidates?f=json&amp;singleLine=75%209th%20Ave,%20New%20York,%20NY%2010011&amp;outFields=Match_addr,Addr_type&quot;) address_coordinates &lt;- address_coordinates$candidates address_coordinates &lt;- address_coordinates[1, ] address_coordinates$location return(address_coordinates) } Finally we need to replace the value in fromJSON() which is for a specific address with something that works for any address we input. Since the URL is in the form https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/findAddressCandidates?f=json&amp;singleLine=ADDRESS&amp;outFields=Match_addr,Addr_type we can use the paste() function to combine the address inputted with the URL format. There is one step necessary before that, however. Since spaces cause issues in the data, we need to replace every space in the address with %20. We can do that using gsub() which is perfect for replacing characters. Let’s try a simple example using gsub() before including it in our function. We just want to find every \" \" and replace it with \"%20\". We will use the address for the Food Network’s Corporate office as our example. gsub(&quot; &quot;, &quot;%20&quot;, &quot;75 9th Ave, New York, NY 10011&quot;) #&gt; [1] &quot;75%209th%20Ave,%20New%20York,%20NY%2010011&quot; It works so we can use the code to fix the address before putting it in the URL. To avoid having very long lines of code, we can break down the code into smaller pieces. We want to use paste() to combine the parts of the URL with the address and have that as the input in fromJSON(). Let’s do that in two steps. First we do the paste(), saving it in an object we can call url, and then use url as our input in fromJSON(). Since we do not want spaces in the URL, we need to set the sep parameter in paste() to \"\". geocode_address &lt;- function(address) { address &lt;- gsub(&quot; &quot;, &quot;%20&quot;, address) url &lt;- paste(&quot;https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/findAddressCandidates?f=json&amp;singleLine=&quot;, address, &quot;&amp;outFields=Match_addr,Addr_type&quot;, sep = &quot;&quot;) address_coordinates &lt;- fromJSON(url) address_coordinates &lt;- address_coordinates$candidates address_coordinates &lt;- address_coordinates[1, ] address_coordinates &lt;- address_coordinates$location return(address_coordinates) } We can try it using the same address we did earlier, “75 9th Ave, New York, NY 10011”. geocode_address(&quot;75 9th Ave, New York, NY 10011&quot;) #&gt; x y #&gt; 1 -74.00457 40.74215 It returns the same data.frame as earlier so our function works! 15.3 Geocoding San Francisco marijuana dispensary locations We now have a function capable of returning the coordinates of every location in our marijuana dispensary data. We can write a for loop to go through every row of data and get the coordinates for that row’s location. Let’s read in the marijuana dispensary data which is called “san_francisco_active_marijuana_retailers.csv” and call the object marijuana. setwd(here::here(&quot;data&quot;)) library(readr) marijuana &lt;- read_csv(&quot;san_francisco_active_marijuana_retailers.csv&quot;) #&gt; Parsed with column specification: #&gt; cols( #&gt; `License Number` = col_character(), #&gt; `License Type` = col_character(), #&gt; `Business Owner` = col_character(), #&gt; `Business Contact Information` = col_character(), #&gt; `Business Structure` = col_character(), #&gt; `Premise Address` = col_character(), #&gt; Status = col_character(), #&gt; `Issue Date` = col_character(), #&gt; `Expiration Date` = col_character(), #&gt; Activities = col_character(), #&gt; `Adult-Use/Medicinal` = col_character() #&gt; ) marijuana &lt;- as.data.frame(marijuana) Let’s look at the top 6 rows. head(marijuana) #&gt; License Number License Type Business Owner #&gt; 1 C10-0000614-LIC Cannabis - Retailer License Terry Muller #&gt; 2 C10-0000586-LIC Cannabis - Retailer License Jeremy Goodin #&gt; 3 C10-0000587-LIC Cannabis - Retailer License Justin Jarin #&gt; 4 C10-0000539-LIC Cannabis - Retailer License Ondyn Herschelle #&gt; 5 C10-0000522-LIC Cannabis - Retailer License Ryan Hudson #&gt; 6 C10-0000523-LIC Cannabis - Retailer License Ryan Hudson #&gt; Business Contact Information #&gt; 1 OUTER SUNSET HOLDINGS, LLC : Barbary Coast Sunset : Email- terry@barbarycoastsf.com : Phone- 5107173246 #&gt; 2 URBAN FLOWERS : Urban Pharm : Email- hilary@urbanpharmsf.com : Phone- 9168335343 : Website- www.up415.com #&gt; 3 CCPC, INC. : The Green Door : Email- alicia@greendoorsf.com : Phone- 4155419590 : Website- www.greendoorsf.com #&gt; 4 SEVENTY SECOND STREET : Flower Power SF : Email- flowerpowersf@hotmail.com : Phone- 5103681262 : Website- flowerpowerdispensary.com #&gt; 5 HOWARD STREET PARTNERS, LLC : The Apothecarium : Email- Ryan@apothecarium.com : Phone- 4157469001 : Website- www.apothecarium.com #&gt; 6 DEEP THOUGHT, LLC : The Apothecarium : Email- ryan@pothecarium.com : Phone- 4157469001 : Website- www.Apothecarium.com #&gt; Business Structure #&gt; 1 Limited Liability Company #&gt; 2 Corporation #&gt; 3 Corporation #&gt; 4 Corporation #&gt; 5 Limited Liability Company #&gt; 6 Limited Liability Company #&gt; Premise Address Status #&gt; 1 2165 IRVING ST san francisco, CA 94122 County: SAN FRANCISCO Active #&gt; 2 122 10TH ST SAN FRANCISCO, CA 941032605 County: SAN FRANCISCO Active #&gt; 3 843 Howard ST SAN FRANCISCO, CA 94103 County: SAN FRANCISCO Active #&gt; 4 70 SECOND ST SAN FRANCISCO, CA 94105 County: SAN FRANCISCO Active #&gt; 5 527 Howard ST San Francisco, CA 94105 County: SAN FRANCISCO Active #&gt; 6 2414 Lombard ST San Francisco, CA 94123 County: SAN FRANCISCO Active #&gt; Issue Date Expiration Date Activities Adult-Use/Medicinal #&gt; 1 9/13/2019 9/12/2020 N/A for this license type BOTH #&gt; 2 8/26/2019 8/25/2020 N/A for this license type BOTH #&gt; 3 8/26/2019 8/25/2020 N/A for this license type BOTH #&gt; 4 8/5/2019 8/4/2020 N/A for this license type BOTH #&gt; 5 7/29/2019 7/28/2020 N/A for this license type BOTH #&gt; 6 7/29/2019 7/28/2020 N/A for this license type BOTH So the column with the address is called Premise Address. Since it’s easier to deal with columns that don’t have spacing in the name, we will using gsub() to remove spacing from the column names. Each address also ends with “County:” followed by that address’s county, which in this case is always San Francisco. That isn’t normal in an address so it may affect our geocode. We need to gsub() that column to remove that part of the address. names(marijuana) &lt;- gsub(&quot; &quot;, &quot;_&quot;, names(marijuana)) Since the address issue is always \" County: SAN FRANCISCO\" we can just gsub() out that entire string. marijuana$Premise_Address &lt;- gsub(&quot; County: SAN FRANCISCO&quot;, &quot;&quot;, marijuana$Premise_Address) Now let’s make sure we did it right. names(marijuana) #&gt; [1] &quot;License_Number&quot; &quot;License_Type&quot; #&gt; [3] &quot;Business_Owner&quot; &quot;Business_Contact_Information&quot; #&gt; [5] &quot;Business_Structure&quot; &quot;Premise_Address&quot; #&gt; [7] &quot;Status&quot; &quot;Issue_Date&quot; #&gt; [9] &quot;Expiration_Date&quot; &quot;Activities&quot; #&gt; [11] &quot;Adult-Use/Medicinal&quot; head(marijuana$Premise_Address) #&gt; [1] &quot;2165 IRVING ST san francisco, CA 94122&quot; #&gt; [2] &quot;122 10TH ST SAN FRANCISCO, CA 941032605&quot; #&gt; [3] &quot;843 Howard ST SAN FRANCISCO, CA 94103&quot; #&gt; [4] &quot;70 SECOND ST SAN FRANCISCO, CA 94105&quot; #&gt; [5] &quot;527 Howard ST San Francisco, CA 94105&quot; #&gt; [6] &quot;2414 Lombard ST San Francisco, CA 94123&quot; We can now write a for loop to go through every row in our data and geocode that address. The function geocode_address() we made returns a data.frame with one column for the longitude and one for the latitude. To make it so we only work with the data.frame marijuana we can save the output of geocode_address() to a temporary file and add each of the columns it produces to a column in marijuana. We need to make columns for the coordinates in marijuana now to be filled in during the for loop. We can call them lon and lat for the longitude and latitude values we get from the coordinates. When making a new column which you will fill through a for loop, it is a good idea to start by assigning the column NA. That way any row that you don’t fill in during the loop (such as if there is no match for the address), will still be NA. NAs are easy to detect in your data for future subsetting or to ignore in a mathematical operation. marijuana$lon &lt;- NA marijuana$lat &lt;- NA Let’s start with an example using the first row. Inputting the address from the first row gives a data.frame with the coordinates. Let’s now save that output to an object we’ll call temp. temp &lt;- geocode_address(marijuana$Premise_Address[1]) temp #&gt; x y #&gt; 1 -122.4811 37.76315 We can use square bracket [] notation to assign the value from the x column of temp to our lon column in marijuana and do the same for the y and lat columns. Since we got the address from the first row, we need to put the coordinates in the first row so they are with the right address. marijuana$lon[1] &lt;- temp$x marijuana$lat[1] &lt;- temp$y And we can check the first 6 rows to make sure the first row is the only one with values in these new columns. head(marijuana) #&gt; License_Number License_Type Business_Owner #&gt; 1 C10-0000614-LIC Cannabis - Retailer License Terry Muller #&gt; 2 C10-0000586-LIC Cannabis - Retailer License Jeremy Goodin #&gt; 3 C10-0000587-LIC Cannabis - Retailer License Justin Jarin #&gt; 4 C10-0000539-LIC Cannabis - Retailer License Ondyn Herschelle #&gt; 5 C10-0000522-LIC Cannabis - Retailer License Ryan Hudson #&gt; 6 C10-0000523-LIC Cannabis - Retailer License Ryan Hudson #&gt; Business_Contact_Information #&gt; 1 OUTER SUNSET HOLDINGS, LLC : Barbary Coast Sunset : Email- terry@barbarycoastsf.com : Phone- 5107173246 #&gt; 2 URBAN FLOWERS : Urban Pharm : Email- hilary@urbanpharmsf.com : Phone- 9168335343 : Website- www.up415.com #&gt; 3 CCPC, INC. : The Green Door : Email- alicia@greendoorsf.com : Phone- 4155419590 : Website- www.greendoorsf.com #&gt; 4 SEVENTY SECOND STREET : Flower Power SF : Email- flowerpowersf@hotmail.com : Phone- 5103681262 : Website- flowerpowerdispensary.com #&gt; 5 HOWARD STREET PARTNERS, LLC : The Apothecarium : Email- Ryan@apothecarium.com : Phone- 4157469001 : Website- www.apothecarium.com #&gt; 6 DEEP THOUGHT, LLC : The Apothecarium : Email- ryan@pothecarium.com : Phone- 4157469001 : Website- www.Apothecarium.com #&gt; Business_Structure Premise_Address Status #&gt; 1 Limited Liability Company 2165 IRVING ST san francisco, CA 94122 Active #&gt; 2 Corporation 122 10TH ST SAN FRANCISCO, CA 941032605 Active #&gt; 3 Corporation 843 Howard ST SAN FRANCISCO, CA 94103 Active #&gt; 4 Corporation 70 SECOND ST SAN FRANCISCO, CA 94105 Active #&gt; 5 Limited Liability Company 527 Howard ST San Francisco, CA 94105 Active #&gt; 6 Limited Liability Company 2414 Lombard ST San Francisco, CA 94123 Active #&gt; Issue_Date Expiration_Date Activities Adult-Use/Medicinal #&gt; 1 9/13/2019 9/12/2020 N/A for this license type BOTH #&gt; 2 8/26/2019 8/25/2020 N/A for this license type BOTH #&gt; 3 8/26/2019 8/25/2020 N/A for this license type BOTH #&gt; 4 8/5/2019 8/4/2020 N/A for this license type BOTH #&gt; 5 7/29/2019 7/28/2020 N/A for this license type BOTH #&gt; 6 7/29/2019 7/28/2020 N/A for this license type BOTH #&gt; lon lat #&gt; 1 -122.4811 37.76315 #&gt; 2 NA NA #&gt; 3 NA NA #&gt; 4 NA NA #&gt; 5 NA NA #&gt; 6 NA NA Since we are geocoding a few dozen of addresses, this may take some time. for (i in 1:nrow(marijuana)) { temp &lt;- geocode_address(marijuana$Premise_Address[i]) marijuana$lon[i] &lt;- temp$x marijuana$lat[i] &lt;- temp$y } Now it appears that we have longitude and latitude for every dispensary. We should check that they all look sensible. summary(marijuana$lat) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; 37.71 37.76 37.77 37.77 37.78 37.80 summary(marijuana$lon) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; -122.5 -122.4 -122.4 -122.4 -122.4 -122.4 Another check is to make a simple scatterplot of the data. Since all the data is from San Francisco, they should be relatively close to each other. If there are dots far from the rest, that is probably a geocoding issue. plot(marijuana$lon, marijuana$lat) Most points are within a very narrow range so it appears that our geocoding worked properly. To finish this lesson we want to save the marijuana data.frame. We’ll use the write_csv() function from the readr package to save it as a .csv file. Since this data is now geocoded and it is specifically for San Francisco, we’ll save it as “san_francisco_marijuana_geocoded.csv”. setwd(here::here(&quot;data&quot;)) write_csv(marijuana, path = &quot;san_francisco_marijuana_geocoded.csv&quot;) "],
["introduction.html", "16 Introduction", " 16 Introduction At this point you have learned how to read in data, manipulate it to get just the parts you want or to aggregate it to the level you want, and visualize it through maps or graphs. You’ve done so using data sets that are commonly used in criminological research. In the next several chapters we will be introducing a number of other data sets - or looking deeper into data we’ve already seen - that are common in criminology. While these chapters do use R a bit to explore or read in the data, they are primarily a discussion of the trade-offs of using each data set. Some of the data sets are difficult to read into R, requiring more steps than you may be useful, so these chapters will also discuss how to get that data into R. "],
["ucr.html", "17 Uniform Crime Report (UCR) - Offenses Known and Clearances by Arrest 17.1 Exploring the UCR data 17.2 ORIs - Unique agency identifiers 17.3 Hierarchy Rule 17.4 Which crimes are included 17.5 Actual offenses, clearances, and unfounded offenses 17.6 Number of months reported", " 17 Uniform Crime Report (UCR) - Offenses Known and Clearances by Arrest The Uniform Crime Report (UCR) Program Data are an collection of agency-level crime data published by the FBI. There are a number of different data sets included in the UCR including data on crime, arrests, hate crimes, arson, and stolen property. We’ll be using the Offenses Known and Clearances by Arrest data set (the “crime” data set), which is the most commonly used data set in the UCR and is sometimes used as a shorthand for UCR data. In this lesson we’ll use “UCR” and “Offenses Known and Clearances by Arrest” interchangeably but keep in mind that doing so is technically incorrect. You can read more about the UCR program and all of the data sets it includes on the National Archive of Criminal Justice Data (NACJD) page here. You can also check out my site Crime Data Tool which visualizes several of the UCR data sets and has info in the FAQ page explaining the data. Nearly every police agency in the United States - approximately 18,000 agencies - now report their data to the FBI which compiles and releases the UCR data (some states have their agencies report to a state department which then sends the data to the FBI). This data is available since 1960 though early years have many fewer agencies reporting than do so in later years. The data file has annual data on the number of crimes reported, the number of crimes cleared, the number cleared where all offenders are under age 18, and the number of unfounded crimes. We’ll discuss each of these a bit further as we dive into the data. Agencies report the monthly number of each crime though the data we’ll work with has aggregated that to annual counts. Due to it’s longevity (it has data since 1960) and ubiquity (almost every agency reports and has done so for many years) it is a popular data set for criminologists. 17.1 Exploring the UCR data We are going to look at data with the combined annual count of crimes for every year available - 1960-2017 - which I’ve made available here. The FBI releases the data as a single file per year and each file has monthly counts of crime. This data set does some cleaning for us by aggregating yearly and making it a single file for the whole time period. The first step when working with this UCR data is loading it into R. As with loading any data, make sure that your working directory path is correctly set using setwd() so R knows which folder the data is in. load(&quot;data/offenses_known_yearly_1960_2017.rda&quot;) Let’s start with a basic examination of the data. First, how big it is, what variables it has, and what the units are. ncol(offenses_known_yearly_1960_2017) #&gt; [1] 159 nrow(offenses_known_yearly_1960_2017) #&gt; [1] 959010 names(offenses_known_yearly_1960_2017) #&gt; [1] &quot;ori&quot; &quot;ori9&quot; #&gt; [3] &quot;agency_name&quot; &quot;state&quot; #&gt; [5] &quot;state_abb&quot; &quot;year&quot; #&gt; [7] &quot;number_of_months_reported&quot; &quot;fips_state_code&quot; #&gt; [9] &quot;fips_county_code&quot; &quot;fips_state_county_code&quot; #&gt; [11] &quot;fips_place_code&quot; &quot;fips_state_place_code&quot; #&gt; [13] &quot;agency_type&quot; &quot;agency_subtype_1&quot; #&gt; [15] &quot;agency_subtype_2&quot; &quot;crosswalk_agency_name&quot; #&gt; [17] &quot;census_name&quot; &quot;population&quot; #&gt; [19] &quot;population_group&quot; &quot;country_division&quot; #&gt; [21] &quot;juvenile_age&quot; &quot;core_city_indication&quot; #&gt; [23] &quot;last_update&quot; &quot;fbi_field_office&quot; #&gt; [25] &quot;followup_indication&quot; &quot;zip_code&quot; #&gt; [27] &quot;covered_by_ori&quot; &quot;agency_count&quot; #&gt; [29] &quot;date_of_last_update&quot; &quot;month_included_in&quot; #&gt; [31] &quot;special_mailing_group&quot; &quot;special_mailing_address&quot; #&gt; [33] &quot;first_line_of_mailing_address&quot; &quot;second_line_of_mailing_address&quot; #&gt; [35] &quot;third_line_of_mailing_address&quot; &quot;fourth_line_of_mailing_address&quot; #&gt; [37] &quot;officers_killed_by_felony&quot; &quot;officers_killed_by_accident&quot; #&gt; [39] &quot;officers_assaulted&quot; &quot;actual_murder&quot; #&gt; [41] &quot;actual_manslaughter&quot; &quot;actual_rape_total&quot; #&gt; [43] &quot;actual_rape_by_force&quot; &quot;actual_rape_attempted&quot; #&gt; [45] &quot;actual_robbery_total&quot; &quot;actual_robbery_with_a_gun&quot; #&gt; [47] &quot;actual_robbery_with_a_knife&quot; &quot;actual_robbery_other_weapon&quot; #&gt; [49] &quot;actual_robbery_unarmed&quot; &quot;actual_assault_total&quot; #&gt; [51] &quot;actual_assault_with_a_gun&quot; &quot;actual_assault_with_a_knife&quot; #&gt; [53] &quot;actual_assault_other_weapon&quot; &quot;actual_assault_unarmed&quot; #&gt; [55] &quot;actual_assault_simple&quot; &quot;actual_burg_total&quot; #&gt; [57] &quot;actual_burg_force_entry&quot; &quot;actual_burg_nonforce_entry&quot; #&gt; [59] &quot;actual_burg_attempted&quot; &quot;actual_theft_total&quot; #&gt; [61] &quot;actual_mtr_veh_theft_total&quot; &quot;actual_mtr_veh_theft_car&quot; #&gt; [63] &quot;actual_mtr_veh_theft_truck&quot; &quot;actual_mtr_veh_theft_other&quot; #&gt; [65] &quot;actual_all_crimes&quot; &quot;actual_assault_aggravated&quot; #&gt; [67] &quot;actual_index_violent&quot; &quot;actual_index_property&quot; #&gt; [69] &quot;actual_index_total&quot; &quot;tot_clr_murder&quot; #&gt; [71] &quot;tot_clr_manslaughter&quot; &quot;tot_clr_rape_total&quot; #&gt; [73] &quot;tot_clr_rape_by_force&quot; &quot;tot_clr_rape_attempted&quot; #&gt; [75] &quot;tot_clr_robbery_total&quot; &quot;tot_clr_robbery_with_a_gun&quot; #&gt; [77] &quot;tot_clr_robbery_with_a_knife&quot; &quot;tot_clr_robbery_other_weapon&quot; #&gt; [79] &quot;tot_clr_robbery_unarmed&quot; &quot;tot_clr_assault_total&quot; #&gt; [81] &quot;tot_clr_assault_with_a_gun&quot; &quot;tot_clr_assault_with_a_knife&quot; #&gt; [83] &quot;tot_clr_assault_other_weapon&quot; &quot;tot_clr_assault_unarmed&quot; #&gt; [85] &quot;tot_clr_assault_simple&quot; &quot;tot_clr_burg_total&quot; #&gt; [87] &quot;tot_clr_burg_force_entry&quot; &quot;tot_clr_burg_nonforce_entry&quot; #&gt; [89] &quot;tot_clr_burg_attempted&quot; &quot;tot_clr_theft_total&quot; #&gt; [91] &quot;tot_clr_mtr_veh_theft_total&quot; &quot;tot_clr_mtr_veh_theft_car&quot; #&gt; [93] &quot;tot_clr_mtr_veh_theft_truck&quot; &quot;tot_clr_mtr_veh_theft_other&quot; #&gt; [95] &quot;tot_clr_all_crimes&quot; &quot;tot_clr_assault_aggravated&quot; #&gt; [97] &quot;tot_clr_index_violent&quot; &quot;tot_clr_index_property&quot; #&gt; [99] &quot;tot_clr_index_total&quot; &quot;clr_18_murder&quot; #&gt; [101] &quot;clr_18_manslaughter&quot; &quot;clr_18_rape_total&quot; #&gt; [103] &quot;clr_18_rape_by_force&quot; &quot;clr_18_rape_attempted&quot; #&gt; [105] &quot;clr_18_robbery_total&quot; &quot;clr_18_robbery_with_a_gun&quot; #&gt; [107] &quot;clr_18_robbery_with_a_knife&quot; &quot;clr_18_robbery_other_weapon&quot; #&gt; [109] &quot;clr_18_robbery_unarmed&quot; &quot;clr_18_assault_total&quot; #&gt; [111] &quot;clr_18_assault_with_a_gun&quot; &quot;clr_18_assault_with_a_knife&quot; #&gt; [113] &quot;clr_18_assault_other_weapon&quot; &quot;clr_18_assault_unarmed&quot; #&gt; [115] &quot;clr_18_assault_simple&quot; &quot;clr_18_burg_total&quot; #&gt; [117] &quot;clr_18_burg_force_entry&quot; &quot;clr_18_burg_nonforce_entry&quot; #&gt; [119] &quot;clr_18_burg_attempted&quot; &quot;clr_18_theft_total&quot; #&gt; [121] &quot;clr_18_mtr_veh_theft_total&quot; &quot;clr_18_mtr_veh_theft_car&quot; #&gt; [123] &quot;clr_18_mtr_veh_theft_truck&quot; &quot;clr_18_mtr_veh_theft_other&quot; #&gt; [125] &quot;clr_18_all_crimes&quot; &quot;clr_18_assault_aggravated&quot; #&gt; [127] &quot;clr_18_index_violent&quot; &quot;clr_18_index_property&quot; #&gt; [129] &quot;clr_18_index_total&quot; &quot;unfound_murder&quot; #&gt; [131] &quot;unfound_manslaughter&quot; &quot;unfound_rape_total&quot; #&gt; [133] &quot;unfound_rape_by_force&quot; &quot;unfound_rape_attempted&quot; #&gt; [135] &quot;unfound_robbery_total&quot; &quot;unfound_robbery_with_a_gun&quot; #&gt; [137] &quot;unfound_robbery_with_a_knife&quot; &quot;unfound_robbery_other_weapon&quot; #&gt; [139] &quot;unfound_robbery_unarmed&quot; &quot;unfound_assault_total&quot; #&gt; [141] &quot;unfound_assault_with_a_gun&quot; &quot;unfound_assault_with_a_knife&quot; #&gt; [143] &quot;unfound_assault_other_weapon&quot; &quot;unfound_assault_unarmed&quot; #&gt; [145] &quot;unfound_assault_simple&quot; &quot;unfound_burg_total&quot; #&gt; [147] &quot;unfound_burg_force_entry&quot; &quot;unfound_burg_nonforce_entry&quot; #&gt; [149] &quot;unfound_burg_attempted&quot; &quot;unfound_theft_total&quot; #&gt; [151] &quot;unfound_mtr_veh_theft_total&quot; &quot;unfound_mtr_veh_theft_car&quot; #&gt; [153] &quot;unfound_mtr_veh_theft_truck&quot; &quot;unfound_mtr_veh_theft_other&quot; #&gt; [155] &quot;unfound_all_crimes&quot; &quot;unfound_assault_aggravated&quot; #&gt; [157] &quot;unfound_index_violent&quot; &quot;unfound_index_property&quot; #&gt; [159] &quot;unfound_index_total&quot; We can see this is a very big file - 159 columns and nearly a million rows! Normally we’d use the head() function to see the first 6 rows of every column but since this data has so many columns we won’t do that as it’d be hard to read. Instead we can use View() to open what’s essentially an Excel file showing our data. This is useful to quickly glance at the data but is limited as it can bias us to believe that the first several rows are representative of the data (an issue also present with head()). But, for a first glance it is useful and will be supplemented by better checks below. View(offenses_known_yearly_1960_2017) From looking at the data in View() we can see that the units are agency-years. Each row is a single agency for a single year. This is useful because it tells us we will have crime in agencies over time, which is a very common unit of crime data. Let’s take a look at how many agencies report each year using the table() function which says how many times each value occurs for the column we select. This is also a useful check on if every year from 1960 to 2017 is actually available - don’t just trust that the data has what it says it has! table(offenses_known_yearly_1960_2017$year) #&gt; #&gt; 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 #&gt; 8452 8456 7825 8713 9038 9097 9147 9275 9398 9477 9835 10509 #&gt; 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 #&gt; 11302 12002 12510 13516 14518 15230 15770 16176 16413 16614 16792 16913 #&gt; 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 #&gt; 17037 17267 17441 17527 17298 17430 17608 17852 18012 18195 18367 18482 #&gt; 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 #&gt; 18536 18921 18510 18778 19655 19820 20214 20388 20585 20739 21011 21219 #&gt; 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 #&gt; 21353 21583 21771 21897 22049 22202 22332 22524 22645 22784 From these results it’s clear that there are huge differences in how many agencies report in early years compared to more recent years. Is this an issue in an analysis? From the above table it is concerning but not entirely clear there is an issue depending on our specific analysis. It we only care about recent years then it wouldn’t matter. If we only use large agencies, then knowing that relatively few agencies reported in 1960 doesn’t mean that few large agencies reported. For that you’d have to look closer at only the agencies you want to study - we won’t do that here but keep it in mind. 17.2 ORIs - Unique agency identifiers In the UCR and other FBI data sets, agencies are identified using ORiginating Agency Identifiers or ORIs. These are unique ID codes used to identify an agency. If we used the agency’s name we’d end up with some duplicates For example, if you looked for the Philadelphia Police Department using the agency name, you’d find both the “Philadelphia Police Department” in Pennsylvania and the one in Mississippi. head(offenses_known_yearly_1960_2017$ori) #&gt; [1] &quot;AK00101&quot; &quot;AK00101&quot; &quot;AK00101&quot; &quot;AK00101&quot; &quot;AK00101&quot; &quot;AK00101&quot; Each ORI is a 7-digit value starting with the state abbreviation (for some reason the FBI incorrectly puts the abbreviation for Nebraska as NB instead of NE) followed by 5 numbers. In the NIBRS data (another FBI data set) the ORI uses a 9-digit code - expanding the 5 numbers to 7 numbers. When dealing with specific agencies, make sure to use the ORI rather than the agency name to avoid any mistakes. For an easy way to find the ORI number of an agency, use this site. Type an agency name or an ORI code into the search section and it will return everything that is a match. 17.3 Hierarchy Rule The UCR has what is called the Hierarchy Rule where only the most serious crime in an incident is reported (except for motor vehicle theft which is always included). For example if there is an incident where the victim is robbed and then murdered, only the murder is counted as it is considered more serious than the robbery. How much does this affect our data in practice? Actually very little. Though the Hierarchy Rule does mean this data is an under-count, data from other sources indicate that it isn’t much of an under count. The FBI’s other data set, the National Inicident-Based Reporting System (NIBRS) contains every crime that occurs in an incident (i.e. it doesn’t use the Hierarchy Rule). Using this we can measure how many crimes the Hierarchy Rule excludes (Most major cities do not report to NIBRS so what we find in NIBRS may not apply to them). In over 90% of incidents, only one crime is committed. Additionally, when people talk about “crime” they usually mean murder which, while incomplete to discuss crime, means the UCR data here is accurate on that measure. 17.4 Which crimes are included If you look back at the output when we ran names(offenses_known_yearly_1960_2017) you’ll see that it produced five broad categories of columns. The first was information about the agency including population and geographic info, then came four columns with the same values except starting with “actual”, “tot_clr”, “clr_18”, and “unfound”. Following these starting values were 30 crime categories. We’ll discuss what each of those starting values mean in a bit, let’s first talk about which crimes are included and what that means for research. 17.4.1 Index Crimes The Offenses Known and Clearances by Arrest data set contains information on the number of “Index Crimes” (sometimes called Part I crimes) reported to each agency. These index crimes are a collection of eight crimes that, for historical reasons based largely by perceived importance in the 1920’s when the UCR program was first developed, are used as the primary measure of crime today. Other data sets in the UCR, such as the Arrests by Age, Sex, and Race data and the Hate Crime data have more crimes reported. The crimes are, in order by the Hierarchy Rule - Homicide Murder and non-negligent manslaughter Manslaughter by negligence Rape Rape Attempted rape Robbery With a firearm With a knife of cutting instrument With a dangerous weapon not otherwise specified Unarmed - using hands, fists, feet, etc. Aggravated Assault (assault with a weapon or causing serious bodily injury) With a firearm With a knife of cutting instrument With a dangerous weapon not otherwise specified Unarmed - using hands, fists, feet, etc. Burglary With forcible entry Without forcible entry Attempted burglary with forcible entry Theft (other than of a motor vehicle) Motor Vehicle Theft Cars Trucks and buses Other vehicles Arson Simple Assault For a full definition of each of the index crimes see the FBI’s Offense Definitions page here. Arson is considered an index crime but is not reported in this data - you need to use the separate Arson data set of the UCR to get access to arson counts. The ninth crime on that list, simple assault, is not considered an index crime but is nevertheless included in this data. Each of the crimes in the list above, and their subcategories, are included in the UCR data. In most reports, however, you’ll see them reported as the total number of index crimes, summing up categories 1-7 and reporting that as “crime”. These index crimes are often divided into violent index crimes - murder, rape, robbery, and aggravated assault - and property index crimes - burglary, theft, motor vehicle theft. 17.4.2 The problem with using index crimes The biggest problem with index crimes is that it is simply the sum of 8 (or 7 since arson data usually isn’t available) crimes. Index crimes have a huge range in their seriousness - it includes both murder and theft.This is clearly wrong as 100 murders is more serious than 100 thefts. This is especially a problem as less serious crimes (theft mostly) are far more common than more serious crimes (in 2017 there were 1.25 million violent index crimes in the United States. That same year had 5.5 million thefts.). So index crimes under-count the seriousness of crimes. Looking at total index crimes is, in effect, mostly just looking at theft. This is especially a problem because it hide trends in violent crimes. San Francisco, as an example, has had a huge increase in index crimes in the last several years. When looking closer, that increase is driven almost entirely by the near doubling of theft since 2011. During the same years, violent crime has stayed fairly steady. So the city isn’t getting more dangerous but it appears like it is due to just looking at total index crimes. Many researchers divide index crimes into violent and nonviolent categories, which helps but is still not entirely sufficient. Take Chicago as an example. It is a city infamous for its large number of murders. But as a fraction of index crimes, Chicago has a rounding error worth of murders. Their 653 murders in 2017 is only 0.5% of total index crimes. For violent index crimes, murder makes up 2.2%. What this means is that changes in murder are very difficult to detect. If Chicago had no murders this year, but a less serious crime (such as theft) increased slightly, we couldn’t tell from looking at the number of index crimes. 17.4.3 Rape definition change Starting in 2013, rape has a new, broader definition in the UCR to include oral and anal penetration (by a body part or object) and to allow men to be victims. The previous definition included only forcible intercourse against a woman. As this revised definition is broader than the original one post-2013, rape data is not comparable to pre-2013 data. 17.5 Actual offenses, clearances, and unfounded offenses For each crime we have four different categories indicating the number of crimes actually committed, the number cleared, and the number determined to not have occurred. 17.5.1 Actual This is the number of offenses that occurred, simply a count of the number of crimes that month. For example if 10 people are murdered in a city the number of “actual murders” would be 10. 17.5.2 Total Cleared A crime is cleared when an offender is arrested or when the case is considered cleared by exceptional means. When a single offender for a crime is arrested, that crime is considered cleared. If multiple people committed a crime, only a single person must be arrested for it to be cleared, and as the UCR data is at the offense level, making multiple arrests for an incident only counts as one incident cleared. So if 10 people committed a murder and all 10 were arrested, it would report one murder cleared not 10. If only one of these people are arrested it would still report one murder cleared - the UCR does not even say how many people commit a crime. A crime is considered exceptionally cleared if the police can identify the offender, have enough evidence to arrest the offender, know where the offender is, but is unable to arrest them. Some examples of this are the death of the offender or when the victim refuses to cooperate in the case. Unfortunately this data does not differentiate between clearances by arrest or by exceptional means. For a comprehensive report on how this variable can be exploited to exaggerate clearance rates, see this report by ProPublica on exceptional clearances with rape cases. 17.5.3 Cleared Where All Offenders Are Under 18 This variable is very similar to Total Cleared except is only for offenses in which every offender is younger than age 18. 17.5.4 Unfounded An unfounded crime is one in which a police investigation has determined that the reported crime did not actually happen. For example if the police are called to a possible burglary but later find out that a burglary did not occur they would put it down as 1 unfounded burglary. This is based on police investigation rather than the decision of any other party such as a coroner, judge, jury, or prosecutor. 17.6 Number of months reported UCR data is reported monthly though even agencies that decide to report their data may not do so every month. As we don’t want to compare an agency which reports 12 months to one that reports fewer, the variable number_of_months_reported is way keep only agencies that report 12 months, or deal with those that report fewer. table(offenses_known_yearly_1960_2017$number_of_months_reported) #&gt; #&gt; 0 1 2 3 4 5 6 7 8 9 #&gt; 229843 2514 2522 2926 2633 2875 3876 3350 4013 4693 #&gt; 10 11 12 #&gt; 6416 14940 678409 From our table() output it seems that when agencies do report, they tend to do so for all 12 months of the year. However, this variable is seriously flawed, and its name is quite misleading. In reality this variable is actually just whichever the last month reported was. If an agency reported every month of the year, meaning December is the last month, they would have a value of 12. If the agency only reported in December, they would also have a value of 12. While there are ways in the monthly data to measure actual number of months reported, these ways are also flawed. So be cautious about this data and particularly the value of this variable. "],
["useful-resources.html", "A Useful resources A.1 Learning R and coding issues A.2 Data", " A Useful resources A.1 Learning R and coding issues R for Data Science - This free online book provides a good introduction for R though it differs in several important ways from this class. Stack Overflow - Stack Overflow is a website that answers programming-related questions. It’s like the Yahoo Answers of programming. That said, a lot of the answer are bad. Some answers are overly confusing or provide code that you may not understand. You can use this source, but don’t rely too heavily on it. Its search function isn’t great so it’s better to Google your question and choose the stackoverflow.com result. A.2 Data National Archive of Criminal Justice Data (NACJD) - Crime Data - NACJD is a site where you can download crime data, including many of the data sets we’ve worked on throughout this book. Nearly all FBI and BJS data sets are available on this site. If you need data for a research question, NACJD is a good place to start looking. Inter-university Consortium for Political and Social Research (ICPSR) - General Data - Like NACJD, ICPSR allows you to download data from a variety of government and non-government sources for research. ICPSR holds a wider variety of data than NACJD does (NACJD is part of ICPSR) so includes data that is not specifically crime-related. Crime Data Tool - cleaned crime data - This is my personal site where you can look at graphs and tables of (primarily) agency-level data including offenses, arrests, assaults on officers, and prison information. On each page you can download a .csv file with the information displayed. On the data page, there are links to all of the data sets I have cleaned and made available - this data is mostly UCR data but includes some other data such as the alcohol consumption data we explored in Chapter @ref(#graphing-intro). Local crime data - The Police Foundation has put together a list of data sets made public by police agencies. This data is primarily data sets of crime incidents, calls for service, arrests, and officer-involved shootings though some other categories such as workforce demographics and assaults on officers are available. "]
]
